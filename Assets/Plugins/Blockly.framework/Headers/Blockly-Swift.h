// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import QuartzCore;
@import ObjectiveC;
@import CoreGraphics;
@import UIKit;
@import Foundation;
@import WebKit;
#endif

#import <Blockly/Blockly.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIBezierPath;
@class NSCoder;

/**
  Layer used to draw a \code
  UIBezierPath
  \endcode.
*/
SWIFT_CLASS_NAMED("BezierPathLayer")
@interface BKYBezierPathLayer : CAShapeLayer
/**
  The bezier path to draw
*/
@property (nonatomic, readonly, strong) UIBezierPath * _Nullable bezierPath;
/**
  The duration of the bezier path animation
*/
@property (nonatomic) double animationDuration;
/**
  Default initializer for bezier path layer.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes the path with a layer.
  \param layer The layer from which custom fields should be copied.

*/
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Draws \code
  self.path
  \endcode using a given bezier path.
  \param bezierPath The \code
  UIBezierPath
  \endcode to draw.

  \param animated Flag determining if the draw should be animated or not.

*/
- (void)setBezierPath:(UIBezierPath * _Nullable)bezierPath animated:(BOOL)animated;
@end

@class BKYConnection;
@class BKYInput;
@class UIColor;
@class BKYField;
@class BKYBlockLayout;

/**
  Class that represents a single block.
  note:
  To create a block programmatically, use a \code
  BlockBuilder
  \endcode.
*/
SWIFT_CLASS_NAMED("Block")
@interface BKYBlock : NSObject
/**
  A unique identifier used to identify this block for its lifetime
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull uuid;
/**
  The type name of this block
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/**
  Flag indicating if input connectors should be drawn inside a block (\code
  true
  \endcode) or
  on the edge of the block (\code
  false
  \endcode)
*/
@property (nonatomic) BOOL inputsInline;
/**
  The absolute position of the block, in the Workspace coordinate system
*/
@property (nonatomic) BKYWorkspacePoint position;
/**
  Flag indicating if this is a shadow block (\code
  true
  \endcode) or not (`false)
*/
@property (nonatomic, readonly) BOOL shadow;
/**
  The \code
  .OutputValue
  \endcode connection for this block
*/
@property (nonatomic, readonly, strong) BKYConnection * _Nullable outputConnection;
/**
  Convenience property for accessing \code
  self.outputConnection?.targetBlock
  \endcode
*/
@property (nonatomic, readonly, strong) BKYBlock * _Nullable outputBlock;
/**
  The \code
  .NextStatement
  \endcode connection for this block
*/
@property (nonatomic, readonly, strong) BKYConnection * _Nullable nextConnection;
/**
  Convenience property for accessing \code
  self.nextConnection?.targetBlock
  \endcode
*/
@property (nonatomic, readonly, strong) BKYBlock * _Nullable nextBlock;
/**
  Convenience property for accessing \code
  self.nextConnection?.shadowBlock
  \endcode
*/
@property (nonatomic, readonly, strong) BKYBlock * _Nullable nextShadowBlock;
/**
  The \code
  .PreviousStatement
  \endcode connection for this block
  note:
  A block may only have one non-nil \code
  self.outputConnection
  \endcode or \code
  self.previousConnection
  \endcode
*/
@property (nonatomic, readonly, strong) BKYConnection * _Nullable previousConnection;
/**
  Convenience property for accessing \code
  self.previousConnection?.targetBlock
  \endcode
*/
@property (nonatomic, readonly, strong) BKYBlock * _Nullable previousBlock;
/**
  If an inferior connection exists, returns either \code
  self.outputConnection
  \endcode or
  \code
  self.previousConnection
  \endcode (only one may be non-\code
  nil
  \endcode).
*/
@property (nonatomic, readonly, strong) BKYConnection * _Nullable inferiorConnection;
/**
  List of connections directly attached to this block
*/
@property (nonatomic, readonly, copy) NSArray<BKYConnection *> * _Nonnull directConnections;
/**
  List of inputs attached to this block
*/
@property (nonatomic, readonly, copy) NSArray<BKYInput *> * _Nonnull inputs;
/**
  The color of the block
*/
@property (nonatomic, readonly, strong) UIColor * _Nonnull color;
/**
  Tooltip text of the block
*/
@property (nonatomic, copy) NSString * _Nonnull tooltip;
/**
  The comment text of the block
*/
@property (nonatomic, copy) NSString * _Nonnull comment;
/**
  A help URL to learn more info about this block
*/
@property (nonatomic, copy) NSString * _Nonnull helpURL;
/**
  Flag indicating if this block may be deleted
*/
@property (nonatomic) BOOL deletable;
/**
  Flag indicating if this block may be moved by the user
*/
@property (nonatomic) BOOL movable;
/**
  Flag indicating if this block has had its user interaction disabled
*/
@property (nonatomic) BOOL disabled;
/**
  Flag indicating if this block may be dragged by the user
*/
@property (nonatomic, readonly) BOOL draggable;
/**
  Flag indicating if this block can be edited. Updating this property automatically updates
  the \code
  editable
  \endcode property on all child fields.
*/
@property (nonatomic) BOOL editable;
/**
  Flag indicating if this block is at the highest level in the workspace
*/
@property (nonatomic, readonly) BOOL topLevel;
/**
  The layout associated with this block.
*/
@property (nonatomic, weak) BKYBlockLayout * _Nullable layout;
/**
  Returns a list of all connections directly or indirectly connected to this block.

  returns:
  A list of all connections directly or indirectly connected to this block.
*/
- (NSArray<BKYConnection *> * _Nonnull)allConnectionsForTree;
/**
  Follows the chain of next connections starting from this block and returns the last block in the
  chain.
*/
- (BKYBlock * _Nonnull)lastBlockInChain;
/**
  Follows the chain of input value connections starting from this block, returning the last input
  value connection. For each block in the chain, if there is exactly one input value, it either
  follows the input to the next block or returns the input value connection if it’s the last block.
  Nil is returned if any block in the chain has no or multiple input values.

  returns:
  The last input connection in the chain, or nil if none could be found.
*/
- (BKYConnection * _Nullable)lastInputValueConnectionInChain;
/**
  Follows all input and next connections starting from this block and returns all blocks connected
  to this block, including this block.

  returns:
  A list of all blocks connected to this block, including this block.
*/
- (NSArray<BKYBlock *> * _Nonnull)allBlocksForTree;
/**
  Finds the first input with a given name.
  \param name The input name


  returns:
  The first input with that name or nil.
*/
- (BKYInput * _Nullable)firstInputWithName:(NSString * _Nonnull)name;
/**
  Finds the first field with a given name.
  \param name The field name


  returns:
  The first field with that name or nil.
*/
- (BKYField * _Nullable)firstFieldWithName:(NSString * _Nonnull)name;
/**
  Sends a notification to \code
  self.listeners
  \endcode that this block has been updated.
*/
- (void)notifyDidUpdateBlock;
/**
  Append an input to the end of \code
  self.inputs
  \endcode.
  \param input The \code
  Input
  \endcode to append.

*/
- (void)appendInput:(BKYInput * _Nonnull)input;
/**
  Insert an input at the specified position.
  \param input The \code
  Input
  \endcode to insert.

  \param index The position to insert the input into \code
  self.inputs
  \endcode.

*/
- (void)insertInput:(BKYInput * _Nonnull)input at:(NSInteger)index;
/**
  Remove an input from the block. If the input doesn’t exist, nothing happens.
  note:
  The input must be disconnected from any connected shadow and non-shadow blocks prior to
  calling this method or else an error is thrown.
  \param input The \code
  Input
  \endcode to remove.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if \code
  input
  \endcode has a shadow or non-shadow block still connected to it.
*/
- (BOOL)removeInput:(BKYInput * _Nonnull)input error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface BKYBlock (SWIFT_EXTENSION(Blockly))
/**
  Returns an XML string representing the current state of this block and all of its descendants.

  throws:

  \code
  BlocklyError
  \endcode: Thrown if there was an error serializing this block or any of its descendants.

  returns:
  The XML string.
*/
- (NSString * _Nullable)toXMLWithError:(NSError * _Nullable * _Nullable)error;
@end


@interface BKYBlock (SWIFT_EXTENSION(Blockly))
@end


@interface BKYBlock (SWIFT_EXTENSION(Blockly))
@end


@interface BKYBlock (SWIFT_EXTENSION(Blockly))
@end

@class BKYInputBuilder;
@protocol BKYBlockExtension;

/**
  Builder for creating \code
  Block
  \endcode instances.
*/
SWIFT_CLASS_NAMED("BlockBuilder")
@interface BKYBlockBuilder : NSObject
/**
  The name of the block. Defaults to \code
  ""
  \endcode.
*/
@property (nonatomic, copy) NSString * _Nonnull name;
/**
  The color of the block. Defaults to \code
  UIColor.clear
  \endcode.
*/
@property (nonatomic, strong) UIColor * _Nonnull color;
/**
  Specifies the output connection is enabled. Defaults to \code
  false
  \endcode.
*/
@property (nonatomic, readonly) BOOL outputConnectionEnabled;
/**
  Specifies the output type checks. Defaults to \code
  nil
  \endcode.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable outputConnectionTypeChecks;
/**
  Specifies the next connection is enabled. Defaults to \code
  false
  \endcode.
*/
@property (nonatomic, readonly) BOOL nextConnectionEnabled;
/**
  Specifies the next connection type checks. Defaults to \code
  nil
  \endcode.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable nextConnectionTypeChecks;
/**
  Specifies the previous connection is enabled. Defaults to \code
  false
  \endcode.
*/
@property (nonatomic, readonly) BOOL previousConnectionEnabled;
/**
  Specifies the previous connection type checks. Defaults to \code
  nil
  \endcode.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable previousConnectionTypeChecks;
/**
  The builders for inputs on the block. Defaults to \code
  []
  \endcode.
*/
@property (nonatomic, copy) NSArray<BKYInputBuilder *> * _Nonnull inputBuilders;
/**
  Specifies the inputs are inline. Defaults to \code
  false
  \endcode.
*/
@property (nonatomic) BOOL inputsInline;
/**
  The absolute position of the block, in the Workspace coordinate system.
  Defaults to \code
  WorkspacePoint.zero
  \endcode.
*/
@property (nonatomic) BKYWorkspacePoint position;
/**
  Specifies extensions that should be run on the block during initialization. Defaults to \code
  []
  \endcode.
*/
@property (nonatomic, copy) NSArray<id <BKYBlockExtension>> * _Nonnull extensions;
/**
  The tooltip of the block. Defaults to \code
  ""
  \endcode.
*/
@property (nonatomic, copy) NSString * _Nonnull tooltip;
/**
  The comment of the block. Defaults to \code
  ""
  \endcode.
*/
@property (nonatomic, copy) NSString * _Nonnull comment;
/**
  The help URL of the block. Defaults to \code
  ""
  \endcode.
*/
@property (nonatomic, copy) NSString * _Nonnull helpURL;
/**
  Specifies the block is deletable. Defaults to \code
  true
  \endcode.
*/
@property (nonatomic) BOOL deletable;
/**
  Specifies the block is movable. Defaults to \code
  true
  \endcode.
*/
@property (nonatomic) BOOL movable;
/**
  Specifies the block is editable. Defaults to \code
  true
  \endcode.
*/
@property (nonatomic) BOOL editable;
/**
  Specifies the block is disabled. Defaults to \code
  false
  \endcode.
*/
@property (nonatomic) BOOL disabled;
/**
  Initializes the block builder. Requires a name for the block to be built.
  \param name The name of the block to be built.

*/
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
/**
  Initialize a builder from an existing block. All values that are not specific to
  a single instance of a block will be copied in to the builder. Any associated layouts are not
  copied into the builder.
  \param block The block to be copied.

*/
- (nonnull instancetype)initWithBlock:(BKYBlock * _Nonnull)block OBJC_DESIGNATED_INITIALIZER;
/**
  Creates a new block given the current state of the builder, assigned with a new UUID.
  \param shadow Specifies if the resulting block should be a shadow block.


  throws:

  \code
  BlocklyError
  \endcode: Occurs if the block is missing any required pieces.

  returns:
  A new block.
*/
- (BKYBlock * _Nullable)makeBlockAsShadow:(BOOL)shadow error:(NSError * _Nullable * _Nullable)error;
/**
  Creates a new block given the current state of the builder.
  \param shadow [Optional] Specifies if the resulting block should be a shadow block.
  The default value is \code
  false
  \endcode.

  \param uuid [Optional] The uuid to assign the block. If nil, a new uuid is automatically
  assigned to the block.


  throws:

  \code
  BlocklyError
  \endcode: Occurs if the block is missing any required pieces.

  returns:
  A new block.
*/
- (BKYBlock * _Nullable)makeBlockAsShadow:(BOOL)shadow uuid:(NSString * _Nullable)uuid error:(NSError * _Nullable * _Nullable)error;
/**
  Specifies an output connection on the builder, and optionally the type checks to go with it.
  \param enabled Specifies the resulting block should have an output connection.

  \param typeChecks [Optional] Specifies the type checks for the given output connection.
  Defaults to \code
  nil
  \endcode.


  throws:

  \code
  BlocklyError
  \endcode: Occurs if the builder already has a next or previous connection.
*/
- (BOOL)setOutputConnectionWithEnabled:(BOOL)enabled typeChecks:(NSArray<NSString *> * _Nullable)typeChecks error:(NSError * _Nullable * _Nullable)error;
/**
  Specifies an next connection on the builder, and optionally the type checks to go with it.
  \param enabled Specifies the resulting block should have a next connection.

  \param typeChecks [Optional] Specifies the type checks for the given next connection.
  Defaults to \code
  nil
  \endcode.


  throws:

  \code
  BlocklyError
  \endcode: Occurs if the builder already has an output connection.
*/
- (BOOL)setNextConnectionWithEnabled:(BOOL)enabled typeChecks:(NSArray<NSString *> * _Nullable)typeChecks error:(NSError * _Nullable * _Nullable)error;
/**
  Specifies a previous connection on the builder, and optionally the type checks to go with it.
  \param enabled Specifies the resulting block should have a previous connection.

  \param typeChecks [Optional] Specifies the type checks for the given previous connection.
  Defaults to \code
  nil
  \endcode.


  throws:

  \code
  BlocklyError
  \endcode: Occurs if the builder already has an output connection.
*/
- (BOOL)setPreviousConnectionWithEnabled:(BOOL)enabled typeChecks:(NSArray<NSString *> * _Nullable)typeChecks error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class BKYWorkspaceLayoutCoordinator;

/**
  Object responsible for bumping blocks away from each other.
*/
SWIFT_CLASS_NAMED("BlockBumper")
@interface BKYBlockBumper : NSObject
/**
  The workspace layout coordinator where blocks are being bumped
*/
@property (nonatomic, weak) BKYWorkspaceLayoutCoordinator * _Nullable workspaceLayoutCoordinator;
/**
  Bumps the block layout belonging to a given connection away from another connection.
  \param impingingConnection The connection of the block being bumped away.

  \param stationaryConnection The connection that is being used as the source location for
  the bump.

*/
- (void)bumpBlockLayoutOfConnection:(BKYConnection * _Nonnull)impingingConnection awayFromConnection:(BKYConnection * _Nonnull)stationaryConnection;
/**
  Move all neighbors of the given block layout and its sub-blocks so that they don’t appear to be
  connected to the given block layout.
  \param blockLayout The \code
  BlockLayout
  \endcode to bump others away from.

  \param alwaysBumpOthers [Optional] When set to \code
  true
  \endcode, \code
  blockLayout
  \endcode will always bump other
  block groups instead of its own. When set to \code
  false
  \endcode, \code
  blockLayout
  \endcode’s own block group may be
  bumped. This value defaults to \code
  false
  \endcode.

*/
- (void)bumpNeighborsOfBlockLayout:(BKYBlockLayout * _Nonnull)blockLayout alwaysBumpOthers:(BOOL)alwaysBumpOthers;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Protocol for extension code that can be executed on a \code
  Block
  \endcode during its initialization.
*/
SWIFT_PROTOCOL_NAMED("BlockExtension")
@protocol BKYBlockExtension
/**
  Runs extension code for a given block.
  \param block The block that is the target of the extension code.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if an error occurs while running the extension code.
*/
- (BOOL)runWithBlock:(BKYBlock * _Nonnull)block error:(NSError * _Nullable * _Nullable)error;
@end


/**
  Wraps extension code in a closure so it can be executed on a \code
  Block
  \endcode during its initialization.
*/
SWIFT_CLASS_NAMED("BlockExtensionClosure")
@interface BKYBlockExtensionClosure : NSObject <BKYBlockExtension>
/**
  Creates a block extension.
  \param closure Code that should be run for a \code
  Block
  \endcode during its initialization.

*/
- (nonnull instancetype)init:(void (^ _Nonnull)(BKYBlock * _Nonnull))closure OBJC_DESIGNATED_INITIALIZER;
/**
  Runs extension code on a given block.
  \param block The block that is used for the extension code closure.

*/
- (BOOL)runWithBlock:(BKYBlock * _Nonnull)block error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSBundle;

/**
  Factory for instantiating new \code
  Block
  \endcode instances by name.
  Block builders can be loaded into the factory by:
  <ul>
    <li>
      Loading default files containing JSON block definitions. The contents of these files are
      predefined by the Blockly library.
    </li>
    <li>
      Loading custom files containing JSON block definitions.
    </li>
    <li>
      Manually creating a \code
      BlockBuilder
      \endcode for a specific block name and assigning it to the factory.
    </li>
  </ul>
*/
SWIFT_CLASS_NAMED("BlockFactory")
@interface BKYBlockFactory : NSObject
/**
  Dictionary of \code
  BlockExtension
  \endcode objects indexed by their extension name
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <BKYBlockExtension>> * _Nonnull blockExtensions;
/**
  Loads block builders from a list of default files containing JSON block definitions. The
  contents of these files are predefined by the Blockly library.
  note:
  This method will overwrite any existing block builders that contain the same name.
  \param defaultFiles The list of default block definition files that should be loaded.

*/
- (void)loadFromDefaultFiles:(BKYBlockJSONFile)defaultFiles;
/**
  Loads block builders from a list of files containing JSON block definitions.
  note:
  This method will overwrite any existing block builders that contain the same name.
  \param jsonPaths List of paths to files containing JSON block definitions.

  \param bundle The bundle containing the JSON paths. If \code
  nil
  \endcode is specified,
  \code
  NSBundle.mainBundle()
  \endcode is used by default.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if a JSON file could not be found or read, or if the JSON contains
  invalid block definition(s).
*/
- (BOOL)loadFromJSONPaths:(NSArray<NSString *> * _Nonnull)jsonPaths bundle:(NSBundle * _Nullable)bundle error:(NSError * _Nullable * _Nullable)error;
/**
  Sets the block builder to use when making new blocks of a given name.
  note:
  This method automatically sets \code
  blockBuilder.name
  \endcode to match the given \code
  name
  \endcode.
  \param blockBuilder The \code
  BlockBuilder
  \endcode to use.

  \param name The block name to associate with this block builder.

*/
- (void)setBlockBuilder:(BKYBlockBuilder * _Nonnull)blockBuilder forName:(NSString * _Nonnull)name;
/**
  Returns the block builder that is being used for given block name.
  \param name The block name to search for the block builder.


  returns:
  The \code
  BlockBuilder
  \endcode matching the given \code
  name
  \endcode or \code
  nil
  \endcode if no block builder could be
  found.
*/
- (BKYBlockBuilder * _Nullable)blockBuilderForName:(NSString * _Nonnull)name;
/**
  Updates \code
  self.blockExtensions
  \endcode from a dictionary of given block extensions. If an extension
  already exists in \code
  self.blockExtensions
  \endcode for a given name, that value is overwritten by the one
  supplied by \code
  extensions
  \endcode. These extensions are associated with block builders when they are
  loaded from JSON files.
  \param extensions Dictionary mapping \code
  BlockExtension
  \endcode objects to their extension name.

*/
- (void)updateBlockExtensions:(NSDictionary<NSString *, id <BKYBlockExtension>> * _Nonnull)blockExtensions;
/**
  Creates and returns a new \code
  Block
  \endcode with the given name.
  \param name The name of the block to build.


  throws:

  \code
  BlocklyError
  \endcode: Occurs if the block builder for the given name could not be found or if the
  block builder is missing any required pieces.

  returns:
  A new \code
  Block
  \endcode.
*/
- (BKYBlock * _Nullable)makeBlockWithName:(NSString * _Nonnull)name error:(NSError * _Nullable * _Nullable)error;
/**
  Creates and returns a new \code
  Block
  \endcode with the given name.
  \param name The name of the block to build.

  \param shadow Specifies whether the resulting block should be a shadow block (\code
  true
  \endcode) or a
  regular block (\code
  false
  \endcode).

  \param uuid [Optional] The uuid to assign the block. If nil, a new uuid is automatically
  assigned to the block.


  throws:

  \code
  BlocklyError
  \endcode: Occurs if the block builder for the given name could not be found or if the
  block builder is missing any required pieces.

  returns:
  A new \code
  Block
  \endcode.
*/
- (BKYBlock * _Nullable)makeBlockWithName:(NSString * _Nonnull)name shadow:(BOOL)shadow uuid:(NSString * _Nullable)uuid error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BKYLayoutEngine;
@class BKYLayoutConfig;

/**
  Abstract base class that defines a node in a tree-hierarchy. It is used for storing layout
  information on how to render and position itself relative to other nodes in this hierarchy. Nodes
  can represent fields, blocks, or a workspace (which are always root nodes).
  The coordinate system used inside a \code
  Layout
  \endcode object is in the “Workspace coordinate system”.
  There are many properties inside a \code
  Layout
  \endcode object that should not be accessed or
  modified by UI views during rendering (eg. \code
  relativePosition
  \endcode, \code
  size
  \endcode, \code
  absolutePosition
  \endcode). Instead,
  a UI view can simply access the property \code
  viewFrame
  \endcode to determine its “UIView coordinate system”
  position and size.
*/
SWIFT_CLASS_NAMED("Layout")
@interface BKYLayout : NSObject
/**
  A unique identifier used to identify this layout for its lifetime
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull uuid;
/**
  The \code
  LayoutEngine
  \endcode used for layout related functions such as unit scaling and
  UI configuration.
*/
@property (nonatomic, readonly, strong) BKYLayoutEngine * _Nonnull engine;
/**
  Convenience property for accessing \code
  self.engine.config
  \endcode
*/
@property (nonatomic, readonly, strong) BKYLayoutConfig * _Nonnull config;
/**
  The parent node of this layout. If this value is nil, this layout is the root node.
*/
@property (nonatomic, readonly, weak) BKYLayout * _Nullable parentLayout;
/**
  Layouts whose \code
  parentLayout
  \endcode is set to this layout
*/
@property (nonatomic, readonly, copy) NSSet<BKYLayout *> * _Nonnull childLayouts;
/**
  UIView frame for this layout relative to its parent <em>view</em> node’s layout. For example, the parent
  view node layout for a Field is a Block, while the parent view node for a Block is a Workspace.
*/
@property (nonatomic, readonly) CGRect viewFrame;
/**
  Initializes an empty Layout.
  \param engine The \code
  LayoutEngine
  \endcode to associate with this layout.

*/
- (nonnull instancetype)initWithEngine:(BKYLayoutEngine * _Nonnull)engine OBJC_DESIGNATED_INITIALIZER;
/**
  This method repositions its children and recalculates its \code
  contentSize
  \endcode based on the positions
  of its children.
  note:
  This method needs to be implemented by a subclass of \code
  Layout
  \endcode.
  \param includeChildren A flag indicating whether \code
  performLayout(:)
  \endcode should be called on any
  child layouts, prior to repositioning them. It is the responsibility of subclass implementations
  to honor this flag.

*/
- (void)performLayoutWithIncludeChildren:(BOOL)includeChildren;
/**
  For every \code
  Layout
  \endcode in its tree hierarchy (including itself), this method recalculates its
  \code
  contentSize
  \endcode, \code
  relativePosition
  \endcode, \code
  absolutePosition
  \endcode, and \code
  viewFrame
  \endcode, based on the current state
  of \code
  self.parentLayout
  \endcode.
*/
- (void)updateLayoutDownTree;
/**
  Performs the layout of its direct children (and not of its grandchildren) and repeats this for
  every parent up the tree. When the top is reached, the \code
  absolutePosition
  \endcode and \code
  viewFrame
  \endcode for
  each layout in the tree is re-calculated.
*/
- (void)updateLayoutUpTree;
/**
  Returns whether this layout is a descendant of a given layout.
  \param layout The layout to check.


  returns:
  \code
  true
  \endcode if the given \code
  layout
  \endcode is a grandparent of this layout. \code
  false
  \endcode otherwise.
*/
- (BOOL)isDescendantOf:(BKYLayout * _Nonnull)layout;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Abstract class that stores information on how to render and position a group of sequential
  \code
  Block
  \endcode objects (ie. those that are connecting via previous/next connections).
*/
SWIFT_CLASS_NAMED("BlockGroupLayout")
@interface BKYBlockGroupLayout : BKYLayout
/**
  A list of sequential block layouts that belong to this group. While this class doesn’t enforce
  it, the following should hold true:
  <ol>
    <li>
      When \code
      i < blockLayouts.count - 1
      \endcode:
    </li>
  </ol>
  \code
  blockLayouts[i].block.nextBlock = blockLayouts[i + 1].block
  \endcode
  <ol>
    <li>
      When \code
      i >= 1
      \endcode:
    </li>
  </ol>
  \code
  blockLayouts[i].block.previousBlock = blockLayouts[i - 1].block
  \endcode
*/
@property (nonatomic, readonly, copy) NSArray<BKYBlockLayout *> * _Nonnull blockLayouts;
/**
  Z-index of the layout
*/
@property (nonatomic) NSUInteger zIndex;
/**
  Flag indicating if this block group is being dragged
*/
@property (nonatomic) BOOL dragging;
/**
  The largest leading edge X offset for every \code
  BlockLayout
  \endcode in \code
  self.blockLayouts
  \endcode
*/
@property (nonatomic, readonly) CGFloat largestLeadingEdgeXOffset;
/**
  Appends all blockLayouts to \code
  self.blockLayouts
  \endcode and sets their \code
  parentLayout
  \endcode to this instance.
  \param blockLayouts The list of \code
  BlockLayout
  \endcode instances to append.

  \param updateLayout If true, all parent layouts of this layout will be updated.

*/
- (void)appendBlockLayouts:(NSArray<BKYBlockLayout *> * _Nonnull)blockLayouts updateLayout:(BOOL)updateLayout;
/**
  Removes \code
  self.blockLayouts[index]
  \endcode, sets its \code
  parentLayout
  \endcode to nil, and returns it.
  \param updateLayout If true, all parent layouts of this layout will be updated.


  returns:
  The \code
  BlockLayout
  \endcode that was removed.
*/
- (BKYBlockLayout * _Nonnull)removeBlockLayoutAtIndex:(NSInteger)index updateLayout:(BOOL)updateLayout;
/**
  Appends a given \code
  BlockLayout
  \endcode instance to \code
  self.blockLayouts
  \endcode and adopts it as a child.
  If \code
  blockLayout
  \endcode had a previous \code
  BlockGroupLayout
  \endcode parent, it is removed as a child from that
  parent. Additionally, any children that followed this \code
  blockLayout
  \endcode in its old parent are also
  removed and appended to \code
  self.blockLayouts
  \endcode.
  \param blockLayout The \code
  BlockLayout
  \endcode to adopt

  \param updateLayouts If true, all parent layouts of this layout and of \code
  blockLayout
  \endcode’s
  previous parent will be updated.

*/
- (void)claimWithFollowersWithBlockLayout:(BKYBlockLayout * _Nonnull)blockLayout updateLayouts:(BOOL)updateLayouts;
/**
  Removes a given block layout and all subsequent layouts from \code
  blockLayouts
  \endcode, and returns them in
  an array.
  \param blockLayout The given block layout to find and remove.

  \param updateLayout If true, all parent layouts of this layout will be updated.


  returns:
  The list of block layouts that were removed, starting from the given block layout. If
  the given block layout could not be found, it is still returned as a single-element list.
*/
- (NSArray<BKYBlockLayout *> * _Nonnull)removeAllBlockLayoutsWithStartingFrom:(BKYBlockLayout * _Nonnull)blockLayout updateLayout:(BOOL)updateLayout;
/**
  Removes all elements from \code
  self.blockLayouts
  \endcode and sets their \code
  parentLayout
  \endcode to nil.
  \param updateLayout If true, all parent layouts of this layout will be updated.

*/
- (void)resetWithUpdateLayout:(BOOL)updateLayout;
/**
  If this instance’s \code
  parentLayout
  \endcode is an instance of \code
  WorkspaceLayout
  \endcode, this method changes
  \code
  relativePosition
  \endcode to the position. If not, this method does nothing.
  \param position The relative position within its parent’s Workspace layout, specified
  as a Workspace coordinate system point.

  \param updateCanvasSize If true, recalculates the Workspace layout’s canvas size based on
  the current positions of its block groups.

*/
- (void)moveToWorkspacePosition:(BKYWorkspacePoint)position updateCanvasSize:(BOOL)updateCanvasSize;
- (nonnull instancetype)initWithEngine:(BKYLayoutEngine * _Nonnull)engine OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Protocol that a \code
  UIView
  \endcode must conform to in order to be inserted into a \code
  ZIndexedGroupView
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("ZIndexedView")
@protocol BKYZIndexedView
/**
  The z-index of the view. Views with higher z-index values will always appear above ones with
  lower values.
*/
@property (nonatomic, readonly) NSUInteger zIndex;
@end

@protocol BKYLayoutPopoverDelegate;

/**
  Abstract class for rendering a \code
  UIView
  \endcode backed by a \code
  Layout
  \endcode.
*/
SWIFT_CLASS_NAMED("LayoutView")
@interface BKYLayoutView : UIView
/**
  Layout object to render
*/
@property (nonatomic, strong) BKYLayout * _Nullable layout;
/**
  The delegate for handling popover requests that occur from this view
*/
@property (nonatomic, weak) id <BKYLayoutPopoverDelegate> _Nullable popoverDelegate;
/**
  Runs a code block, allowing it to be run immediately or via a preset animation.
  \param animated Flag determining if the \code
  code
  \endcode should be animated.

  \param code The code block to run.

*/
- (void)runAnimatableCode:(BOOL)animated code:(void (^ _Nonnull)(void))code;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIEvent;

/**
  View for rendering a \code
  BlockGroupLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("BlockGroupView")
@interface BKYBlockGroupView : BKYLayoutView <BKYZIndexedView>
/**
  The layout object to render
*/
@property (nonatomic, readonly, strong) BKYBlockGroupLayout * _Nullable blockGroupLayout;
/**
  The z-index of the block group view
*/
@property (nonatomic, readonly) NSUInteger zIndex;
/**
  Returns the furthest descendant of the receiver in the view hierarchy that contains a specified
  point. Unlike the default implementation, block group view will not return itself.
  \param point A point specified in the receiver’s local coordinate system (bounds).

  \param event The event that warranted a call to this method. If you are calling this method
  from outside your event-handling code, you may specify nil.


  returns:
  The view object that is the furthest descendent the current view and contains \code
  point
  \endcode.
*/
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
- (void)prepareForReuse;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class BKYInputLayout;
@class BKYMutatorLayout;
@class BKYFieldLayout;

/**
  Abstract class for storing information on how to render and position a \code
  Block
  \endcode on-screen.
*/
SWIFT_CLASS_NAMED("BlockLayout")
@interface BKYBlockLayout : BKYLayout
/**
  The \code
  Block
  \endcode to layout.
*/
@property (nonatomic, readonly, strong) BKYBlock * _Nonnull block;
/**
  The corresponding layout objects for \code
  self.block.inputs[]
  \endcode
*/
@property (nonatomic, readonly, copy) NSArray<BKYInputLayout *> * _Nonnull inputLayouts;
/**
  The corresponding layout object for \code
  self.block.mutator
  \endcode
*/
@property (nonatomic, strong) BKYMutatorLayout * _Nullable mutatorLayout;
/**
  A list of all \code
  FieldLayout
  \endcode objects belonging under this \code
  BlockLayout
  \endcode.
*/
@property (nonatomic, readonly, copy) NSArray<BKYFieldLayout *> * _Nonnull fieldLayouts;
/**
  The parent block group layout
*/
@property (nonatomic, readonly, strong) BKYBlockGroupLayout * _Nullable parentBlockGroupLayout;
/**
  The top most block group layout for this block
*/
@property (nonatomic, readonly, strong) BKYBlockGroupLayout * _Nullable rootBlockGroupLayout;
/**
  The first draggable \code
  BlockLayout
  \endcode up the layout tree.
  If there is no \code
  BlockLayout
  \endcode exists up the layout tree, this value is \code
  nil
  \endcode.
*/
@property (nonatomic, readonly, strong) BKYBlockLayout * _Nullable draggableBlockLayout;
/**
  Flag if this block should be highlighted
*/
@property (nonatomic) BOOL highlighted;
/**
  Flag indicating if this block should be visible
*/
@property (nonatomic) BOOL visible;
/**
  Flag determining if user interaction should be enabled for the corresponding view
*/
@property (nonatomic, readonly) BOOL userInteractionEnabled;
/**
  The position of the block’s leading edge X offset, specified as a Workspace coordinate
  system unit.
*/
@property (nonatomic, readonly) CGFloat leadingEdgeXOffset;
/**
  Flag indicating if this block has had its user interaction disabled.
*/
@property (nonatomic) BOOL disabled;
/**
  Flag indicating if input connectors should be drawn inside a block (\code
  true
  \endcode) or
  on the edge of the block (\code
  false
  \endcode).
*/
@property (nonatomic) BOOL inputsInline;
/**
  The comment text of the block.
*/
@property (nonatomic, copy) NSString * _Nonnull comment;
/**
  Initializes the block layout.
  \param block The given \code
  Block
  \endcode for this block layout.

  \param engine The \code
  LayoutEngine
  \endcode to associate with this layout.

*/
- (nonnull instancetype)initWithBlock:(BKYBlock * _Nonnull)block engine:(BKYLayoutEngine * _Nonnull)engine OBJC_DESIGNATED_INITIALIZER;
/**
  Appends an inputLayout to \code
  self.inputLayouts
  \endcode and sets its \code
  parentLayout
  \endcode to this instance.
  \param inputLayout The \code
  InputLayout
  \endcode to append.

*/
- (void)appendInputLayout:(BKYInputLayout * _Nonnull)inputLayout;
/**
  Removes \code
  self.inputLayouts[index]
  \endcode, sets its \code
  parentLayout
  \endcode to nil, and returns it.
  \param index The index to remove from \code
  inputLayouts
  \endcode.


  returns:
  The \code
  BlockLayout
  \endcode that was removed.
*/
- (BKYInputLayout * _Nonnull)removeInputLayoutAtIndex:(NSInteger)index;
/**
  Clears \code
  self.inputLayouts
  \endcode and \code
  self.mutatorLayout
  \endcode, and sets their \code
  parentLayout
  \endcode to nil.
  \param updateLayout If true, all parent layouts of this layout will be updated.

*/
- (void)resetWithUpdateLayout:(BOOL)updateLayout;
- (nonnull instancetype)initWithEngine:(BKYLayoutEngine * _Nonnull)engine SWIFT_UNAVAILABLE;
@end


/**
  Delegate for highlight events that occur on a \code
  Connection
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("ConnectionHighlightDelegate")
@protocol BKYConnectionHighlightDelegate
/**
  Event that is called when the highlighted value has changed for a given connection.
  \param connection The connection whose \code
  highlighted
  \endcode value has changed.

*/
- (void)didChangeHighlightForConnection:(BKYConnection * _Nonnull)connection;
@end


@interface BKYBlockLayout (SWIFT_EXTENSION(Blockly)) <BKYConnectionHighlightDelegate>
- (void)didChangeHighlightForConnection:(BKYConnection * _Nonnull)connection;
@end


/**
  Protocol for events that occur on a \code
  Block
  \endcode instance.
*/
SWIFT_PROTOCOL_NAMED("BlockListener")
@protocol BKYBlockListener
/**
  Event that is fired when one of a block’s properties has changed.
  \param block The \code
  Block
  \endcode that changed.

*/
- (void)didUpdateBlock:(BKYBlock * _Nonnull)block;
@end


@interface BKYBlockLayout (SWIFT_EXTENSION(Blockly)) <BKYBlockListener>
- (void)didUpdateBlock:(BKYBlock * _Nonnull)block;
@end



/**
  Abstract view for rendering a \code
  BlockLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("BlockView")
@interface BKYBlockView : BKYLayoutView
/**
  Layout object to render
*/
@property (nonatomic, readonly, strong) BKYBlockLayout * _Nullable blockLayout;
/**
  Default initializer for block views.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/**
  General error class for all Blockly errors.
*/
SWIFT_CLASS_NAMED("BlocklyError")
@interface BKYBlocklyError : NSError
/**
  Domain to use when throwing an error from this class
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Domain;)
+ (NSString * _Nonnull)Domain;
/**
  :nodoc:
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary * _Nullable)dict SWIFT_UNAVAILABLE;
@end

/**
  Signifies the type of error to be thrown by \code
  BlocklyError
  \endcode.
*/
typedef SWIFT_ENUM_NAMED(NSInteger, BKYBlocklyErrorCode, "Code") {
  BKYBlocklyErrorCodeInvalidBlockDefinition = 100,
  BKYBlocklyErrorCodeWorkspaceExceedsCapacity = 150,
  BKYBlocklyErrorCodeLayoutNotFound = 200,
  BKYBlocklyErrorCodeConnectionManagerError = 210,
  BKYBlocklyErrorCodeConnectionInvalid = 211,
  BKYBlocklyErrorCodeViewNotFound = 300,
  BKYBlocklyErrorCodeJsonParsing = 400,
  BKYBlocklyErrorCodeJsonInvalidTypecast = 401,
  BKYBlocklyErrorCodeJsonInvalidArgument = 402,
  BKYBlocklyErrorCodeJsonSerialization = 403,
  BKYBlocklyErrorCodeJsonDataMissing = 404,
  BKYBlocklyErrorCodeXmlParsing = 500,
  BKYBlocklyErrorCodeXmlUnknownBlock = 501,
  BKYBlocklyErrorCodeFileNotFound = 600,
  BKYBlocklyErrorCodeFileNotReadable = 601,
  BKYBlocklyErrorCodeIllegalState = 700,
  BKYBlocklyErrorCodeIllegalArgument = 701,
  BKYBlocklyErrorCodeIllegalOperation = 702,
};


/**
  Base class for all Blockly events.
*/
SWIFT_CLASS_NAMED("BlocklyEvent")
@interface BKYEvent : NSObject
/**
  The type of this event.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/**
  The ID for the workspace that triggered this event.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull workspaceID;
/**
  The ID for the group of related events.
*/
@property (nonatomic, copy) NSString * _Nullable groupID;
/**
  The ID of the primary or root affected block.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable blockID;
/**
  Creates a \code
  BlocklyEvent
  \endcode.
  \param type The \code
  EventType
  \endcode.

  \param workspaceID The ID string of the Blockly workspace.

  \param groupID The ID string of the event group. Usually \code
  nil
  \endcode for local events (assigned
  later) and non-\code
  nil
  \endcode for remote events.

  \param blockID The ID string of the block affected. \code
  nil
  \endcode for a few event types
  (e.g. toolbox category).

*/
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type workspaceID:(NSString * _Nonnull)workspaceID groupID:(NSString * _Nullable)groupID blockID:(NSString * _Nullable)blockID OBJC_DESIGNATED_INITIALIZER;
/**
  Constructs a \code
  BlocklyEvent
  \endcode with base attributes assigned from JSON.
  \param type The type of the event.

  \param json The JSON object with event attribute values.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if \code
  BlocklyEvent.JSON_WORKSPACE_ID
  \endcode is not specified as a key within the
  given \code
  json
  \endcode.
*/
- (nullable instancetype)initWithType:(NSString * _Nonnull)type json:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/**
  Returns a JSON dictionary serialization of the event.

  throws:

  \code
  BlocklyError
  \endcode: Thrown if the event could not be serialized.

  returns:
  A JSON dictionary serialization of the event.
*/
- (NSDictionary<NSString *, id> * _Nullable)toJSONAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  Calls \code
  self.toJSON()
  \endcode and returns a string representation of that JSON dictionary.

  throws:

  \code
  BlocklyError
  \endcode: Thrown if the event could not be serialized.

  returns:
  A JSON string representation of the event.
*/
- (NSString * _Nullable)toJSONStringAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  This method indicates if this event can be discarded so it doesn’t get fired. An example of when
  this might be true is for a \code
  BlocklyEvent.Change
  \endcode where no change is recorded between old and
  new values.
  The default implementation of this method returns \code
  false
  \endcode. Subclasses may override this method
  to specify individual behavior of when the event can be discarded, based on its current state.

  returns:
  \code
  true
  \endcode if this event can be discarded, or \code
  false
  \endcode otherwise.
*/
- (BOOL)isDiscardable;
/**
  Attempts to merge this event with the next chronological event that was fired, and returns the
  result. If the events are incompatible and cannot be merged, \code
  nil
  \endcode is returned.
  The default implementation of this method returns \code
  nil
  \endcode. Subclasses may override this method
  to specify individual merge behavior with other events.
  \param event The next chronological event that was fired after this event.


  returns:
  If the events are compatible, this returns a new \code
  BlocklyEvent
  \endcode that is the result
  of merging the two events together. Otherwise, \code
  nil
  \endcode is returned.
*/
- (BKYEvent * _Nullable)mergedWithNextChronologicalEvent:(BKYEvent * _Nonnull)event;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface BKYEvent (SWIFT_EXTENSION(Blockly))
@end

enum BKYEventUIElement : NSInteger;
@class BKYWorkspace;

/**
  Event class for user interface related actions, including selecting blocks, opening/closing
  the toolbox or trash, and changing toolbox categories.
*/
SWIFT_CLASS_NAMED("UI")
@interface BKYEventUI : BKYEvent
/**
  The event type for \code
  BlocklyEvent.UI
  \endcode objects.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EVENT_TYPE;)
+ (NSString * _Nonnull)EVENT_TYPE;
/**
  The element associated with the UI event.
*/
@property (nonatomic, readonly) enum BKYEventUIElement element;
/**
  The old value of the element.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable oldValue;
/**
  The new value of the element.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable newValue;
/**
  Constructs a block related UI event, such as clicked, selected, comment opened, mutator
  opened, or warning opened.
  \param element The UI element that changed.

  \param workspace The workspace containing the changed element.

  \param block The related block. \code
  nil
  \endcode for toolbox category events.

  \param oldValue [Optional] The value before the event. Booleans are mapped to \code
  true
  \endcode and
  \code
  false
  \endcode. Defaults to \code
  nil
  \endcode.

  \param newValue [Optional] The value after the event. Booleans are mapped to \code
  true
  \endcode and
  \code
  false
  \endcode. Defaults to \code
  nil
  \endcode.

*/
- (nonnull instancetype)initWithElement:(enum BKYEventUIElement)element workspace:(BKYWorkspace * _Nonnull)workspace block:(BKYBlock * _Nullable)block oldValue:(NSString * _Nullable)oldValue newValue:(NSString * _Nullable)newValue OBJC_DESIGNATED_INITIALIZER;
/**
  Constructs a \code
  BlocklyEvent.UI
  \endcode from the JSON serialized representation.
  \param json The serialized JSON representation of \code
  BlocklyEvent.UI
  \endcode.


  throws:

  \code
  BlocklyError
  \endcode: Thrown when the JSON could not be parsed into a \code
  BlocklyEvent.UI
  \endcode object.
*/
- (nullable instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/**
  Creates a \code
  BlocklyEvent.UI
  \endcode reflecting when a block has been clicked, inside a given workspace.
  \param workspace The workspace containing the block.

  \param block The block that was clicked.


  returns:
  The new \code
  BlocklyEvent.UI
  \endcode.
*/
+ (BKYEventUI * _Nonnull)blockClickedEventWithWorkspace:(BKYWorkspace * _Nonnull)workspace block:(BKYBlock * _Nonnull)block;
/**
  Creates a \code
  BlocklyEvent.UI
  \endcode reflecting the change of a block’s selected state, inside a given
  workspace.
  \param workspace The workspace containing the block.

  \param block The block that was selected.

  \param selectedBefore \code
  true
  \endcode if the block was previously selected. \code
  false
  \endcode otherwise.

  \param selectedAfter \code
  true
  \endcode if the block is currently selected. \code
  false
  \endcode otherwise.


  returns:
  The new \code
  BlocklyEvent.UI
  \endcode.
*/
+ (BKYEventUI * _Nonnull)blockSelectedEventWithWorkspace:(BKYWorkspace * _Nonnull)workspace block:(BKYBlock * _Nonnull)block selectedBefore:(BOOL)selectedBefore selectedAfter:(BOOL)selectedAfter;
/**
  Creates a \code
  BlocklyEvent.UI
  \endcode reflecting the change of a block’s warning message visibility,
  inside a given workspace.
  \param workspace The workspace containing the block.

  \param block The target block.

  \param openedBefore \code
  true
  \endcode if the block’s warning was previously visible. \code
  false
  \endcode
  otherwise.

  \param openedAfter \code
  true
  \endcode if the block’s warning is currently visible. \code
  false
  \endcode otherwise.


  returns:
  The new \code
  BlocklyEvent.UI
  \endcode.
*/
+ (BKYEventUI * _Nonnull)blockWarningEventWithWorkspace:(BKYWorkspace * _Nonnull)workspace block:(BKYBlock * _Nonnull)block openedBefore:(BOOL)openedBefore openedAfter:(BOOL)openedAfter;
/**
  Creates a \code
  BlocklyEvent.UI
  \endcode reflecting the change of a block comment’s visibility, inside
  a given workspace.
  \param workspace The workspace containing the block.

  \param block The target block.

  \param openedBefore \code
  true
  \endcode if the block’s comment was previously visible. \code
  false
  \endcode
  otherwise.

  \param openedAfter \code
  true
  \endcode if the block’s comment is currently visible. \code
  false
  \endcode otherwise.


  returns:
  The new \code
  BlocklyEvent.UI
  \endcode.
*/
+ (BKYEventUI * _Nonnull)commentEventWithWorkspace:(BKYWorkspace * _Nonnull)workspace block:(BKYBlock * _Nonnull)block openedBefore:(BOOL)openedBefore openedAfter:(BOOL)openedAfter;
/**
  Creates a \code
  BlocklyEvent.UI
  \endcode reflecting the change of a block’s mutator popover’s visibility,
  inside a given workspace.
  \param workspace The workspace containing the block.

  \param block The target block.

  \param openedBefore \code
  true
  \endcode if the block’s mutator popover was previously visible. \code
  false
  \endcode
  otherwise.

  \param openedAfter \code
  true
  \endcode if the block’s mutator popover is currently visible. \code
  false
  \endcode
  otherwise.


  returns:
  The new \code
  BlocklyEvent.UI
  \endcode.
*/
+ (BKYEventUI * _Nonnull)mutatorPopoverEventWithWorkspace:(BKYWorkspace * _Nonnull)workspace block:(BKYBlock * _Nonnull)block openedBefore:(BOOL)openedBefore openedAfter:(BOOL)openedAfter;
/**
  Creates a \code
  BlocklyEvent.UI
  \endcode reflecting the currently open toolbox category.
  \param workspace The workspace of the toolbox category.

  \param oldValue The previous category that was open, or \code
  nil
  \endcode if no category was open.

  \param newValue The current category that is open, or \code
  nil
  \endcode if no category is open.


  returns:
  The new \code
  BlocklyEvent.UI
  \endcode.
*/
+ (BKYEventUI * _Nonnull)toolboxCategoryEventWithWorkspace:(BKYWorkspace * _Nonnull)workspace oldValue:(NSString * _Nullable)oldValue newValue:(NSString * _Nullable)newValue;
- (NSDictionary<NSString *, id> * _Nullable)toJSONAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type workspaceID:(NSString * _Nonnull)workspaceID groupID:(NSString * _Nullable)groupID blockID:(NSString * _Nullable)blockID SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithType:(NSString * _Nonnull)type json:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end

/**
  Possible elements that can be associated with a \code
  BlocklyEvent.UI
  \endcode.
*/
typedef SWIFT_ENUM_NAMED(NSInteger, BKYEventUIElement, "Element") {
  BKYEventUIElementCategory = 1,
  BKYEventUIElementClick = 2,
  BKYEventUIElementCommentOpen = 3,
  BKYEventUIElementMutatorOpen = 4,
  BKYEventUIElementSelected = 5,
  BKYEventUIElementTrashOpen = 6,
  BKYEventUIElementWarningOpen = 7,
};


@interface BKYEvent (SWIFT_EXTENSION(Blockly))
@end


/**
  Event fired when a block is added to the workspace, possibly containing other child blocks
  and next blocks.
*/
SWIFT_CLASS_NAMED("Create")
@interface BKYEventCreate : BKYEvent
/**
  The event type for \code
  BlocklyEvent.Create
  \endcode objects.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EVENT_TYPE;)
+ (NSString * _Nonnull)EVENT_TYPE;
/**
  The XML serialization of all blocks created by this event.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull xml;
/**
  The list of block ids for all blocks created by this event.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull blockIDs;
/**
  Constructs a \code
  BlocklyEvent.Create
  \endcode for the given block.
  \param workspace The workspace containing the new block.

  \param block The newly created block.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if the given block tree could not be serialized into xml.
*/
- (nullable instancetype)initWithWorkspace:(BKYWorkspace * _Nonnull)workspace block:(BKYBlock * _Nonnull)block error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/**
  Constructs a \code
  BlocklyEvent.Create
  \endcode from the JSON serialized representation.
  \param json The serialized JSON representation of \code
  BlocklyEvent.Create
  \endcode.


  throws:

  \code
  BlocklyError
  \endcode: Thrown when the JSON could not be parsed into a \code
  BlocklyEvent.Create
  \endcode object.
*/
- (nullable instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, id> * _Nullable)toJSONAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type workspaceID:(NSString * _Nonnull)workspaceID groupID:(NSString * _Nullable)groupID blockID:(NSString * _Nullable)blockID SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithType:(NSString * _Nonnull)type json:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


@interface BKYEvent (SWIFT_EXTENSION(Blockly))
@end

enum BKYEventChangeElement : NSInteger;

/**
  Event fired when a property of a block changes.
*/
SWIFT_CLASS_NAMED("Change")
@interface BKYEventChange : BKYEvent
/**
  The event type for \code
  BlocklyEvent.Change
  \endcode objects.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EVENT_TYPE;)
+ (NSString * _Nonnull)EVENT_TYPE;
/**
  The element associated with the change event.
*/
@property (nonatomic, readonly) enum BKYEventChangeElement element;
/**
  The field name affected by this change event.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable fieldName;
/**
  The old value of the element.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable oldValue;
/**
  The new value of the element.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable newValue;
/**
  Convenience property for evaluating \code
  self.oldValue == "true"
  \endcode
*/
@property (nonatomic, readonly) BOOL oldBoolValue;
/**
  Convenience property for evaluating \code
  self.newValue == "true"
  \endcode
*/
@property (nonatomic, readonly) BOOL newBoolValue;
/**
  Constructs a \code
  BlocklyEvent.Change
  \endcode, signifying block’s value changed.
  \param workspaceID The workspace ID containing the change.

  \param blockID The ID string of the block affected.

  \param field [Optional] The field containing the change, if the change is a field value.
  Defaults to \code
  nil
  \endcode.

  \param oldValue [Optional] The original value. Defaults to \code
  nil
  \endcode.

  \param newValue [Optional] The new value. Defaults to \code
  nil
  \endcode.

*/
- (nonnull instancetype)initWithElement:(enum BKYEventChangeElement)element workspaceID:(NSString * _Nonnull)workspaceID blockID:(NSString * _Nonnull)blockID fieldName:(NSString * _Nullable)fieldName oldValue:(NSString * _Nullable)oldValue newValue:(NSString * _Nullable)newValue OBJC_DESIGNATED_INITIALIZER;
/**
  Constructs a \code
  BlocklyEvent.Change
  \endcode from the JSON serialized representation.
  \param json The serialized JSON representation of \code
  BlocklyEvent.Change
  \endcode.


  throws:

  \code
  BlocklyError
  \endcode: Thrown when the JSON could not be parsed into a \code
  BlocklyEvent.Change
  \endcode object.
*/
- (nullable instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/**
  Creates a \code
  BlocklyEvent.Change
  \endcode reflecting a change in the block’s comment text.
  \param workspace The workspace containing the block.

  \param block The block where the state changed.

  \param oldValue The prior comment text.

  \param newValue The updated comment text.


  returns:
  The new \code
  BlocklyEvent.Change
  \endcode.
*/
+ (BKYEventChange * _Nonnull)commentTextEventWithWorkspace:(BKYWorkspace * _Nonnull)workspace block:(BKYBlock * _Nonnull)block oldValue:(NSString * _Nonnull)oldValue newValue:(NSString * _Nonnull)newValue;
/**
  Creates a \code
  BlocklyEvent.Change
  \endcode reflecting a change in the block’s disabled state.
  \param workspace The workspace containing the block.

  \param block The block where the state changed.


  returns:
  The new \code
  BlocklyEvent.Change
  \endcode.
*/
+ (BKYEventChange * _Nonnull)disabledStateEventWithWorkspace:(BKYWorkspace * _Nonnull)workspace block:(BKYBlock * _Nonnull)block;
/**
  Creates a \code
  BlocklyEvent.Change
  \endcode reflecting a change in a field’s value.
  \param workspace The workspace containing the block.

  \param block The block where the state changed.

  \param field The field with the changed value.

  \param oldValue The prior value.

  \param newValue The updated value.


  returns:
  The new \code
  BlocklyEvent.Change
  \endcode.
*/
+ (BKYEventChange * _Nonnull)fieldValueEventWithWorkspace:(BKYWorkspace * _Nonnull)workspace block:(BKYBlock * _Nonnull)block field:(BKYField * _Nonnull)field oldValue:(NSString * _Nonnull)oldValue newValue:(NSString * _Nonnull)newValue;
/**
  Creates a \code
  BlocklyEvent.Change
  \endcode reflecting a change in the block’s inlined inputs state.
  \param workspace The workspace containing the block .

  \param block The block where the state changed .


  returns:
  The new \code
  BlocklyEvent.Change
  \endcode.
*/
+ (BKYEventChange * _Nonnull)inlineStateEventWithWorkspace:(BKYWorkspace * _Nonnull)workspace block:(BKYBlock * _Nonnull)block;
/**
  Creates a \code
  BlocklyEvent.Change
  \endcode reflecting a change in the block’s mutation state.
  \param workspace The workspace containing the block .

  \param block The block where the state changed .

  \param oldValue The serialized version of the prior mutation state .

  \param newValue The serialized version of the updated mutation state .


  returns:
  The new \code
  BlocklyEvent.Change
  \endcode.
*/
+ (BKYEventChange * _Nonnull)mutateEventWithWorkspace:(BKYWorkspace * _Nonnull)workspace block:(BKYBlock * _Nonnull)block oldValue:(NSString * _Nullable)oldValue newValue:(NSString * _Nullable)newValue;
- (NSDictionary<NSString *, id> * _Nullable)toJSONAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BKYEvent * _Nullable)mergedWithNextChronologicalEvent:(BKYEvent * _Nonnull)event;
- (BOOL)isDiscardable;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type workspaceID:(NSString * _Nonnull)workspaceID groupID:(NSString * _Nullable)groupID blockID:(NSString * _Nullable)blockID SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithType:(NSString * _Nonnull)type json:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end

/**
  Possible elements that can be associated with a \code
  BlocklyEvent.Change
  \endcode.
*/
typedef SWIFT_ENUM_NAMED(NSInteger, BKYEventChangeElement, "Element") {
  BKYEventChangeElementCollapsed = 1,
  BKYEventChangeElementComment = 2,
  BKYEventChangeElementDisabled = 3,
  BKYEventChangeElementField = 4,
  BKYEventChangeElementInline = 5,
  BKYEventChangeElementMutate = 6,
};


@interface BKYEvent (SWIFT_EXTENSION(Blockly))
@end


/**
  Event fired when a block is removed from the workspace.
*/
SWIFT_CLASS_NAMED("Delete")
@interface BKYEventDelete : BKYEvent
/**
  The event type for \code
  BlocklyEvent.Delete
  \endcode objects.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EVENT_TYPE;)
+ (NSString * _Nonnull)EVENT_TYPE;
/**
  The XML serialization of all blocks deleted by this event.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull oldXML;
/**
  The list of all block ids for all blocks deleted by this event.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull blockIDs;
/**
  Constructs a \code
  BlocklyEvent.Delete
  \endcode, signifying the removal of a block from the workspace.
  \param workspace The workspace containing the deletion.

  \param block The deleted block (or to-be-deleted block), with all children attached.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if the given block tree could not be serialized into xml.
*/
- (nullable instancetype)initWithWorkspace:(BKYWorkspace * _Nonnull)workspace block:(BKYBlock * _Nonnull)block error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/**
  Constructs a \code
  BlocklyEvent.Delete
  \endcode from the JSON serialized representation.
  \param json The serialized JSON representation of \code
  BlocklyEvent.Delete
  \endcode.


  throws:

  \code
  BlocklyError
  \endcode: Thrown when the JSON could not be parsed into a \code
  BlocklyEvent.Delete
  \endcode object.
*/
- (nullable instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, id> * _Nullable)toJSONAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type workspaceID:(NSString * _Nonnull)workspaceID groupID:(NSString * _Nullable)groupID blockID:(NSString * _Nullable)blockID SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithType:(NSString * _Nonnull)type json:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


@interface BKYEvent (SWIFT_EXTENSION(Blockly))
@end


/**
  Event fired when a block is moved on the workspace, or its parent connection is changed.
  This event must be created before the block is moved to capture the original position.
  After the move has been completed in the workspace, capture the updated position or parent
  using \code
  recordNew(forBlock:)
  \endcode.
*/
SWIFT_CLASS_NAMED("Move")
@interface BKYEventMove : BKYEvent
/**
  The event type for \code
  BlocklyEvent.Move
  \endcode objects.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EVENT_TYPE;)
+ (NSString * _Nonnull)EVENT_TYPE;
/**
  The previous parent block ID of the target block. If \code
  nil
  \endcode, it indicates the target block
  was not previously connected to a parent.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable oldParentID;
/**
  If \code
  oldParentID
  \endcode is not \code
  nil
  \endcode, this is the input name of the previous parent block that the
  target block was connected to.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable oldInputName;
/**
  The new parent block ID of the target block. If \code
  nil
  \endcode, it indicates the target block is
  not connected to a parent.
*/
@property (nonatomic, copy) NSString * _Nullable newParentID;
/**
  If \code
  newParentID
  \endcode is not \code
  nil
  \endcode, this is the input name of the parent block that the target
  block is connected to.
*/
@property (nonatomic, copy) NSString * _Nullable newInputName;
/**
  Constructs a \code
  BlocklyEvent.Move
  \endcode from the JSON serialized representation.
  \param json The serialized JSON representation of \code
  BlocklyEvent.Move
  \endcode.


  throws:

  \code
  BlocklyError
  \endcode: Thrown when the JSON could not be parsed into a \code
  BlocklyEvent.Move
  \endcode object.
*/
- (nullable instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, id> * _Nullable)toJSONAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BKYEvent * _Nullable)mergedWithNextChronologicalEvent:(BKYEvent * _Nonnull)event;
- (BOOL)isDiscardable;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type workspaceID:(NSString * _Nonnull)workspaceID groupID:(NSString * _Nullable)groupID blockID:(NSString * _Nullable)blockID SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithType:(NSString * _Nonnull)type json:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/**
  Subclass of \code
  BlocklyEvent.Move
  \endcode that makes it easier to track new values for a block as it moves
  throughout the workspace.
*/
SWIFT_CLASS_NAMED("BlockMove")
@interface BKYEventBlockMove : BKYEventMove
/**
  Constructs a \code
  BlocklyEvent.Move
  \endcode signifying the movement of a block on the workspace. The
  current positional values of the block are recorded as the “old” values for the event.
  \param workspace The workspace containing the moved blocks.

  \param block The root block, while it is still in its original position.

*/
- (nonnull instancetype)initWithWorkspace:(BKYWorkspace * _Nonnull)workspace block:(BKYBlock * _Nonnull)block OBJC_DESIGNATED_INITIALIZER;
/**
  Updates the event’s “new” values to capture the current state of the block.
  \param block The \code
  Block
  \endcode.

*/
- (void)recordNewValues;
- (nullable instancetype)initWithJson:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/**
  Factory for creating \code
  BlocklyEvent
  \endcode objects from JSON data.
  This class is designed as a singleton instance, accessible via
  \code
  BlocklyEventFactory.sharedInstance
  \endcode.
*/
SWIFT_CLASS_NAMED("BlocklyEventFactory")
@interface BKYEventFactory : NSObject
/**
  Shared instance.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BKYEventFactory * _Nonnull sharedInstance;)
+ (BKYEventFactory * _Nonnull)sharedInstance;
/**
  A singleton instance for this class is accessible via \code
  BlocklyEventFactory.sharedInstance.
  \endcode
*/
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Unregisters the creation closure for a given event type.
  \param eventType The \code
  BlocklyEvent.EventType
  \endcode

*/
- (void)unregisterCreatorForEventType:(NSString * _Nonnull)eventType;
/**
  Returns a new \code
  BlocklyEvent
  \endcode using given JSON data. The \code
  BlocklyEvent
  \endcode itself is created by
  finding the \code
  BlocklyEvent.EventType
  \endcode that is associated with \code
  json[BlocklyEvent.JSON_TYPE]
  \endcode and
  executing the registered creation closure for that event type.
  \param json The JSON data.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if no registered creation closure could be found for the key or if the
  \code
  BlocklyEvent
  \endcode could not be created for the JSON data.

  returns:
  A new \code
  BlocklyEvent
  \endcode instance.
*/
- (BKYEvent * _Nullable)makeBlocklyEventFromJSON:(NSDictionary<NSString *, id> * _Nonnull)json error:(NSError * _Nullable * _Nullable)error;
@end

@protocol BKYBlocklyPanGestureRecognizerDelegate;
@class UITouch;

/**
  The blockly gesture recognizer, which detects pan gestures on blocks in the workspace.
*/
SWIFT_CLASS_NAMED("BlocklyPanGestureRecognizer")
@interface BKYBlocklyPanGestureRecognizer : UIGestureRecognizer
/**
  Maximum number of touches handled by the recognizer
*/
@property (nonatomic) NSInteger maximumTouches;
/**
  The minimum distance for the gesture recognizer to count as a pan, in the UIView coordinate
  system.
*/
@property (nonatomic) float minimumPanDistance;
/**
  The delegate this gestureRecognizer operates on (\code
  WorkbenchViewController
  \endcode by default).
*/
@property (nonatomic, weak) id <BKYBlocklyPanGestureRecognizerDelegate> _Nullable targetDelegate;
/**
  Initializer for the BlocklyPanGestureRecognizer
  \param targetDelegate The object that listens to the gesture recognizer callbacks

*/
- (nonnull instancetype)initWithTargetDelegate:(id <BKYBlocklyPanGestureRecognizerDelegate> _Nullable)targetDelegate OBJC_DESIGNATED_INITIALIZER;
/**
  Called when touches begin on the workspace.
*/
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
/**
  Called when touches are moved on the workspace.
*/
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
/**
  Called when touches end on a workspace.
*/
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
/**
  Called when touches are cancelled on a workspace.
*/
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
/**
  Called when the gesture recognizer terminates (ended, cancelled, or failed.) Cleans up internal
  references.
*/
- (void)reset;
/**
  Manually cancels the touches of the gesture recognizer.
*/
- (void)cancelAllTouches;
/**
  Calculates the delta of the first touch in a given view.
  \param view The view to calculate the location of the touch position.


  returns:
  The difference between the current position and the previous position.
*/
- (CGPoint)firstTouchDeltaInView:(UIView * _Nullable)view;
/**
  Updates the block at the given index, when the \code
  BlockView
  \endcode has changed (typically when it is
  copied to a new workspace.)
  \param block The old \code
  BlockView
  \endcode to be tracked.

  \param newBlock The new \code
  BlockView
  \endcode to be tracked.

*/
- (void)replaceBlock:(BKYBlockView * _Nonnull)block with:(BKYBlockView * _Nonnull)newBlock;
/**
  Checks if any touch handled by the gesture recognizer is inside a given view.
  \param view The \code
  UIView
  \endcode to be checked against.

*/
- (BOOL)isTouchingView:(UIView * _Nonnull)view;
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
@end

/**
  The states of the individual touches in the \code
  BlocklyPanGestureRecognizer
  \endcode
*/
typedef SWIFT_ENUM_NAMED(NSInteger, BKYBlocklyPanGestureRecognizerTouchState, "TouchState") {
  BKYBlocklyPanGestureRecognizerTouchStateBegan = 0,
  BKYBlocklyPanGestureRecognizerTouchStateChanged = 1,
  BKYBlocklyPanGestureRecognizerTouchStateEnded = 2,
};


/**
  The delegate protocol for \code
  BlocklyPanGestureRecognizer
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("BlocklyPanGestureRecognizerDelegate")
@protocol BKYBlocklyPanGestureRecognizerDelegate
/**
  The callback that’s called when the \code
  BlocklyPanGestureRecognizer
  \endcode detects a valid block pan.
  Note: This function returns a \code
  BlockView
  \endcode, in case this function changes the view that’s passed
  in, typically copying the view onto a new workspace.
  \param gesture The gesture calling this function.

  \param block The \code
  BlockView
  \endcode being touched.

  \param touch The \code
  UITouch
  \endcode hitting the block.

  \param touchState The \code
  BlocklyPanGestureRecognizer.TouchState
  \endcode for this individual touch.

*/
- (void)blocklyPanGestureRecognizer:(BKYBlocklyPanGestureRecognizer * _Nonnull)gesture didTouchBlock:(BKYBlockView * _Nonnull)block touch:(UITouch * _Nonnull)touch touchState:(enum BKYBlocklyPanGestureRecognizerTouchState)touchState;
@end

enum BKYCodeGeneratorState : NSInteger;

/**
  Helper for generating code from a workspace.
  This object is essentially a wrapper of a non-UI web version of Blockly, which generates workspace
  code via JavaScript. For more information on how this works, see:
  https://developers.google.com/blockly/installation/code-generators
  note:

  <ul>
    <li>
      This object must be instantiated on the main thread, as it internally instantiates a
      \code
      WKWebView
      \endcode object (which has to be done on the main thread).
    </li>
    <li>
      This object is not thread-safe.
    </li>
    <li>
      Users should not use this class directly and instead should use \code
      CodeGeneratorService
      \endcode, which
      handles these problems.
    </li>
  </ul>
*/
SWIFT_CLASS_NAMED("CodeGenerator")
@interface BKYCodeGenerator : NSObject
/**
  The name of the JS object that generates code (e.g. ‘Blockly.Python’)
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull jsGeneratorObject;
/**
  The current state of the code generator
*/
@property (nonatomic, readonly) enum BKYCodeGeneratorState state;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/**
  Possible states for the code generator
*/
typedef SWIFT_ENUM_NAMED(NSInteger, BKYCodeGeneratorState, "State") {
  BKYCodeGeneratorStateInitialized = 0,
  BKYCodeGeneratorStateLoading = 1,
  BKYCodeGeneratorStateReadyForUse = 2,
  BKYCodeGeneratorStateUnusable = 3,
  BKYCodeGeneratorStateGeneratingCode = 4,
};


@interface BKYCodeGenerator (SWIFT_EXTENSION(Blockly))
@end

@class WKWebView;
@class WKNavigation;

@interface BKYCodeGenerator (SWIFT_EXTENSION(Blockly)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
- (void)webView:(WKWebView * _Nonnull)webView didFailNavigation:(WKNavigation * _Null_unspecified)navigation withError:(NSError * _Nonnull)error;
@end

@class BKYCodeGeneratorServiceRequestBuilder;

/**
  Service for generating code from a workspace.
  For details on how to use this class, see:
  https://developers.google.com/blockly/guides/configure/ios/code-generators
*/
SWIFT_CLASS_NAMED("CodeGeneratorService")
@interface BKYCodeGeneratorService : NSObject
/**
  Creates a code generator service.
  \param jsCoreDependencies Paths to core Blockly JS dependencies, relative to the main
  resource bundle. These core dependencies will be used when an internal \code
  CodeGenerator
  \endcode
  instance is created. This list must contain the following files:
  <ul>
    <li>
      Blockly engine (eg. ‘blockly_compressed.js’)
    </li>
    <li>
      A default list of messages (eg. ‘msg/js/en.js’)
    </li>
  </ul>

*/
- (nonnull instancetype)initWithJsCoreDependencies:(NSArray<NSString *> * _Nonnull)jsCoreDependencies;
/**
  Creates a code generator service.
  \param jsCoreDependencies Paths to core Blockly JS dependencies, relative to a given
  resource \code
  bundle
  \endcode. These core dependencies will be used when an internal \code
  CodeGenerator
  \endcode
  instance is created. This list must contain the following files:
  <ul>
    <li>
      Blockly engine (eg. ‘blockly_compressed.js’)
    </li>
    <li>
      A default list of messages (eg. ‘msg/js/en.js’)
    </li>
  </ul>

  \param bundle The resource bundle containing \code
  jsCoreDependencies
  \endcode.

*/
- (nonnull instancetype)initWithJsCoreDependencies:(NSArray<NSString *> * _Nonnull)jsCoreDependencies bundle:(NSBundle * _Nonnull)bundle OBJC_DESIGNATED_INITIALIZER;
/**
  Sets the code generator service request builder to be used for code generation.
  \param builder The \code
  CodeGeneratorServiceRequestBuilder
  \endcode that specifies generators.

  \param shouldCache \code
  true
  \endcode if the Blockly files should be preloaded, \code
  false
  \endcode if not.

*/
- (void)setRequestBuilder:(BKYCodeGeneratorServiceRequestBuilder * _Nonnull)builder shouldCache:(BOOL)shouldCache;
/**
  Begins code generation for a workspace.
  note:
  \code
  setRequestBuilder(:shouldCache:)
  \endcode must be called prior to calling this method.
  \param workspace The workspace to generate code for.

  \param onCompletion The \code
  CompletionClosure
  \endcode to be called when the code is generated.

  \param onError The \code
  ErrorClosure
  \endcode to be called if the code fails to generate.


  throws:

  \code
  BlocklyError
  \endcode: Occurs if no request builder has not been set prior to calling this method.
*/
- (NSString * _Nullable)generateCodeForWorkspace:(BKYWorkspace * _Nonnull)workspace error:(NSError * _Nullable * _Nullable)error onCompletion:(void (^ _Nullable)(NSString * _Nonnull, NSString * _Nonnull))onCompletion onError:(void (^ _Nullable)(NSString * _Nonnull, NSString * _Nonnull))onError;
/**
  Begins code generation for a workspace.
  note:
  \code
  setRequestBuilder(:shouldCache:)
  \endcode must be called prior to calling this method.
  \param xml The workspace XML to generate code for.

  \param onCompletion The \code
  CompletionClosure
  \endcode to be called when the code is generated.

  \param onError The \code
  ErrorClosure
  \endcode to be called if the code fails to generate.


  throws:

  \code
  BlocklyError
  \endcode: Occurs if no request builder has not been set prior to calling this method.
*/
- (NSString * _Nullable)generateCodeForWorkspaceXML:(NSString * _Nonnull)xml error:(NSError * _Nullable * _Nullable)error onCompletion:(void (^ _Nullable)(NSString * _Nonnull, NSString * _Nonnull))onCompletion onError:(void (^ _Nullable)(NSString * _Nonnull, NSString * _Nonnull))onError;
/**
  Cancels code generation for a given request.
  \param request The \code
  CodeGeneratorServiceRequest
  \endcode to cancel.

*/
- (void)cancelRequestWithUuid:(NSString * _Nonnull)uuid;
/**
  Cancels all pending code generation requests.
*/
- (void)cancelAllRequests;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Builder for making \code
  CodeGeneratorServiceRequest
  \endcode instances.
*/
SWIFT_CLASS_NAMED("CodeGeneratorServiceRequestBuilder")
@interface BKYCodeGeneratorServiceRequestBuilder : NSObject
/**
  The name of the JS object that should be used for each request (e.g. ‘Blockly.Python’)
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull jsGeneratorObject;
/**
  Create a builder for making \code
  CodeGeneratorServiceRequest
  \endcode instances.
  \param jsGeneratorObject The name of the JS object that should be used for each request
  code (e.g. ‘Blockly.Python’).

*/
- (nonnull instancetype)initWithJSGeneratorObject:(NSString * _Nonnull)jsGeneratorObject OBJC_DESIGNATED_INITIALIZER;
/**
  Adds to the list of JS block generator files that should be used for each request.
  \param files Paths to JS block generator files, relative to the main resource bundle.

*/
- (void)addJSBlockGeneratorFiles:(NSArray<NSString *> * _Nonnull)files;
/**
  Adds to the list of JS block generator files that should be used for each request.
  \param files Paths to JS block generator files, relative to the given resource \code
  bundle
  \endcode.

  \param bundle The resource bundle containing \code
  jsBlockGenerators
  \endcode.

*/
- (void)addJSBlockGeneratorFiles:(NSArray<NSString *> * _Nonnull)files bundle:(NSBundle * _Nonnull)bundle;
/**
  Adds to the list of JSON block definition files that should be used for each request.
  \param defaultFiles A list of default block definition files.

*/
- (void)addJSONBlockDefinitionFilesFromDefaultFiles:(BKYBlockJSONFile)defaultFiles;
/**
  Adds to the list of JSON block definition files that should be used for each request.
  \param files Paths to JSON block definition files, relative to the main resource bundle.

*/
- (void)addJSONBlockDefinitionFiles:(NSArray<NSString *> * _Nonnull)files;
/**
  Adds to the list of JSON block definition files that should be used for each request.
  \param files Paths to JSON block definition files, relative to the given
  resource \code
  bundle
  \endcode.

  \param bundle The resource bundle containing \code
  jsonBlockDefinitions
  \endcode.

*/
- (void)addJSONBlockDefinitionFiles:(NSArray<NSString *> * _Nonnull)files bundle:(NSBundle * _Nonnull)bundle;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Utility class for creating \code
  UIColor
  \endcode instances.
*/
SWIFT_CLASS_NAMED("ColorHelper")
@interface BKYColorHelper : NSObject
/**
  Parses a RGB string and returns its corresponding color.
  \param rgb Supported formats are: (RRGGBB, #RRGGBB).

  \param alpha The alpha to set on the color. Defaults to 1.0, if none specified.


  returns:
  A parsed RGB color, or nil if the string could not be parsed.
*/
+ (UIColor * _Nullable)makeColorWithRgb:(NSString * _Nonnull)rgb alpha:(CGFloat)alpha;
/**
  Returns a \code
  UIColor
  \endcode based on a given hue, with defaults set for saturation (0.45),
  brightness (0.65), and alpha (1.0).
  \param hue The hue in degrees, which is clamped to a value between 0 and 360.


  returns:
  A \code
  UIColor
  \endcode
*/
+ (UIColor * _Nonnull)makeColorWithHue:(CGFloat)hue;
/**
  Returns a \code
  UIColor
  \endcode based on hue, saturation, brightness, and alpha values.
  \param hue The hue in degrees, which is clamped to a value between 0 and 360.

  \param saturation The saturation, which should be a value between 0.0 and 1.0.

  \param brightness The brightness, which should be a value between 0.0 and 1.0.

  \param alpha The alpha.


  returns:
  A \code
  UIColor
  \endcode
*/
+ (UIColor * _Nonnull)makeColorWithHue:(CGFloat)hue saturation:(CGFloat)saturation brightness:(CGFloat)brightness alpha:(CGFloat)alpha;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum BKYConnectionType : NSInteger;
@protocol BKYConnectionPositionDelegate;

/**
  Component used to create a connection between two \code
  Block
  \endcode instances.
*/
SWIFT_CLASS_NAMED("Connection")
@interface BKYConnection : NSObject
/**
  A globally unique identifier
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull uuid;
/**
  The connection type
*/
@property (nonatomic, readonly) enum BKYConnectionType type;
/**
  The block that holds this connection
*/
@property (nonatomic, readonly, weak) BKYBlock * _Nullable sourceBlock;
/**
  If this connection belongs to a value or statement input, this is its source
*/
@property (nonatomic, readonly, weak) BKYInput * _Nullable sourceInput;
/**
  The position of this connection in the workspace.
  NOTE: While this value <em>should</em> be stored in a Layout subclass, it’s more efficient to simply
  store the absolute position here since it’s the only relevant property needed.
*/
@property (nonatomic, readonly) BKYWorkspacePoint position;
/**
  The connection that this one is connected to
*/
@property (nonatomic, readonly, weak) BKYConnection * _Nullable targetConnection;
/**
  The shadow connection that this one is connected to
*/
@property (nonatomic, readonly, weak) BKYConnection * _Nullable shadowConnection;
/**
  The source block of \code
  self.targetConnection
  \endcode
*/
@property (nonatomic, readonly, strong) BKYBlock * _Nullable targetBlock;
/**
  The source block of \code
  self.shadowConnection
  \endcode
*/
@property (nonatomic, readonly, strong) BKYBlock * _Nullable shadowBlock;
/**
  \code
  true
  \endcode if \code
  self.targetConnection
  \endcode is non-nil. \code
  false
  \endcode otherwise.
*/
@property (nonatomic, readonly) BOOL connected;
/**
  \code
  true
  \endcode if \code
  self.shadowConnection
  \endcode is non-nil. \code
  false
  \endcode otherwise.
*/
@property (nonatomic, readonly) BOOL shadowConnected;
/**
  The set of checks for this connection. Two Connections may be connected if one of them
  supports any connection (when this is null) or if they share at least one common check
  value. For example, {“Number”, “Integer”, “MyValueType”} and {“AnotherType”, “Integer”} would
  be valid since they share “Integer” as a check.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable typeChecks;
/**
  Whether the connection has high priority in the context of bumping connections away.
*/
@property (nonatomic, readonly) BOOL highPriority;
/**
  Connection highlight delegate
*/
@property (nonatomic, weak) id <BKYConnectionHighlightDelegate> _Nullable highlightDelegate;
/**
  Connection position delegate
*/
@property (nonatomic, weak) id <BKYConnectionPositionDelegate> _Nullable positionDelegate;
/**
  Flag if this connection should be highlighted in the UI
*/
@property (nonatomic, readonly) BOOL highlighted;
/**
  This value is \code
  true
  \endcode if this connection is an “inferior” connection (ie. \code
  .outputValue
  \endcode or
  \code
  .previousStatement
  \endcode). Otherwise, this value is \code
  false
  \endcode.
*/
@property (nonatomic, readonly) BOOL isInferior;
/**
  Creates a \code
  Connection
  \endcode.
  \param type The \code
  ConnectionType
  \endcode of this connection.

  \param sourceInput [Optional] The source input for the \code
  Connection
  \endcode. Defaults to \code
  nil
  \endcode.

*/
- (nonnull instancetype)initWithType:(enum BKYConnectionType)type sourceInput:(BKYInput * _Nullable)sourceInput OBJC_DESIGNATED_INITIALIZER;
/**
  Sets \code
  self.targetConnection
  \endcode to a given connection, and vice-versa.
  \param connection The other connection


  throws:

  \code
  BlocklyError
  \endcode: Thrown if the connection could not be made, with error code \code
  .ConnectionInvalid
  \endcode
*/
- (BOOL)connectTo:(BKYConnection * _Nullable)connection error:(NSError * _Nullable * _Nullable)error;
/**
  Sets \code
  self.shadowConnection
  \endcode to a given connection, and vice-versa.
  \param connection The other connection


  throws:

  \code
  BlocklyError
  \endcode: Thrown if the connection could not be made, with error code \code
  .ConnectionInvalid
  \endcode
*/
- (BOOL)connectShadowTo:(BKYConnection * _Nullable)connection error:(NSError * _Nullable * _Nullable)error;
/**
  Removes the connection between this and \code
  self.targetConnection
  \endcode. If \code
  self.targetConnection
  \endcode is
  \code
  nil
  \endcode, this method does nothing.
*/
- (void)disconnect;
/**
  Removes the connection between this and \code
  self.shadowConnection
  \endcode. If \code
  self.shadowConnection
  \endcode is
  \code
  nil
  \endcode, this method does nothing.
*/
- (void)disconnectShadow;
/**
  Check if this can be connected to the target connection.
  \param target The connection to check.


  returns:
  True if the target can be connected, false otherwise.
*/
- (BOOL)canConnectTo:(BKYConnection * _Nonnull)target;
/**
  Returns the distance between this connection and another connection.
  \param other The other \code
  Connection
  \endcode to measure the distance to.


  returns:
  The distance between connections.
*/
- (CGFloat)distanceFromConnection:(BKYConnection * _Nonnull)other;
/**
  Adds a highlight to this connection for a block. If there were no previous highlights for this
  connection, the \code
  highlighted
  \endcode value is changed to \code
  true
  \endcode and its listeners are notified.
  \param block The given block

*/
- (void)addHighlightForBlock:(BKYBlock * _Nonnull)block;
/**
  Removes the highlight from this connection for a block. If there are no highlights after this
  one is removed, the \code
  highlighted
  \endcode value is changed to \code
  false
  \endcode and its listeners are notified.
  \param block The given block

*/
- (void)removeHighlightForBlock:(BKYBlock * _Nonnull)block;
/**
  Move the connection to a specific position.
  \param position The position to move to.

  \param offset An additional offset, usually the position of the parent view in the workspace
  view.

*/
- (void)moveToPosition:(BKYWorkspacePoint)position withOffset:(BKYWorkspacePoint)offset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/**
  Represents all possible types of connections.
*/
typedef SWIFT_ENUM_NAMED(NSInteger, BKYConnectionType, "ConnectionType") {
  BKYConnectionTypePreviousStatement = 0,
  BKYConnectionTypeNextStatement = 1,
  BKYConnectionTypeInputValue = 2,
  BKYConnectionTypeOutputValue = 3,
};


@class BKYConnectionManagerGroup;

/**
  Controller for \code
  Connection
  \endcode instances, where connections can be separated into groups (see
  \code
  ConnectionManager.Group
  \endcode).
*/
SWIFT_CLASS_NAMED("ConnectionManager")
@interface BKYConnectionManager : NSObject
/**
  The main group. By default, all connections are tracked in this group, unless specified
  otherwise.
*/
@property (nonatomic, readonly, strong) BKYConnectionManagerGroup * _Nonnull mainGroup;
/**
  Adds a new \code
  ConnectionManager.Group
  \endcode to the manager for a given block.
  \param block If this value is specified, all connections underneath this block’s tree are
  automatically moved to the newly created connection group. This value is also assigned as the
  \code
  ownerBlock
  \endcode of the connection group.


  returns:
  The newly created connection group
*/
- (BKYConnectionManagerGroup * _Nonnull)startGroupForBlock:(BKYBlock * _Nullable)block;
/**
  Moves all connections from one group to another group. The first group is automatically
  deleted after this operation is completed (unless both groups are the same).
  \param fromGroup The group containing the connections to move

  \param intoGroup The receiving group. If this value is nil, the \code
  mainGroup
  \endcode is used by
  default.

*/
- (void)mergeGroup:(BKYConnectionManagerGroup * _Nonnull)fromGroup intoGroup:(BKYConnectionManagerGroup * _Nullable)intoGroup;
/**
  Adds this connection to the manager, listens for changes in its position, and assigns it to a
  group.
  \param connection The connection to add. If the connection was already being tracked,
  it is simply assigned to \code
  group
  \endcode.

  \param group The group to assign this connection to. If none is specified, the connection
  is assigned to \code
  mainGroup
  \endcode.

*/
- (void)trackConnection:(BKYConnection * _Nonnull)connection assignToGroup:(BKYConnectionManagerGroup * _Nullable)group;
/**
  Removes this connection from the manager and stops listening for changes to its position.
  \param connection The connection to remove.

*/
- (void)untrackConnection:(BKYConnection * _Nonnull)connection;
/**
  Untracks all connections that are not associated with a source block.
*/
- (void)untrackOrphanedConnections;
/**
  Finds all compatible connections (including shadow connections) within the given radius, that are
  not currently being dragged. This function is used for bumping so type checking does not apply.
  \param connection The base connection for the search.

  \param maxRadius How far out to search for compatible connections, specified as a Workspace
  coordinate system unit


  returns:
  A list of all nearby compatible connections.
*/
- (NSArray<BKYConnection *> * _Nonnull)stationaryNeighborsForConnection:(BKYConnection * _Nonnull)connection maxRadius:(CGFloat)maxRadius;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface BKYConnectionManager (SWIFT_EXTENSION(Blockly))
@end


/**
  Delegate for position events that occur on a \code
  Connection
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("ConnectionPositionDelegate")
@protocol BKYConnectionPositionDelegate
/**
  Event that is called immediately before the connection’s \code
  position
  \endcode will change.
  \param connection The connection whose \code
  position
  \endcode value will change.

*/
- (void)willChangePositionForConnection:(BKYConnection * _Nonnull)connection;
/**
  Event that is called immediately after the connection’s \code
  position
  \endcode has changed.
  \param connection The connection whose \code
  position
  \endcode value has changed.

*/
- (void)didChangePositionForConnection:(BKYConnection * _Nonnull)connection;
@end


/**
  Manages a specific set of \code
  Connection
  \endcode instances.
*/
SWIFT_CLASS_NAMED("Group")
@interface BKYConnectionManagerGroup : NSObject <BKYConnectionPositionDelegate>
/**
  When the connection group’s drag mode has been set to true, it’s assumed that all
  connections are being moved together as a group. In this case, the group does not
  needlessly verify the internal sorted order of its connections.
*/
@property (nonatomic) BOOL dragMode;
- (void)willChangePositionForConnection:(BKYConnection * _Nonnull)connection;
- (void)didChangePositionForConnection:(BKYConnection * _Nonnull)connection;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface BKYConnectionManager (SWIFT_EXTENSION(Blockly))
@end



/**
  A default implementation of \code
  BlockGroupLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("DefaultBlockGroupLayout")
@interface BKYDefaultBlockGroupLayout : BKYBlockGroupLayout
- (void)performLayoutWithIncludeChildren:(BOOL)includeChildren;
- (nonnull instancetype)initWithEngine:(BKYLayoutEngine * _Nonnull)engine OBJC_DESIGNATED_INITIALIZER;
@end

@class BKYDefaultBlockLayoutBackground;

/**
  A default implementation of \code
  BlockLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("DefaultBlockLayout")
@interface BKYDefaultBlockLayout : BKYBlockLayout
/**
  The information for rendering the background for this block.
*/
@property (nonatomic, readonly, strong) BKYDefaultBlockLayoutBackground * _Nonnull background;
/**
  The position of the block’s leading edge X offset, specified as a Workspace coordinate
  system unit.
*/
@property (nonatomic, readonly) CGFloat leadingEdgeXOffset;
/**
  Initializes the default block layout.
  \param block The \code
  Block
  \endcode model corresponding to the layout.

  \param engine The \code
  LayoutEngine
  \endcode to associate with the new layout.

*/
- (nonnull instancetype)initWithBlock:(BKYBlock * _Nonnull)block engine:(BKYLayoutEngine * _Nonnull)engine OBJC_DESIGNATED_INITIALIZER;
- (void)performLayoutWithIncludeChildren:(BOOL)includeChildren;
@end


@interface BKYDefaultBlockLayout (SWIFT_EXTENSION(Blockly))
@end

@class BKYBlockLayoutBackgroundRow;

/**
  Information for rendering the background of a \code
  DefaultBlockLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("Background")
@interface BKYDefaultBlockLayoutBackground : NSObject
/**
  Flag if the top-left corner should be square.
*/
@property (nonatomic, readonly) BOOL squareTopLeftCorner;
/**
  Flag if the bottom-left corner should be rounded
*/
@property (nonatomic, readonly) BOOL squareBottomLeftCorner;
/**
  Flag if a previous statement connector should be rendered at the top of the block
*/
@property (nonatomic, readonly) BOOL previousStatementConnector;
/**
  Flag if a next statement connector should be rendered at the bottom of the block
*/
@property (nonatomic, readonly) BOOL nextStatementConnector;
/**
  Flag if a output connector should be rendered on the left side of the block
*/
@property (nonatomic, readonly) BOOL outputConnector;
/**
  Flag if the block should render a hat
*/
@property (nonatomic, readonly) BOOL startHat;
/**
  The position of the block’s leading X edge offset, specified as a Workspace coordinate
  system unit, relative to its entire bounding box.
  (e.g. In LTR, this is the X offset of the block’s left edge.)
*/
@property (nonatomic, readonly) CGFloat leadingEdgeXOffset;
/**
  The position of the block’s top Y edge offset, specified as a Workspace coordinate
  system unit.
*/
@property (nonatomic, readonly) CGFloat leadingEdgeYOffset;
/**
  The rows for this block
*/
@property (nonatomic, readonly, copy) NSArray<BKYBlockLayoutBackgroundRow *> * _Nonnull rows;
/**
  Updates all render properties from a given block layout.
  \param layout The block layout.

*/
- (void)updateRenderPropertiesFromBlockLayout:(BKYDefaultBlockLayout * _Nonnull)layout;
/**
  Append a new row to \code
  rows
  \endcode.
  \param row The row to append.

*/
- (void)appendRow:(BKYBlockLayoutBackgroundRow * _Nonnull)row;
/**
  Removes all items inside \code
  rows
  \endcode.
*/
- (void)removeAllRows;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Information for rendering a row inside a block.
*/
SWIFT_CLASS_NAMED("BackgroundRow")
@interface BKYBlockLayoutBackgroundRow : NSObject
/**
  Flag if a output connector should be rendered on the right side of the row
*/
@property (nonatomic) BOOL outputConnector;
/**
  Flag if this row represents a “C” shaped statement block.
*/
@property (nonatomic) BOOL isStatement;
/**
  The relative x-position of where to begin rendering the right edge of the block, expressed
  as a Workspace coordinate system unit. Note, this is the left edge in RTL rendering.
*/
@property (nonatomic) CGFloat rightEdge;
/**
  The amount of padding to include at the top of the row, expressed as a Workspace
  coordinate system unit.
*/
@property (nonatomic) CGFloat topPadding;
/**
  The amount of padding to include at the bottom of the row, expressed as a Workspace
  coordinate system unit.
*/
@property (nonatomic) CGFloat bottomPadding;
/**
  The height of the middle part of the row, expressed as a Workspace coordinate system value.
*/
@property (nonatomic) CGFloat middleHeight;
/**
  For statement inputs, the relative x-position of where to begin rendering the inner left
  edge of the “C” shape block, expressed as a Workspace coordinate system unit.
*/
@property (nonatomic) CGFloat statementIndent;
/**
  For statement inputs, the width of the notch of the inner ceiling of the “C” shaped block,
  expressed as a Workspace coordinate system unit.
*/
@property (nonatomic) CGFloat statementConnectorWidth;
/**
  The corresponding layouts used to render this row
*/
@property (nonatomic, copy) NSArray<BKYLayout *> * _Nonnull layouts;
/**
  The height of this row, expressed as a Workspace coordinate system value
*/
@property (nonatomic, readonly) CGFloat rowHeight;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A default implementation of \code
  BlockView
  \endcode.
*/
SWIFT_CLASS_NAMED("DefaultBlockView")
@interface BKYDefaultBlockView : BKYBlockView
/**
  Convenience property for accessing \code
  self.layout
  \endcode as a \code
  DefaultBlockLayout
  \endcode
*/
@property (nonatomic, readonly, strong) BKYDefaultBlockLayout * _Nullable defaultBlockLayout;
/**
  Initializes the default block view.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Returns the farthest descendant of the receiver in the view hierarchy that contains a specified
  \code
  point
  \endcode. Unlike the default implementation, default block view will only return itself if the
  \code
  point
  \endcode lies within the bezier curve of the block.
  \param point A point specified in the receiver’s local coordinate system (bounds).

  \param event The event that warranted a call to this method. If you are calling this method
  from outside your event-handling code, you may specify nil.


  returns:
  The view object that is the farthest descendent the current view and contains \code
  point
  \endcode.
*/
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
- (void)prepareForReuse;
@end


/**
  Default implementation of the connection validator. Unless otherwise specified, this will be
  the validator that is used by the \code
  ConnectionManager
  \endcode.
*/
SWIFT_CLASS_NAMED("DefaultConnectionValidator")
@interface BKYDefaultConnectionValidator : NSObject
- (BOOL)canConnect:(BKYConnection * _Nonnull)moving toConnection:(BKYConnection * _Nonnull)candidate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Abstract class for storing information on how to render and position an \code
  Input
  \endcode on-screen.
*/
SWIFT_CLASS_NAMED("InputLayout")
@interface BKYInputLayout : BKYLayout
/**
  The target \code
  Input
  \endcode to layout
*/
@property (nonatomic, readonly, strong) BKYInput * _Nonnull input;
/**
  Convenience property returning \code
  self.parentLayout
  \endcode as a \code
  BlockLayout
  \endcode
*/
@property (nonatomic, readonly, strong) BKYBlockLayout * _Nullable parentBlockLayout;
/**
  The corresponding \code
  BlockGroupLayout
  \endcode object seeded by \code
  self.input.connectedBlock
  \endcode.
*/
@property (nonatomic, readonly, strong) BKYBlockGroupLayout * _Null_unspecified blockGroupLayout;
/**
  The corresponding layouts for \code
  self.input.fields[]
  \endcode
*/
@property (nonatomic, readonly, copy) NSArray<BKYFieldLayout *> * _Nonnull fieldLayouts;
/**
  Flag for if this input is the first child in its parent’s block layout
*/
@property (nonatomic, readonly) BOOL isFirstChild;
/**
  Flag for if this input is the last child in its parent’s block layout
*/
@property (nonatomic, readonly) BOOL isLastChild;
/**
  Flag for if its parent block renders its inputs inline
*/
@property (nonatomic, readonly) BOOL isInline;
/**
  Appends a fieldLayout to \code
  self.fieldLayouts
  \endcode and sets its \code
  parentLayout
  \endcode to this instance.
  \param fieldLayout The \code
  FieldLayout
  \endcode to append.

*/
- (void)appendFieldLayout:(BKYFieldLayout * _Nonnull)fieldLayout;
/**
  Removes \code
  self.fieldLayouts[index]
  \endcode, sets its \code
  parentLayout
  \endcode to nil, and returns it.
  \param index The index to remove from \code
  self.fieldLayouts
  \endcode.


  returns:
  The \code
  FieldLayout
  \endcode that was removed.
*/
- (BKYFieldLayout * _Nonnull)removeFieldLayoutAtIndex:(NSInteger)index;
/**
  Removes all elements from \code
  self.fieldLayouts
  \endcode, sets their \code
  parentLayout
  \endcode to nil, and resets
  \code
  self.blockGroupLayout
  \endcode.
  \param updateLayout If true, all parent layouts of this layout will be updated.

*/
- (void)resetWithUpdateLayout:(BOOL)updateLayout;
- (nonnull instancetype)initWithEngine:(BKYLayoutEngine * _Nonnull)engine SWIFT_UNAVAILABLE;
@end


/**
  A default implementation of \code
  InputLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("DefaultInputLayout")
@interface BKYDefaultInputLayout : BKYInputLayout
/**
  The relative x-position of where to begin rendering the right edge of the block, expressed as
  a Workspace coordinate system unit.
*/
@property (nonatomic) CGFloat rightEdge;
/**
  For inline value inputs, the relative position of where to begin rendering the input
  connector (ie. the female puzzle piece), expressed as a Workspace coordinate system unit.
*/
@property (nonatomic) BKYWorkspacePoint inlineConnectorPosition;
/**
  For inline value inputs, the size of the input connector (ie. the female puzzle piece),
  expressed as a Workspace coordinate system unit.
*/
@property (nonatomic) BKYWorkspaceSize inlineConnectorSize;
/**
  For statement inputs, the relative x-position of where to begin rendering the inner left
  edge of the “C” shaped block, expressed as a Workspace coordinate system unit.
*/
@property (nonatomic) CGFloat statementIndent;
/**
  For statement inputs, the width of the notch of the inner ceiling of the “C” shaped block,
  expressed as a Workspace coordinate system unit.
*/
@property (nonatomic) CGFloat statementConnectorWidth;
/**
  For statement inputs, the amount of padding to include at the top of “C” shaped block,
  expressed as a Workspace coordinate system unit.
*/
@property (nonatomic) CGFloat statementRowTopPadding;
/**
  For statement inputs, the amount of padding to include at the bottom of “C” shaped block,
  expressed as a Workspace coordinate system unit.
*/
@property (nonatomic) CGFloat statementRowBottomPadding;
/**
  For statement inputs, the height of the middle part of the “C” shaped block,
  expressed as a Workspace coordinate system unit.
*/
@property (nonatomic) CGFloat statementMiddleHeight;
/**
  The minimal amount of width required to render \code
  fieldLayouts
  \endcode, specified as a Workspace
  coordinate system unit.
*/
@property (nonatomic, readonly) CGFloat minimalFieldWidthRequired;
/**
  The minimal amount of width required to render the child statements of the input, specified as
  a Workspace coordinate system unit.
*/
@property (nonatomic, readonly) CGFloat minimalStatementWidthRequired;
- (void)performLayoutWithIncludeChildren:(BOOL)includeChildren;
@end

@class UIFont;

/**
  UI configuration for all layout elements.
*/
SWIFT_CLASS_NAMED("LayoutConfig")
@interface BKYLayoutConfig : NSObject
/**
  [\code
  Unit
  \endcode] The distance to bump blocks away from each other
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BlockBumpDistance;)
+ (NSInteger)BlockBumpDistance;
/**
  [\code
  Unit
  \endcode] The maximum distance allowed for blocks to “snap” toward each other at the end of
  drags, if they have compatible connections near each other.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BlockSnapDistance;)
+ (NSInteger)BlockSnapDistance;
/**
  [\code
  Unit
  \endcode] Horizontal padding around inline elements (such as fields or inputs)
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger InlineXPadding;)
+ (NSInteger)InlineXPadding;
/**
  [\code
  Unit
  \endcode] Vertical padding around inline elements (such as fields or inputs)
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger InlineYPadding;)
+ (NSInteger)InlineYPadding;
/**
  [\code
  Unit
  \endcode] Horizontal space between blocks for \code
  WorkspaceFlowLayout
  \endcode
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WorkspaceFlowXSeparatorSpace;)
+ (NSInteger)WorkspaceFlowXSeparatorSpace;
/**
  [\code
  Unit
  \endcode] Vertical space between blocks for for \code
  WorkspaceFlowLayout
  \endcode
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WorkspaceFlowYSeparatorSpace;)
+ (NSInteger)WorkspaceFlowYSeparatorSpace;
/**
  [\code
  Unit
  \endcode] Minimum height of field rows
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger FieldMinimumHeight;)
+ (NSInteger)FieldMinimumHeight;
/**
  [\code
  Unit
  \endcode] If necessary, the rounded corner radius of a field
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger FieldCornerRadius;)
+ (NSInteger)FieldCornerRadius;
/**
  [\code
  Unit
  \endcode] If necessary, the line stroke width of a field
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger FieldLineWidth;)
+ (NSInteger)FieldLineWidth;
/**
  [\code
  Unit
  \endcode] The border width to use when rendering the \code
  FieldColor
  \endcode button
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger FieldColorButtonBorderWidth;)
+ (NSInteger)FieldColorButtonBorderWidth;
/**
  [\code
  Size
  \endcode] The button size to use when rendering a \code
  FieldColor
  \endcode
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger FieldColorButtonSize;)
+ (NSInteger)FieldColorButtonSize;
/**
  [\code
  UIColor
  \endcode] The color to use for the \code
  FieldCheckboxView
  \endcode switch’s “onTintColor”. A value of
  \code
  nil
  \endcode means that the system default should be used.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger FieldCheckboxSwitchOnTintColor;)
+ (NSInteger)FieldCheckboxSwitchOnTintColor;
/**
  [\code
  UIColor
  \endcode] The color to use for the \code
  FieldCheckboxView
  \endcode switch’s “tintColor”. A value of
  \code
  nil
  \endcode means that the system default should be used.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger FieldCheckboxSwitchTintColor;)
+ (NSInteger)FieldCheckboxSwitchTintColor;
/**
  [\code
  UIColor
  \endcode] The default color for text in field labels.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger FieldLabelTextColor;)
+ (NSInteger)FieldLabelTextColor;
/**
  [\code
  UIColor
  \endcode] The default color for editable text in fields.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger FieldEditableTextColor;)
+ (NSInteger)FieldEditableTextColor;
/**
  [\code
  EdgeInsets
  \endcode] For fields that use an \code
  InsetTextField
  \endcode, this is the \code
  insetPadding
  \endcode that
  should be used for each one
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger FieldTextFieldInsetPadding;)
+ (NSInteger)FieldTextFieldInsetPadding;
/**
  [\code
  Unit
  \endcode] For fields that use a \code
  UITextField
  \endcode, this is the maximum width that should be
  used for each one.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger FieldTextFieldMaximumWidth;)
+ (NSInteger)FieldTextFieldMaximumWidth;
/**
  [\code
  Font
  \endcode] The default font to use for generic text inside Blockly.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger GlobalFont;)
+ (NSInteger)GlobalFont;
/**
  [\code
  Font
  \endcode] The font to use for title text inside popovers.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PopoverTitleFont;)
+ (NSInteger)PopoverTitleFont;
/**
  [\code
  Font
  \endcode] The font to use for subtitle text inside popovers.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PopoverSubtitleFont;)
+ (NSInteger)PopoverSubtitleFont;
/**
  [\code
  Double
  \endcode] The animation duration to use when running animatable code inside a \code
  LayoutView
  \endcode.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger ViewAnimationDuration;)
+ (NSInteger)ViewAnimationDuration;
/**
  [\code
  [String]
  \endcode] The variable blocks to be created in the toolbox when a variable is created.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger VariableBlocks;)
+ (NSInteger)VariableBlocks;
/**
  [\code
  [String]
  \endcode] The variable blocks to be created the first time a variable is created.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger UniqueVariableBlocks;)
+ (NSInteger)UniqueVariableBlocks;
/**
  Dictionary mapping property keys to \code
  Bool
  \endcode values
*/
@property (nonatomic, readonly, copy) NSDictionary<NSNumber *, NSNumber *> * _Nonnull bools;
/**
  Dictionary mapping property keys to \code
  UIColor
  \endcode values
*/
@property (nonatomic, readonly, copy) NSDictionary<NSNumber *, UIColor *> * _Nonnull colors;
/**
  Dictionary mapping property keys to \code
  Double
  \endcode values
*/
@property (nonatomic, readonly, copy) NSDictionary<NSNumber *, NSNumber *> * _Nonnull doubles;
/**
  Dictionary mapping property keys to \code
  CGFloat
  \endcode values
*/
@property (nonatomic, readonly, copy) NSDictionary<NSNumber *, NSNumber *> * _Nonnull floats;
/**
  Dictionary mapping property keys to \code
  [String]
  \endcode values
*/
@property (nonatomic, readonly, copy) NSDictionary<NSNumber *, NSArray<NSString *> *> * _Nonnull stringArrays;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Creates a new \code
  PropertyKey
  \endcode.
*/
+ (NSInteger)newPropertyKey;
/**
  Maps a \code
  Bool
  \endcode value to a specific \code
  PropertyKey
  \endcode.
  \param boolValue The \code
  Bool
  \endcode value

  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  DefaultLayoutConfig.BlockStartHat
  \endcode)


  returns:
  The \code
  Bool
  \endcode that was set.
*/
- (BOOL)setBool:(BOOL)boolValue for:(NSInteger)key;
/**
  Returns the \code
  Bool
  \endcode value that is mapped to a specific \code
  PropertyKey
  \endcode.
  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  DefaultLayoutConfig.BlockStartHat
  \endcode)

  \param defaultValue [Optional] If no \code
  Bool
  \endcode was found for \code
  key
  \endcode, this value is
  automatically assigned to \code
  key
  \endcode and used instead.


  returns:
  The \code
  key
  \endcode’s value
*/
- (BOOL)boolFor:(NSInteger)key defaultValue:(BOOL)defaultValue;
/**
  Maps a \code
  Double
  \endcode value to a specific \code
  PropertyKey
  \endcode.
  \param doubleValue The \code
  Double
  \endcode value

  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.ViewAnimationDuration
  \endcode)


  returns:
  The \code
  Double
  \endcode that was set.
*/
- (double)setDouble:(double)doubleValue for:(NSInteger)key;
/**
  Returns the \code
  Double
  \endcode value that is mapped to a specific \code
  PropertyKey
  \endcode.
  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.ViewAnimationDuration
  \endcode)

  \param defaultValue [Optional] If no \code
  Double
  \endcode was found for \code
  key
  \endcode, this value is
  automatically assigned to \code
  key
  \endcode and used instead.


  returns:
  The \code
  key
  \endcode’s value
*/
- (double)doubleFor:(NSInteger)key defaultValue:(double)defaultValue;
/**
  Maps a \code
  UIColor
  \endcode value to a specific \code
  PropertyKey
  \endcode.
  \param color The \code
  UIColor
  \endcode value

  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.FieldCheckboxSwitchOnTintColor
  \endcode)


  returns:
  The \code
  color
  \endcode that was set.
*/
- (UIColor * _Nullable)setColor:(UIColor * _Nullable)color for:(NSInteger)key;
/**
  Returns the \code
  UIColor
  \endcode value that is mapped to a specific \code
  PropertyKey
  \endcode.
  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.FieldCheckboxSwitchOnTintColor
  \endcode)

  \param defaultValue [Optional] If no \code
  UIColor
  \endcode was found for \code
  key
  \endcode, this value is
  automatically assigned to \code
  key
  \endcode and used instead.


  returns:
  The \code
  key
  \endcode’s value
*/
- (UIColor * _Nullable)colorFor:(NSInteger)key defaultValue:(UIColor * _Nullable)defaultValue;
/**
  Maps a \code
  EdgeInsets
  \endcode value to a specific \code
  PropertyKey
  \endcode.
  \param edgeInsets The \code
  EdgeInsets
  \endcode value

  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.FieldTextFieldInsetPadding
  \endcode)


  returns:
  The \code
  edgeInset
  \endcode that was set.
*/
- (BKYEdgeInsets)setEdgeInsets:(BKYEdgeInsets)edgeInsets for:(NSInteger)key;
/**
  Returns the \code
  EdgeInsets
  \endcode value that is mapped to a specific \code
  PropertyKey
  \endcode.
  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.FieldTextFieldInsetPadding
  \endcode)

  \param defaultValue [Optional] If no \code
  EdgeInsets
  \endcode was found for \code
  key
  \endcode, this value is
  automatically assigned to \code
  key
  \endcode and used instead.


  returns:
  The \code
  key
  \endcode’s value
*/
- (BKYEdgeInsets)edgeInsetsFor:(NSInteger)key defaultValue:(BKYEdgeInsets)defaultValue;
/**
  Maps a \code
  CGFloat
  \endcode value to a specific \code
  PropertyKey
  \endcode.
  \param floatValue The \code
  CGFloat
  \endcode value

  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  DefaultLayoutConfig.BlockShadowBrightnessMultiplier
  \endcode)


  returns:
  The \code
  CGFloat
  \endcode that was set.
*/
- (CGFloat)setFloat:(CGFloat)floatValue for:(NSInteger)key;
/**
  Returns the \code
  CGFloat
  \endcode value that is mapped to a specific \code
  PropertyKey
  \endcode.
  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.FieldTextFieldMaximumWidth
  \endcode)

  \param defaultValue [Optional] If no \code
  CGFloat
  \endcode was found for \code
  key
  \endcode, this value is
  automatically assigned to \code
  key
  \endcode and used instead.


  returns:
  The \code
  key
  \endcode’s value
*/
- (CGFloat)floatFor:(NSInteger)key defaultValue:(CGFloat)defaultValue;
/**
  Maps a closure for creating a \code
  UIFont
  \endcode, to a specific \code
  PropertyKey
  \endcode.
  \param fontCreator A closure for creating a \code
  UIFont
  \endcode, based on a given \code
  scale
  \endcode value.

  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.GlobalFont
  \endcode)

*/
- (void)setFontCreator:(UIFont * _Nonnull (^ _Nonnull)(CGFloat))fontCreator for:(NSInteger)key;
/**
  Returns the closure for creating a \code
  UIFont
  \endcode that is mapped to a specific \code
  PropertyKey
  \endcode.
  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.GlobalFont
  \endcode)


  returns:
  If the \code
  key
  \endcode was found, its associated \code
  FontCreator
  \endcode value. Otherwise, \code
  nil
  \endcode is
  returned.
*/
- (UIFont * _Nonnull (^ _Nullable)(CGFloat))fontCreatorFor:(NSInteger)key;
/**
  Based on the closure for creating a \code
  UIFont
  \endcode associated to a specific \code
  PropertyKey
  \endcode, returns
  a scaled \code
  UIFont
  \endcode.
  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.GlobalFont
  \endcode)


  returns:
  The scaled \code
  UIFont
  \endcode using the closure associated with the \code
  key
  \endcode, or a default \code
  UIFont
  \endcode
  if the key could not be located.
*/
- (UIFont * _Nonnull)fontFor:(NSInteger)key;
/**
  Based on the closure for creating a \code
  UIFont
  \endcode associated to a specific \code
  PropertyKey
  \endcode, returns
  a scaled \code
  UIFont
  \endcode for use inside a popover.
  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.GlobalFont
  \endcode)


  returns:
  The scaled \code
  UIFont
  \endcode using the closure associated with the \code
  key
  \endcode, or a default \code
  UIFont
  \endcode
  if the key could not be located.
*/
- (UIFont * _Nonnull)popoverFontFor:(NSInteger)key;
/**
  Maps a \code
  Size
  \endcode value to a specific \code
  PropertyKey
  \endcode.
  \param size The \code
  Size
  \endcode value

  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.FieldColorButtonSize
  \endcode)


  returns:
  The \code
  size
  \endcode that was set.
*/
- (BKYLayoutConfigSize)setSize:(BKYLayoutConfigSize)size for:(NSInteger)key;
/**
  Returns the \code
  Size
  \endcode value that is mapped to a specific \code
  PropertyKey
  \endcode.
  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.FieldColorButtonSize
  \endcode)

  \param defaultValue [Optional] If no \code
  Size
  \endcode was found for \code
  key
  \endcode, this value is
  automatically assigned to \code
  key
  \endcode and used instead.


  returns:
  The mapped \code
  Size
  \endcode value.
*/
- (BKYLayoutConfigSize)sizeFor:(NSInteger)key defaultValue:(BKYLayoutConfigSize)defaultValue;
/**
  Returns the \code
  viewSize
  \endcode of the \code
  Size
  \endcode value that is mapped to a specific \code
  PropertyKey
  \endcode.
  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.FieldColorButtonSize
  \endcode)

  \param defaultValue [Optional] If no \code
  Size
  \endcode was found for \code
  key
  \endcode, this value is
  automatically assigned to \code
  key
  \endcode and used instead.


  returns:
  The \code
  viewSize
  \endcode of the mapped \code
  Size
  \endcode value.
*/
- (CGSize)viewSizeFor:(NSInteger)key defaultValue:(BKYLayoutConfigSize)defaultValue;
/**
  Returns the \code
  workspaceSize
  \endcode of the \code
  Size
  \endcode value that is mapped to a specific \code
  PropertyKey
  \endcode.
  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.FieldColorButtonSize
  \endcode)

  \param defaultValue [Optional] If no \code
  Size
  \endcode was found for \code
  key
  \endcode, this value is
  automatically assigned to \code
  key
  \endcode and used instead.


  returns:
  The \code
  workspaceSize
  \endcode of the mapped \code
  Size
  \endcode value.
*/
- (BKYWorkspaceSize)workspaceSizeFor:(NSInteger)key defaultValue:(BKYLayoutConfigSize)defaultValue;
/**
  Maps a \code
  Unit
  \endcode value to a specific \code
  PropertyKey
  \endcode.
  \param unit The \code
  Unit
  \endcode value

  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.InlineXPadding
  \endcode)


  returns:
  The \code
  unit
  \endcode that was set.
*/
- (BKYLayoutConfigUnit)setUnit:(BKYLayoutConfigUnit)unit for:(NSInteger)key;
/**
  Returns the \code
  Unit
  \endcode value that is mapped to a specific \code
  PropertyKey
  \endcode.
  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.InlineXPadding
  \endcode)

  \param defaultValue [Optional] If no value was found for \code
  key
  \endcode, this value is automatically
  assigned to \code
  key
  \endcode and used instead.


  returns:
  The mapped \code
  Unit
  \endcode value.
*/
- (BKYLayoutConfigUnit)unitFor:(NSInteger)key defaultValue:(BKYLayoutConfigUnit)defaultValue;
/**
  Returns the \code
  viewUnit
  \endcode of the \code
  Unit
  \endcode value that is mapped to a specific \code
  PropertyKey
  \endcode.
  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.InlineXPadding
  \endcode)

  \param defaultValue [Optional] If no value was found for \code
  key
  \endcode, this value is automatically
  assigned to \code
  key
  \endcode and used instead.


  returns:
  The \code
  viewUnit
  \endcode of the mapped \code
  Unit
  \endcode value.
*/
- (CGFloat)viewUnitFor:(NSInteger)key defaultValue:(BKYLayoutConfigUnit)defaultValue;
/**
  Returns the \code
  workspaceUnit
  \endcode of the \code
  Unit
  \endcode value that is mapped to a specific \code
  PropertyKey
  \endcode.
  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.InlineXPadding
  \endcode)

  \param defaultValue [Optional] If no value was found for \code
  key
  \endcode, this value is automatically
  assigned to \code
  key
  \endcode and used instead.


  returns:
  The \code
  workspaceUnit
  \endcode of the mapped \code
  Unit
  \endcode value.
*/
- (CGFloat)workspaceUnitFor:(NSInteger)key defaultValue:(BKYLayoutConfigUnit)defaultValue;
/**
  Maps a \code
  [String]
  \endcode value to a specific \code
  PropertyKey
  \endcode.
  \param stringArrayValue The \code
  [String]
  \endcode value

  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.VariableBlocks
  \endcode)


  returns:
  The \code
  [String]
  \endcode that was set.
*/
- (NSArray<NSString *> * _Nonnull)setStringArray:(NSArray<NSString *> * _Nonnull)stringArrayValue for:(NSInteger)key;
/**
  Returns the \code
  [String]
  \endcode value that is mapped to a specific \code
  PropertyKey
  \endcode.
  \param key The \code
  PropertyKey
  \endcode (e.g. \code
  LayoutConfig.VariableBlocks
  \endcode)

  \param defaultValue [Optional] If no \code
  [String]
  \endcode was found for \code
  key
  \endcode, this value is
  automatically assigned to \code
  key
  \endcode and used instead.


  returns:
  The \code
  key
  \endcode’s value
*/
- (NSArray<NSString *> * _Nonnull)stringArrayFor:(NSInteger)key defaultValue:(NSArray<NSString *> * _Nonnull)defaultValue;
/**
  Updates the UIView coordinate system values for all config values that have been stored
  in this instance, by using a given \code
  LayoutEngine
  \endcode.
  \param engine The \code
  LayoutEngine
  \endcode used to update all config values

*/
- (void)updateViewValuesFromEngine:(BKYLayoutEngine * _Nonnull)engine;
@end


/**
  Stores config properties specific to the default layout.
*/
SWIFT_CLASS_NAMED("DefaultLayoutConfig")
@interface BKYDefaultLayoutConfig : BKYLayoutConfig
/**
  [\code
  Unit
  \endcode] Rounded corner radius of a block
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BlockCornerRadius;)
+ (NSInteger)BlockCornerRadius;
/**
  [\code
  Unit
  \endcode] Width of a regular line stroke for a block
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BlockLineWidthRegular;)
+ (NSInteger)BlockLineWidthRegular;
/**
  [\code
  Unit
  \endcode] Width of a highlighted line stroke for a block
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BlockLineWidthHighlight;)
+ (NSInteger)BlockLineWidthHighlight;
/**
  [\code
  Unit
  \endcode] Height of a horizontal puzzle tab
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PuzzleTabHeight;)
+ (NSInteger)PuzzleTabHeight;
/**
  [\code
  Unit
  \endcode] Width of a horizontal puzzle tab
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger PuzzleTabWidth;)
+ (NSInteger)PuzzleTabWidth;
/**
  [\code
  Unit
  \endcode] Width of vertical tab (including left margin)
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger NotchWidth;)
+ (NSInteger)NotchWidth;
/**
  [\code
  Unit
  \endcode] Height of vertical tab
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger NotchHeight;)
+ (NSInteger)NotchHeight;
/**
  [\code
  Unit
  \endcode] Vertical space to use for each of the top, middle, and bottom sections of the
  C-shaped statement input
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger StatementSectionHeight;)
+ (NSInteger)StatementSectionHeight;
/**
  [\code
  Unit
  \endcode] The minimum width of the top section of the C-shaped statement input (not
  including the statement’s notch width).
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger StatementMinimumConnectorWidth;)
+ (NSInteger)StatementMinimumConnectorWidth;
/**
  [\code
  UIColor
  \endcode] The default stroke color to use when rendering a block
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BlockStrokeDefaultColor;)
+ (NSInteger)BlockStrokeDefaultColor;
/**
  [\code
  UIColor
  \endcode] The stroke color to use when rendering a highlighted block
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BlockStrokeHighlightColor;)
+ (NSInteger)BlockStrokeHighlightColor;
/**
  [\code
  UIColor
  \endcode] The stroke color to use when rendering a disabled block
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BlockStrokeDisabledColor;)
+ (NSInteger)BlockStrokeDisabledColor;
/**
  [\code
  UIColor
  \endcode] The fill color to use when rendering a disabled block
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BlockFillDisabledColor;)
+ (NSInteger)BlockFillDisabledColor;
/**
  [\code
  Float
  \endcode] The default alpha value to use when rendering a block
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BlockDefaultAlpha;)
+ (NSInteger)BlockDefaultAlpha;
/**
  [\code
  Float
  \endcode] The alpha value to use when rendering a disabled block
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BlockDisabledAlpha;)
+ (NSInteger)BlockDisabledAlpha;
/**
  [\code
  Float
  \endcode] The alpha value to use when rendering the fill color of a dragged block
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BlockDraggingFillColorAlpha;)
+ (NSInteger)BlockDraggingFillColorAlpha;
/**
  [\code
  Float
  \endcode] The alpha value to use when rendering the stroke color of a dragged block
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BlockDraggingStrokeColorAlpha;)
+ (NSInteger)BlockDraggingStrokeColorAlpha;
/**
  [\code
  Float
  \endcode] The saturation multiplier to use when calculating a shadow block’s fill/stroke
  colors
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BlockShadowSaturationMultiplier;)
+ (NSInteger)BlockShadowSaturationMultiplier;
/**
  [\code
  Float
  \endcode] The brightness multiplier to use when calculating a shadow block’s fill/stroke
  colors
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BlockShadowBrightnessMultiplier;)
+ (NSInteger)BlockShadowBrightnessMultiplier;
/**
  [\code
  Bool
  \endcode] Flag indicating if blocks with no output or previous connection should be
  rendered with a “hat”.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BlockStartHat;)
+ (NSInteger)BlockStartHat;
/**
  [\code
  Size
  \endcode] The size to use when rendering a “start hat”.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger BlockStartHatSize;)
+ (NSInteger)BlockStartHatSize;
/**
  [\code
  Size
  \endcode] Minimum size of the inline connector
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MinimumInlineConnectorSize;)
+ (NSInteger)MinimumInlineConnectorSize;
/**
  Initializes the default layout config.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Core object that is required by \code
  Layout
  \endcode instances in order to provide:
  <ul>
    <li>
      Unit scaling between Blockly’s Workspace coordinate system and the UIView coordinate system
    </li>
    <li>
      UI configuration
    </li>
  </ul>
  All \code
  Layout
  \endcode instances in a single \code
  Layout
  \endcode tree should share the same single instance of
  \code
  LayoutEngine
  \endcode. If any of the nodes in a single tree use different instances of \code
  LayoutEngine
  \endcode,
  unexpected results may occur.
*/
SWIFT_CLASS_NAMED("LayoutEngine")
@interface BKYLayoutEngine : NSObject
/**
  The minimum scale that the engine can have, relative to the Workspace coordinate system.
*/
@property (nonatomic, readonly) CGFloat minimumScale;
/**
  The maximum scale that the engine can have, relative to the Workspace coordinate system.
*/
@property (nonatomic, readonly) CGFloat maximumScale;
/**
  The current scale of the UI, relative to the Workspace coordinate system.
  eg. scale = 2.0 means that a (10, 10) UIView point scales to a (5, 5) Workspace point.
*/
@property (nonatomic) CGFloat scale;
/**
  The scale that should be used inside popovers
*/
@property (nonatomic, readonly) CGFloat popoverScale;
/**
  Flag determining if \code
  Layout
  \endcode instances associated with this layout engine should be rendered
  in right-to-left (\code
  true
  \endcode) or left-to-right (\code
  false
  \endcode)..
*/
@property (nonatomic) BOOL rtl;
/**
  The UI configuration to use for this layout engine
*/
@property (nonatomic, strong) BKYLayoutConfig * _Nonnull config;
/**
  Using the current \code
  scale
  \endcode value, this method scales a point from the UIView coordinate system to
  the Workspace coordinate system.
  note:
  This does not translate a UIView point directly into a Workspace point, it only scales the
  magnitude of a UIView point into the Workspace coordinate system. For example, in RTL, more
  calculation would need to be done to get the UIView point’s translated Workspace point.
  \param point A point from the UIView coordinate system.


  returns:
  A point in the Workspace coordinate system.
*/
- (BKYWorkspacePoint)scaledWorkspaceVectorFromViewVector:(CGPoint)point;
/**
  Using the current \code
  scale
  \endcode value, this method scales a size from the UIView coordinate system
  to the Workspace coordinate system.
  \param size A size from the UIView coordinate system.


  returns:
  A size in the Workspace coordinate system.
*/
- (BKYWorkspaceSize)workspaceSizeFromViewSize:(CGSize)size;
/**
  Using the current \code
  scale
  \endcode value, this method scales a unit value from the UIView coordinate
  system to the Workspace coordinate system.
  \param unit A unit value from the UIView coordinate system.


  returns:
  A unit value in the Workspace coordinate system.
*/
- (CGFloat)workspaceUnitFromViewUnit:(CGFloat)unit;
/**
  Using the current \code
  scale
  \endcode value, this method scales a unit value from the Workspace coordinate
  system to the UIView coordinate system.
  \param unit A unit value from the Workspace coordinate system.


  returns:
  A unit value in the UIView coordinate system.
*/
- (CGFloat)viewUnitFromWorkspaceUnit:(CGFloat)unit;
/**
  Using the current \code
  scale
  \endcode value, this method scales a left-to-right point from the Workspace
  coordinate system to the UIView coordinate system.
  \param point A point from the Workspace coordinate system.


  returns:
  A point in the UIView coordinate system.
*/
- (CGPoint)viewPointFromWorkspacePoint:(BKYWorkspacePoint)point;
/**
  Using the current \code
  scale
  \endcode value, this method scales a (x, y) point from the Workspace coordinate
  system to the UIView coordinate system.
  \param x The x-coordinate of the point

  \param y The y-coordinate of the point


  returns:
  A point in the UIView coordinate system.
*/
- (CGPoint)viewPointFromWorkspacePoint:(CGFloat)x :(CGFloat)y;
/**
  Using the current \code
  scale
  \endcode value, this method scales a size from the Workspace coordinate
  system to the UIView coordinate system.
  \param size A size from the Workspace coordinate system.


  returns:
  A size in the UIView coordinate system.
*/
- (CGSize)viewSizeFromWorkspaceSize:(BKYWorkspaceSize)size;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  A subclass of \code
  LayoutEngine
  \endcode that adds properties specific to the default layout implementation.
*/
SWIFT_CLASS_NAMED("DefaultLayoutEngine")
@interface BKYDefaultLayoutEngine : BKYLayoutEngine
@end


/**
  A default implementation of \code
  LayoutFactory
  \endcode.
*/
SWIFT_CLASS_NAMED("DefaultLayoutFactory")
@interface BKYDefaultLayoutFactory : NSObject
/**
  Initializes the default layout factory.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Unregisters the \code
  FieldLayoutCreator
  \endcode for a given field type.
  \param fieldType The \code
  Field.Type
  \endcode

*/
- (void)unregisterLayoutCreatorForFieldType:(SWIFT_METATYPE(BKYField) _Nonnull)fieldType;
@end


@interface BKYDefaultLayoutFactory (SWIFT_EXTENSION(Blockly))
- (BKYBlockLayout * _Nullable)makeBlockLayoutWithBlock:(BKYBlock * _Nonnull)block engine:(BKYLayoutEngine * _Nonnull)engine error:(NSError * _Nullable * _Nullable)error;
- (BKYBlockGroupLayout * _Nullable)makeBlockGroupLayoutWithEngine:(BKYLayoutEngine * _Nonnull)engine error:(NSError * _Nullable * _Nullable)error;
- (BKYInputLayout * _Nullable)makeInputLayoutWithInput:(BKYInput * _Nonnull)input engine:(BKYLayoutEngine * _Nonnull)engine error:(NSError * _Nullable * _Nullable)error;
- (BKYFieldLayout * _Nullable)makeFieldLayoutWithField:(BKYField * _Nonnull)field engine:(BKYLayoutEngine * _Nonnull)engine error:(NSError * _Nullable * _Nullable)error;
@end


/**
  Controller for dragging blocks around in the workspace.
*/
SWIFT_CLASS_NAMED("Dragger")
@interface BKYDragger : NSObject
/**
  The workspace layout where blocks are being dragged
*/
@property (nonatomic, strong) BKYWorkspaceLayoutCoordinator * _Nullable workspaceLayoutCoordinator;
/**
  The number of active drags that are being recognized by the dragger.
*/
@property (nonatomic, readonly) NSInteger numberOfActiveDrags;
/**
  Disconnect the given block layout from any superior connections and start dragging it (and any of
  its connected block layouts) in the workspace.
  \param layout The given block layout

  \param touchPosition The initial touch position, specified in the Workspace coordinate
  system

*/
- (BOOL)startDraggingBlockLayout:(BKYBlockLayout * _Nonnull)layout touchPosition:(BKYWorkspacePoint)touchPosition error:(NSError * _Nullable * _Nullable)error;
/**
  Continue dragging a block layout (and any of its connected block layouts) in the workspace.
  \param layout The given block layout

  \param touchPosition The current touch position, specified in the Workspace coordinate
  system

*/
- (void)continueDraggingBlockLayout:(BKYBlockLayout * _Nonnull)layout touchPosition:(BKYWorkspacePoint)touchPosition;
/**
  Finish dragging a block layout (and any of its connected block layouts) in the workspace.
  \param layout The given block layout

*/
- (void)finishDraggingBlockLayout:(BKYBlockLayout * _Nonnull)layout;
/**
  Cancels dragging a block layout (and any of its connected block layouts) in the workspace.
  \param layout The \code
  BlockLayout
  \endcode.

*/
- (void)cancelDraggingBlockLayout:(BKYBlockLayout * _Nonnull)layout;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UITableView;
@class UITableViewCell;
@protocol BKYDropdownOptionsViewControllerDelegate;

/**
  View controller for selecting an option from inside a dropdown.
*/
SWIFT_CLASS_NAMED("DropdownOptionsViewController")
@interface BKYDropdownOptionsViewController : UITableViewController
/**
  The currently selected index.
*/
@property (nonatomic) NSInteger selectedIndex;
/**
  Delegate for events that occur on this controller
*/
@property (nonatomic, weak) id <BKYDropdownOptionsViewControllerDelegate> _Nullable delegate;
/**
  The font to render each cell
*/
@property (nonatomic, strong) UIFont * _Nonnull textLabelFont;
/**
  The color of the font on each cell
*/
@property (nonatomic, strong) UIColor * _Nullable textLabelColor;
/**
  The maximum size to use when displaying this view controller as a popover
*/
@property (nonatomic) CGSize maximumPopoverSize;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Delegate for events that occur on \code
  DropdownOptionsViewController
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("DropdownOptionsViewControllerDelegate")
@protocol BKYDropdownOptionsViewControllerDelegate
/**
  Event that is called when the user has selected an option for the drop-down field.
  \param viewController The view controller where this event occurred.

  \param optionIndex The selected option index.

*/
- (void)dropdownOptionsViewController:(BKYDropdownOptionsViewController * _Nonnull)viewController didSelectOptionIndex:(NSInteger)optionIndex;
@end

@class UIImage;
@protocol BKYDropdownViewDelegate;

/**
  A view that resembles a dropdown. It contains a text field with a dropdown arrow image.
  e.g.
  \code
   =========

  | ITEM  ▼ |

   =========

  \endcode*/
SWIFT_CLASS_NAMED("DropdownView")
@interface BKYDropdownView : UIView
/**
  The current text of the dropdown
*/
@property (nonatomic, copy) NSString * _Nullable text;
/**
  The font for the dropdown text
*/
@property (nonatomic, strong) UIFont * _Nullable textFont;
/**
  The color for the dropdown text
*/
@property (nonatomic, strong) UIColor * _Nullable textColor;
/**
  The background color of the area inside the dropdown
*/
@property (nonatomic) CGColorRef _Nullable dropDownBackgroundColor;
/**
  The horizontal spacing to use for elements within the dropdown
*/
@property (nonatomic) CGFloat horizontalSpacing;
/**
  The vertical spacing to use for elements within the dropdown
*/
@property (nonatomic) CGFloat verticalSpacing;
/**
  The dropdown border’s color
*/
@property (nonatomic) CGColorRef _Nullable borderColor;
/**
  The dropdown border’s width
*/
@property (nonatomic) CGFloat borderWidth;
/**
  The dropdown border’s corner radius
*/
@property (nonatomic) CGFloat borderCornerRadius;
/**
  The image to use for the drop down view
*/
@property (nonatomic, strong) UIImage * _Nullable dropDownArrowImage;
/**
  Delegate for receiving events that occur on this dropdown
*/
@property (nonatomic, weak) id <BKYDropdownViewDelegate> _Nullable delegate;
/**
  Initializer with an optional drop down arrow image.
  \param dropDownArrowImage [Optional] If specified, this image is used to populate
  \code
  self.dropDownArrowImage
  \endcode. If nil, \code
  DropDownView.defaultDropDownArrowImage()
  \endcode is used instead.

*/
- (nonnull instancetype)initWithDropDownArrowImage:(UIImage * _Nullable)dropDownArrowImage OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Calculates the required size of a theoretical \code
  DropDownView
  \endcode instance (\code
  dropDownView
  \endcode) based on
  if properties were set that instance.
  \param text Corresponds to setting \code
  dropDownView.text
  \endcode.

  \param dropDownArrowImage Corresponds to setting \code
  dropDownView.dropDownArrowImage
  \endcode.

  \param textFont Corresponds to setting \code
  dropDownView.labelFont
  \endcode.

  \param borderWidth Corresponds to setting \code
  dropDownView.borderWidth
  \endcode.

  \param horizontalSpacing Corresponds to setting \code
  dropDownView.horizontalSpacing
  \endcode.

  \param verticalSpacing Corresponds to setting \code
  dropDownView.verticalSpacing
  \endcode.


  returns:
  The required size of the theoretical instance \code
  dropDownView
  \endcode
*/
+ (CGSize)measureSizeWithText:(NSString * _Nonnull)text dropDownArrowImage:(UIImage * _Nullable)dropDownArrowImage textFont:(UIFont * _Nonnull)textFont borderWidth:(CGFloat)borderWidth horizontalSpacing:(CGFloat)horizontalSpacing verticalSpacing:(CGFloat)verticalSpacing;
/**
  Returns the default drop down arrow image for the dropdown view.

  returns:
  The \code
  UIImage
  \endcode containing the default drop down arrow.
*/
+ (UIImage * _Nullable)defaultDropDownArrowImage;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/**
  Delegate for events that occur on \code
  DropdownView
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("DropdownViewDelegate")
@protocol BKYDropdownViewDelegate
/**
  Event that is called when the user has tapped on the dropdown.
*/
- (void)dropDownDidReceiveTap;
@end

@protocol BKYEventManagerListener;

/**
  Manages the use of events across Blockly.
  This class is designed as a singleton instance, accessible via \code
  EventManager.sharedInstance
  \endcode.
  note:
  This class is not thread-safe and should only be accessed from the main thread.
*/
SWIFT_CLASS_NAMED("EventManager")
@interface BKYEventManager : NSObject
/**
  Shared instance.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BKYEventManager * _Nonnull sharedInstance;)
+ (BKYEventManager * _Nonnull)sharedInstance;
/**
  Sequential list of events queued up for firing.
*/
@property (nonatomic, readonly, copy) NSArray<BKYEvent *> * _Nonnull pendingEvents;
/**
  Flag that determines if the event manager is allowing any new events to be queued via
  \code
  addPendingEvent(:)
  \endcode. Defaults to \code
  true
  \endcode.
*/
@property (nonatomic) BOOL isEnabled;
/**
  The current group ID that is automatically assigned to new events with no group ID.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable currentGroupID;
/**
  A singleton instance for this class is accessible via \code
  EventManager.sharedInstance.
  \endcode
*/
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Queues an event to be fired in the future (via \code
  firePendingEvents()
  \endcode). However, this event will
  not be queued if \code
  self.isEnabled
  \endcode is set to \code
  false
  \endcode.
  If \code
  event.groupID
  \endcode is \code
  nil
  \endcode, it is automatically assigned the value of \code
  self.currentGroupID
  \endcode,
  by this method.
  \param event The \code
  BlocklyEvent
  \endcode to queue.

*/
- (void)addPendingEvent:(BKYEvent * _Nonnull)event;
/**
  Fires all pending events.
*/
- (void)firePendingEvents;
/**
  Generates a group UUID and pushes this new group ID to the group stack, effectively setting it to
  \code
  self.currentGroupID
  \endcode. Each new pending event will automatically be assigned to this group ID,
  if it is not already assigned to a group ID.
  Every call to \code
  pushNewGroup()
  \endcode needs to be balanced by a future call to \code
  popGroup()
  \endcode.
  note:
  It is not recommended to push a new group ID if \code
  self.currentGroupID
  \endcode is not \code
  nil
  \endcode.
  Doing this will result in an error in debug mode and a warning in release mode.
*/
- (void)pushNewGroup;
/**
  Pushes a given group ID to the group stack, effectively setting it to \code
  self.currentGroupID
  \endcode.
  Each new pending event will automatically be assigned to this group ID, if it is not already
  assigned to a group ID.
  Every call to \code
  pushGroup(groupID:)
  \endcode needs to be balanced by a future call to \code
  popGroup()
  \endcode.
  note:
  It is not recommended to push a group ID that differs from \code
  self.currentGroupID
  \endcode,
  if it is not \code
  nil
  \endcode. Doing this will result in an error in debug mode and a warning in release
  mode.
  \param groupID The groupID to push.

*/
- (void)pushGroupWithGroupID:(NSString * _Nonnull)groupID;
/**
  Pops the current group ID from the group stack.
  If the group stack is not empty, \code
  self.currentGroupID
  \endcode is assigned to the previously pushed group
  ID.
  If the group stack is empty, \code
  self.currentGroupID
  \endcode is assigned to \code
  nil
  \endcode.
  Each new pending event will automatically be assigned to the new value of \code
  self.currentGroupID
  \endcode,
  if it is not already assigned to a group ID.
*/
- (void)popGroup;
/**
  Adds a listener to \code
  EventManager
  \endcode.
  \param listener The \code
  EventManagerListener
  \endcode to add.

*/
- (void)addListener:(id <BKYEventManagerListener> _Nonnull)listener;
/**
  Removes a listener from \code
  EventManager
  \endcode.
  \param listener The \code
  EventManagerListener
  \endcode to remove.

*/
- (void)removeListener:(id <BKYEventManagerListener> _Nonnull)listener;
@end


/**
  Protocol for listening to when events are fired by \code
  EventManager
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("EventManagerListener")
@protocol BKYEventManagerListener
/**
  Method that is executed when an event manager fires an event.
  \param eventManager The \code
  EventManager
  \endcode firing the event.

  \param event The \code
  BlocklyEvent
  \endcode that was fired.

*/
- (void)eventManager:(BKYEventManager * _Nonnull)eventManager didFireEvent:(BKYEvent * _Nonnull)event;
@end


/**
  Input field.  Used for editable titles, variables, etc. This is an abstract class that defines the
  UI on the block.  Actual instances would be \code
  FieldLabel
  \endcode, \code
  FieldDropdown
  \endcode, etc.
*/
SWIFT_CLASS_NAMED("Field")
@interface BKYField : NSObject
/**
  The name of the field
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/**
  The input that owns this field
*/
@property (nonatomic, weak) BKYInput * _Nullable sourceInput;
/**
  The layout associated with this field.
*/
@property (nonatomic, weak) BKYFieldLayout * _Nullable layout;
/**
  Flag indicating if this field can be edited
*/
@property (nonatomic) BOOL editable;
/**
  Returns a copy of this field.
  note:
  This method needs to be implemented by a subclass of \code
  Field
  \endcode. Results are undefined if
  a \code
  Field
  \endcode subclass does not implement this method.

  returns:
  A copy of this field.
*/
- (BKYField * _Nonnull)copyField;
/**
  Sets the native value of this field from a serialized text value.
  note:
  This method needs to be implemented by a subclass of \code
  Field
  \endcode. Results are undefined if
  a \code
  Field
  \endcode subclass does not implement this method.
  \param text The serialized text value


  throws:

  \code
  BlocklyError
  \endcode: Thrown if the serialized text value could not be converted into the field’s
  native value.
*/
- (BOOL)setValueFromSerializedText:(NSString * _Nonnull)text error:(NSError * _Nullable * _Nullable)error;
/**
  Sends a notification to \code
  self.listeners
  \endcode that this field has been updated.
*/
- (void)notifyDidUpdateField;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface BKYField (SWIFT_EXTENSION(Blockly))
@end


@interface BKYField (SWIFT_EXTENSION(Blockly))
@end


/**
  Manages the registration of fields.
  This class is designed as a singleton instance, accessible via
  \code
  Field.JSONRegistry.sharedInstance
  \endcode.
*/
SWIFT_CLASS_NAMED("JSONRegistry")
@interface BKYFieldJSONRegistry : NSObject
/**
  Shared instance.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BKYFieldJSONRegistry * _Nonnull sharedInstance;)
+ (BKYFieldJSONRegistry * _Nonnull)sharedInstance;
/**
  A singleton instance for this class is accessible via \code
  Field.JSONRegistry.sharedInstance.
  \endcode
*/
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Unregisters a JSON creation handler for a given field key.
  \param type The key for a field type.

*/
- (void)unregisterType:(NSString * _Nonnull)type;
@end


@interface BKYField (SWIFT_EXTENSION(Blockly))
@end


/**
  An input field for a 0 to 360 angle.
*/
SWIFT_CLASS_NAMED("FieldAngle")
@interface BKYFieldAngle : BKYField
/**
  The current angle stored in this field.
*/
@property (nonatomic) NSInteger angle;
/**
  Initializes the angle field.
  \param name The name of this field.

  \param angle The initial angle for this field.

*/
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name angle:(NSInteger)angle OBJC_DESIGNATED_INITIALIZER;
- (BKYField * _Nonnull)copyField;
- (BOOL)setValueFromSerializedText:(NSString * _Nonnull)text error:(NSError * _Nullable * _Nullable)error;
@end

@protocol BKYFieldLayoutMeasurer;

/**
  Abstract class for a \code
  Field
  \endcode-based \code
  Layout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldLayout")
@interface BKYFieldLayout : BKYLayout
/**
  Object responsible for measuring the layout of this object.
*/
@property (nonatomic) Class <BKYFieldLayoutMeasurer> _Nonnull measurer;
/**
  The target field to layout
*/
@property (nonatomic, readonly, strong) BKYField * _Nonnull field;
/**
  Flag determining if user interaction should be enabled for the corresponding view
*/
@property (nonatomic, readonly) BOOL userInteractionEnabled;
/**
  Initializes the field layout.
  \param field The \code
  Field
  \endcode model object to create a layout for.

  \param engine The \code
  LayoutEngine
  \endcode to associate with this layout.

  \param measurer The \code
  FieldLayoutMeasurer.Type
  \endcode to measure this field.

*/
- (nonnull instancetype)initWithField:(BKYField * _Nonnull)field engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer OBJC_DESIGNATED_INITIALIZER;
- (void)performLayoutWithIncludeChildren:(BOOL)includeChildren;
/**
  Sets the native value of this field from a serialized text value.
  \param text The serialized text value


  throws:

  \code
  BlocklyError
  \endcode: Thrown if the serialized text value could not be converted into the field’s
  native value.
*/
- (BOOL)setValueFromSerializedText:(NSString * _Nonnull)text error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithEngine:(BKYLayoutEngine * _Nonnull)engine SWIFT_UNAVAILABLE;
@end


/**
  Class for a \code
  FieldAngle
  \endcode-based \code
  Layout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldAngleLayout")
@interface BKYFieldAngleLayout : BKYFieldLayout
/**
  The \code
  FieldAngle
  \endcode that backs this layout
*/
@property (nonatomic, readonly, strong) BKYFieldAngle * _Nonnull fieldAngle;
/**
  The text value that should be used when rendering this layout
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull textValue;
/**
  Initializes the angle field layout.
  \param fieldAngle The \code
  FieldAngle
  \endcode model for this layout.

  \param engine The \code
  LayoutEngine
  \endcode to associate with the new layout.

  \param measurer The \code
  FieldLayoutMeasurer.Type
  \endcode to measure this layout.

*/
- (nonnull instancetype)initWithFieldAngle:(BKYFieldAngle * _Nonnull)fieldAngle engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer OBJC_DESIGNATED_INITIALIZER;
- (void)didUpdateField:(BKYField * _Nonnull)field;
/**
  Updates \code
  self.fieldAngle
  \endcode from the given text value. If the value was changed, the layout tree
  is updated to reflect the change.
  \param text A valid integer that will be used to update \code
  self.fieldAngle
  \endcode. If this value
  is not a valid integer, \code
  self.fieldAngle
  \endcode is not updated.

*/
- (void)updateAngleFromText:(NSString * _Nonnull)text;
- (nonnull instancetype)initWithField:(BKYField * _Nonnull)field engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer SWIFT_UNAVAILABLE;
@end


/**
  Abstract view for rendering a \code
  FieldLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldView")
@interface BKYFieldView : BKYLayoutView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class BKYInsetTextField;
@class UIToolbar;

/**
  View for rendering a \code
  FieldAngleLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldAngleView")
@interface BKYFieldAngleView : BKYFieldView
/**
  The text field to render
*/
@property (nonatomic, readonly, strong) BKYInsetTextField * _Nonnull textField;
/**
  A toolbar that appears above the input keyboard
*/
@property (nonatomic, readonly, strong) UIToolbar * _Nonnull toolbar;
/**
  Initializes the angle field view.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/**
  Protocol for measuring the size of a \code
  Layout
  \endcode when it is rendered.
*/
SWIFT_PROTOCOL_NAMED("FieldLayoutMeasurer")
@protocol BKYFieldLayoutMeasurer
/**
  Measures and returns the amount of space needed to render a \code
  FieldLayout
  \endcode, in a \code
  UIView
  \endcode.
  \param layout The layout to measure

  \param scale The current scale of the layout’s \code
  workspaceLayout
  \endcode.


  returns:
  The amount of space needed, in UIView coordinates.
*/
+ (CGSize)measureLayout:(BKYFieldLayout * _Nonnull)layout scale:(CGFloat)scale;
@end


@interface BKYFieldAngleView (SWIFT_EXTENSION(Blockly)) <BKYFieldLayoutMeasurer>
+ (CGSize)measureLayout:(BKYFieldLayout * _Nonnull)layout scale:(CGFloat)scale;
@end

@class UITextField;

@interface BKYFieldAngleView (SWIFT_EXTENSION(Blockly)) <UITextFieldDelegate>
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField;
@end


/**
  An input field for a checkbox.
*/
SWIFT_CLASS_NAMED("FieldCheckbox")
@interface BKYFieldCheckbox : BKYField
/**
  \code
  true
  \endcode if the checkbox field is checked, \code
  false
  \endcode if it is not.
*/
@property (nonatomic) BOOL checked;
/**
  Initializes the checkbox field.
  \param name The name of this field.

  \param checked The initial value of the checkbox. \code
  true
  \endcode if it is checked, \code
  false
  \endcode if it
  is not.

*/
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name checked:(BOOL)checked OBJC_DESIGNATED_INITIALIZER;
- (BKYField * _Nonnull)copyField;
- (BOOL)setValueFromSerializedText:(NSString * _Nonnull)text error:(NSError * _Nullable * _Nullable)error;
@end


/**
  Class for a \code
  FieldCheckbox
  \endcode-based \code
  Layout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldCheckboxLayout")
@interface BKYFieldCheckboxLayout : BKYFieldLayout
/**
  The \code
  FieldCheckbox
  \endcode that backs this layout
*/
@property (nonatomic, readonly, strong) BKYFieldCheckbox * _Nonnull fieldCheckbox;
/**
  The checkbox value that should be used when rendering this layout
*/
@property (nonatomic, readonly) BOOL checked;
/**
  Initializes the checkbox field layout.
  \param fieldCheckbox The \code
  FieldCheckbox
  \endcode model for this layout.

  \param engine The \code
  LayoutEngine
  \endcode to associate with the new layout.

  \param measurer The \code
  FieldLayoutMeasurer.Type
  \endcode to measure this layout.

*/
- (nonnull instancetype)initWithFieldCheckbox:(BKYFieldCheckbox * _Nonnull)fieldCheckbox engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer OBJC_DESIGNATED_INITIALIZER;
- (void)didUpdateField:(BKYField * _Nonnull)field;
/**
  Updates \code
  self.fieldCheckbox
  \endcode from the given value. If the value was changed, the layout tree
  is updated to reflect the change.
  \param checked The value used to update \code
  self.fieldCheckbox
  \endcode.

*/
- (void)updateCheckbox:(BOOL)checked;
- (nonnull instancetype)initWithField:(BKYField * _Nonnull)field engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer SWIFT_UNAVAILABLE;
@end


/**
  View for rendering a \code
  FieldCheckboxLayout
  \endcode.
  Because there is no native checkbox on iOS, this is implemented using a \code
  UISwitch
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldCheckboxView")
@interface BKYFieldCheckboxView : BKYFieldView
/**
  Convenience property for accessing \code
  self.layout
  \endcode as a \code
  FieldCheckboxLayout
  \endcode
*/
@property (nonatomic, readonly, strong) BKYFieldCheckboxLayout * _Nullable fieldCheckboxLayout;
/**
  Initializes the checkbox field view.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface BKYFieldCheckboxView (SWIFT_EXTENSION(Blockly)) <BKYFieldLayoutMeasurer>
+ (CGSize)measureLayout:(BKYFieldLayout * _Nonnull)layout scale:(CGFloat)scale;
@end


/**
  An input field for a color value.
*/
SWIFT_CLASS_NAMED("FieldColor")
@interface BKYFieldColor : BKYField
/**
  The \code
  UIColor
  \endcode of this field.
*/
@property (nonatomic, strong) UIColor * _Nonnull color;
/**
  Initializes the color field.
  \param name The name of this field.

  \param color The initial \code
  UIColor
  \endcode to set for this field.

*/
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name color:(UIColor * _Nonnull)color OBJC_DESIGNATED_INITIALIZER;
- (BKYField * _Nonnull)copyField;
- (BOOL)setValueFromSerializedText:(NSString * _Nonnull)text error:(NSError * _Nullable * _Nullable)error;
@end


/**
  Class for a \code
  FieldColor
  \endcode-based \code
  Layout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldColorLayout")
@interface BKYFieldColorLayout : BKYFieldLayout
/**
  The \code
  FieldColor
  \endcode that backs this layout
*/
@property (nonatomic, readonly, strong) BKYFieldColor * _Nonnull fieldColor;
/**
  The checkbox value that should be used when rendering this layout
*/
@property (nonatomic, readonly, strong) UIColor * _Nonnull color;
/**
  Initializes the color field layout.
  \param fieldColor The \code
  FieldColor
  \endcode model for this layout.

  \param engine The \code
  LayoutEngine
  \endcode to associate with the new layout.

  \param measurer The \code
  FieldLayoutMeasurer.Type
  \endcode to measure this layout.

*/
- (nonnull instancetype)initWithFieldColor:(BKYFieldColor * _Nonnull)fieldColor engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer OBJC_DESIGNATED_INITIALIZER;
- (void)didUpdateField:(BKYField * _Nonnull)field;
/**
  Updates \code
  self.fieldColor
  \endcode from the given value. If the value was changed, the layout tree
  is updated to reflect the change.
  \param color The value used to update \code
  self.fieldColor
  \endcode.

*/
- (void)updateColor:(UIColor * _Nonnull)color;
- (nonnull instancetype)initWithField:(BKYField * _Nonnull)field engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer SWIFT_UNAVAILABLE;
@end

@class UICollectionView;
@class UICollectionViewCell;
@protocol BKYFieldColorPickerViewControllerDelegate;
@class UICollectionViewLayout;

/**
  View controller for selecting a color for a \code
  FieldColor
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldColorPickerViewController")
@interface BKYFieldColorPickerViewController : UICollectionViewController
/**
  Array of colors for a simple-grid color picker.
  From: https://github.com/google/closure-library/blob/master/closure/goog/ui/colorpicker.js
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull colors;
/**
  Preferred number of colors to display per row (this value may not be respected if there is
  not enough space available).
*/
@property (nonatomic) NSInteger preferredColorsPerRow;
/**
  The size of each color button
*/
@property (nonatomic) CGSize buttonSize;
/**
  The color field to display
*/
@property (nonatomic, strong) UIColor * _Nullable color;
/**
  Delegate for events that occur on this controller
*/
@property (nonatomic, weak) id <BKYFieldColorPickerViewControllerDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)refreshView;
- (nonnull instancetype)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/**
  Delegate for events that occur on \code
  FieldDropdownOptionsViewController
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("FieldColorPickerViewControllerDelegate")
@protocol BKYFieldColorPickerViewControllerDelegate
/**
  Event that is called when the user has selected a color for a color field.
  \param viewController The view controller where this event occurred.

  \param color The selected color.

*/
- (void)fieldColorPickerViewController:(BKYFieldColorPickerViewController * _Nonnull)viewController didPickColor:(UIColor * _Nonnull)color;
@end


/**
  View for rendering a \code
  FieldColorLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldColorView")
@interface BKYFieldColorView : BKYFieldView
/**
  Convenience property for accessing \code
  self.layout
  \endcode as a \code
  FieldColorLayout
  \endcode
*/
@property (nonatomic, readonly, strong) BKYFieldColorLayout * _Nullable fieldColorLayout;
/**
  Initializes the color field view.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface BKYFieldColorView (SWIFT_EXTENSION(Blockly)) <BKYFieldColorPickerViewControllerDelegate>
- (void)fieldColorPickerViewController:(BKYFieldColorPickerViewController * _Nonnull)viewController didPickColor:(UIColor * _Nonnull)color;
@end


@interface BKYFieldColorView (SWIFT_EXTENSION(Blockly)) <BKYFieldLayoutMeasurer>
+ (CGSize)measureLayout:(BKYFieldLayout * _Nonnull)layout scale:(CGFloat)scale;
@end


/**
  An input field for picking a date.
*/
SWIFT_CLASS_NAMED("FieldDate")
@interface BKYFieldDate : BKYField
/**
  The \code
  Date
  \endcode value of this field.
*/
@property (nonatomic, copy) NSDate * _Nonnull date;
/**
  Initializes the date field.
  \param name The name of this field.

  \param date The initial \code
  Date
  \endcode to set for this field.

*/
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name date:(NSDate * _Nonnull)date OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes for the date field.
  \param name The name of this field.

  \param stringDate String of the format “yyyy-MM-dd”. If the string couldn’t be parsed into a
  valid date, the current date is used instead.

*/
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name stringDate:(NSString * _Nonnull)stringDate;
- (BKYField * _Nonnull)copyField;
- (BOOL)setValueFromSerializedText:(NSString * _Nonnull)text error:(NSError * _Nullable * _Nullable)error;
/**
  Sets self.date based on a date string.
  \param stringDate String of the format “yyyy-MM-dd”. If the string could not be parsed into
  a valid date, self.date is not changed.

*/
- (void)setDateFromString:(NSString * _Nonnull)stringDate;
@end

@class NSDateFormatter;

/**
  Class for a \code
  FieldDate
  \endcode-based \code
  Layout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldDateLayout")
@interface BKYFieldDateLayout : BKYFieldLayout
/**
  The \code
  FieldDate
  \endcode that backs this layout
*/
@property (nonatomic, readonly, strong) BKYFieldDate * _Nonnull fieldDate;
/**
  The value that should be used when rendering this layout
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull textValue;
/**
  The date value that should be used when rendering this layout
*/
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
@property (nonatomic, readonly, strong) NSDateFormatter * _Nonnull dateFormatter;
/**
  Initializes the date field layout.
  \param fieldDate The \code
  FieldDate
  \endcode model for this layout.

  \param engine The \code
  LayoutEngine
  \endcode to associate with the new layout.

  \param measurer The \code
  FieldLayoutMeasurer.Type
  \endcode to measure this layout.

*/
- (nonnull instancetype)initWithFieldDate:(BKYFieldDate * _Nonnull)fieldDate engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer dateFormatter:(NSDateFormatter * _Nullable)dateFormatter OBJC_DESIGNATED_INITIALIZER;
- (void)didUpdateField:(BKYField * _Nonnull)field;
/**
  Updates \code
  self.fieldDate
  \endcode from the given value. If the value was changed, the layout tree
  is updated to reflect the change.
  \param date The value used to update \code
  self.fieldDate
  \endcode.

*/
- (void)updateDate:(NSDate * _Nonnull)date;
- (nonnull instancetype)initWithField:(BKYField * _Nonnull)field engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer SWIFT_UNAVAILABLE;
@end

@class UIDatePicker;

/**
  View for rendering a \code
  FieldDateLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldDateView")
@interface BKYFieldDateView : BKYFieldView
/**
  Convenience property for accessing \code
  self.layout
  \endcode as a \code
  FieldDateLayout
  \endcode
*/
@property (nonatomic, readonly, strong) BKYFieldDateLayout * _Nullable fieldDateLayout;
/**
  The text field to render the date
*/
@property (nonatomic, readonly, strong) BKYInsetTextField * _Nonnull textField;
/**
  The picker for choosing a date
*/
@property (nonatomic, readonly, strong) UIDatePicker * _Nonnull datePicker;
/**
  Initializes the date field view.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface BKYFieldDateView (SWIFT_EXTENSION(Blockly)) <BKYFieldLayoutMeasurer>
+ (CGSize)measureLayout:(BKYFieldLayout * _Nonnull)layout scale:(CGFloat)scale;
@end


@interface BKYFieldDateView (SWIFT_EXTENSION(Blockly)) <UITextFieldDelegate>
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string;
@end


/**
  An input field for selecting options from a dropdown menu.
*/
SWIFT_CLASS_NAMED("FieldDropdown")
@interface BKYFieldDropdown : BKYField
/**
  The currently selected index
*/
@property (nonatomic) NSInteger selectedIndex;
/**
  Initializes the dropdown field.
  \param name The name of this field.

  \param displayNames An array of display names to populate the dropdown.

  \param values An array of values to populate the dropdown.

  \param selectedIndex The currently selected index for the dropdown.


  throws:

  \code
  BlocklyError
  \endcode: Occurs if the size of the provided arrays do not match.
*/
- (nullable instancetype)initWithName:(NSString * _Nonnull)name displayNames:(NSArray<NSString *> * _Nonnull)displayNames values:(NSArray<NSString *> * _Nonnull)values selectedIndex:(NSInteger)selectedIndex error:(NSError * _Nullable * _Nullable)error;
- (BKYField * _Nonnull)copyField;
- (BOOL)setValueFromSerializedText:(NSString * _Nonnull)text error:(NSError * _Nullable * _Nullable)error;
@end


/**
  Class for a \code
  FieldDropdown
  \endcode-based \code
  Layout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldDropdownLayout")
@interface BKYFieldDropdownLayout : BKYFieldLayout
/**
  The \code
  FieldDropdown
  \endcode that backs this layout
*/
@property (nonatomic, readonly, strong) BKYFieldDropdown * _Nonnull fieldDropdown;
/**
  The currently selected index of \code
  self.options
  \endcode
*/
@property (nonatomic, readonly) NSInteger selectedIndex;
/**
  Initializes the dropdown field layout.
  \param fieldDropdown The \code
  FieldDropdown
  \endcode model for this layout.

  \param engine The \code
  LayoutEngine
  \endcode to associate with the new layout.

  \param measurer The \code
  FieldLayoutMeasurer.Type
  \endcode to measure this layout.

*/
- (nonnull instancetype)initWithFieldDropdown:(BKYFieldDropdown * _Nonnull)fieldDropdown engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer OBJC_DESIGNATED_INITIALIZER;
- (void)didUpdateField:(BKYField * _Nonnull)field;
/**
  Updates \code
  self.fieldDropdown.selectedIndex
  \endcode from the given value. If the value was changed, the
  layout tree is updated to reflect the change.
  \param selectedIndex The value used to update \code
  self.fieldDropdown.selectedIndex
  \endcode.

*/
- (void)updateSelectedIndex:(NSInteger)selectedIndex;
- (nonnull instancetype)initWithField:(BKYField * _Nonnull)field engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer SWIFT_UNAVAILABLE;
@end


/**
  View for rendering a \code
  FieldDropdownLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldDropdownView")
@interface BKYFieldDropdownView : BKYFieldView
/**
  Convenience property for accessing \code
  self.layout
  \endcode as a \code
  FieldDropdownLayout
  \endcode
*/
@property (nonatomic, readonly, strong) BKYFieldDropdownLayout * _Nullable fieldDropdownLayout;
/**
  Initializes the dropdown field view.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface BKYFieldDropdownView (SWIFT_EXTENSION(Blockly)) <BKYDropdownOptionsViewControllerDelegate>
- (void)dropdownOptionsViewController:(BKYDropdownOptionsViewController * _Nonnull)viewController didSelectOptionIndex:(NSInteger)optionIndex;
@end


@interface BKYFieldDropdownView (SWIFT_EXTENSION(Blockly)) <BKYDropdownViewDelegate>
- (void)dropDownDidReceiveTap;
@end


@interface BKYFieldDropdownView (SWIFT_EXTENSION(Blockly)) <BKYFieldLayoutMeasurer>
+ (CGSize)measureLayout:(BKYFieldLayout * _Nonnull)layout scale:(CGFloat)scale;
@end


/**
  An image field used for titles, labels, etc.
*/
SWIFT_CLASS_NAMED("FieldImage")
@interface BKYFieldImage : BKYField
/**
  The \code
  WorkspaceSize
  \endcode of this field.
*/
@property (nonatomic) BKYWorkspaceSize size;
/**
  The location of the image in this field.
  Specifies the location of a local image resource, either as an image asset name or a location
  relative to the main resource bundle of the app. As a fallback, this can specify the location
  of a URL web image to fetch.
*/
@property (nonatomic, copy) NSString * _Nonnull imageLocation;
/**
  The alt text for this field.
*/
@property (nonatomic, copy) NSString * _Nonnull altText;
/**
  Initializes the image field.
  \param name The name of this field.

  \param imageLocation The location of the image in this field. Specifies the location of a
  local image resource, either as an image asset name or a location relative to the main resource
  bundle of the app. As a fallback, this can specify the location of a URL web image to fetch.

  \param altText The alt text for this field.

*/
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name imageLocation:(NSString * _Nonnull)imageLocation size:(BKYWorkspaceSize)size altText:(NSString * _Nonnull)altText OBJC_DESIGNATED_INITIALIZER;
- (BKYField * _Nonnull)copyField;
- (BOOL)setValueFromSerializedText:(NSString * _Nonnull)text error:(NSError * _Nullable * _Nullable)error;
@end


/**
  Class for a \code
  FieldImage
  \endcode-based \code
  Layout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldImageLayout")
@interface BKYFieldImageLayout : BKYFieldLayout
/**
  The \code
  FieldImage
  \endcode that backs this layout
*/
@property (nonatomic, readonly, strong) BKYFieldImage * _Nonnull fieldImage;
/**
  The size of the image field, expressed as a Workspace coordinate system size
*/
@property (nonatomic, readonly) BKYWorkspaceSize size;
/**
  Initializes the image field layout.
  \param fieldImage The \code
  FieldImage
  \endcode model for this layout.

  \param engine The \code
  LayoutEngine
  \endcode to associate with the new layout.

  \param measurer The \code
  FieldLayoutMeasurer.Type
  \endcode to measure this layout.

*/
- (nonnull instancetype)initWithFieldImage:(BKYFieldImage * _Nonnull)fieldImage engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer OBJC_DESIGNATED_INITIALIZER;
- (void)didUpdateField:(BKYField * _Nonnull)field;
/**
  Asynchronously loads this layout’s image in the background and executes a callback on the main
  thread with the loaded image.
  \param completion The callback method that will be executed on completion of this method.
  The \code
  image
  \endcode parameter of the callback method contains the \code
  UIImage
  \endcode that was loaded. If it is
  \code
  nil
  \endcode, the image could not be loaded.

*/
- (void)loadImageWithCompletion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
- (nonnull instancetype)initWithField:(BKYField * _Nonnull)field engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer SWIFT_UNAVAILABLE;
@end


/**
  View for rendering a \code
  FieldImageLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldImageView")
@interface BKYFieldImageView : BKYFieldView
/**
  Convenience property for accessing \code
  self.layout
  \endcode as a \code
  FieldImageLayout
  \endcode
*/
@property (nonatomic, readonly, strong) BKYFieldImageLayout * _Nullable fieldImageLayout;
/**
  Initializes the image field view.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface BKYFieldImageView (SWIFT_EXTENSION(Blockly)) <BKYFieldLayoutMeasurer>
+ (CGSize)measureLayout:(BKYFieldLayout * _Nonnull)layout scale:(CGFloat)scale;
@end


/**
  An editable text field.
*/
SWIFT_CLASS_NAMED("FieldInput")
@interface BKYFieldInput : BKYField
/**
  The text value for the field
*/
@property (nonatomic, copy) NSString * _Nonnull text;
/**
  Initializes the input field.
  \param name The name of this field.

  \param text The initial text for this field.

*/
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name text:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
- (BKYField * _Nonnull)copyField;
- (BOOL)setValueFromSerializedText:(NSString * _Nonnull)text error:(NSError * _Nullable * _Nullable)error;
@end


/**
  Class for a \code
  FieldInput
  \endcode-based \code
  Layout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldInputLayout")
@interface BKYFieldInputLayout : BKYFieldLayout
/**
  The \code
  FieldInput
  \endcode that backs this layout
*/
@property (nonatomic, readonly, strong) BKYFieldInput * _Nonnull fieldInput;
/**
  The current text value that should be used when rendering this layout.
  This value is automatically set to \code
  self.fieldInput.text
  \endcode on initialization and
  whenever \code
  self.fieldInput.text
  \endcode is updated.
  However, it can be set to any value outside of these calls (e.g. for temporary input
  purposes).
*/
@property (nonatomic, copy) NSString * _Nonnull currentTextValue;
/**
  Initializes the input field layout.
  \param fieldInput The \code
  FieldInput
  \endcode model for this layout.

  \param engine The \code
  LayoutEngine
  \endcode to associate with this layout.

  \param measurer The \code
  FieldLayoutMeasurer.Type
  \endcode to measure this layout.

*/
- (nonnull instancetype)initWithFieldInput:(BKYFieldInput * _Nonnull)fieldInput engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer OBJC_DESIGNATED_INITIALIZER;
- (void)didUpdateField:(BKYField * _Nonnull)field;
/**
  Updates \code
  self.fieldInput
  \endcode from the given value. If the value was changed, the layout tree
  is updated to reflect the change.
  \param text The value used to update \code
  self.fieldInput
  \endcode.

*/
- (void)updateText:(NSString * _Nonnull)text;
- (nonnull instancetype)initWithField:(BKYField * _Nonnull)field engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer SWIFT_UNAVAILABLE;
@end


/**
  View for rendering a \code
  FieldInputLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldInputView")
@interface BKYFieldInputView : BKYFieldView
/**
  Convenience property for accessing \code
  self.layout
  \endcode as a \code
  FieldInputLayout
  \endcode
*/
@property (nonatomic, readonly, strong) BKYFieldInputLayout * _Nullable fieldInputLayout;
/**
  The text field to render
*/
@property (nonatomic, readonly, strong) BKYInsetTextField * _Nonnull textField;
/**
  Initializes the input field view.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface BKYFieldInputView (SWIFT_EXTENSION(Blockly)) <BKYFieldLayoutMeasurer>
+ (CGSize)measureLayout:(BKYFieldLayout * _Nonnull)layout scale:(CGFloat)scale;
@end


@interface BKYFieldInputView (SWIFT_EXTENSION(Blockly)) <UITextFieldDelegate>
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
@end


/**
  Non-editable text field. Used for titles, labels, etc.
*/
SWIFT_CLASS_NAMED("FieldLabel")
@interface BKYFieldLabel : BKYField
/**
  The text label of the field
*/
@property (nonatomic, copy) NSString * _Nonnull text;
/**
  Initializes the label field.
  \param name The name of this field.

  \param text The initial text of this field.

*/
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name text:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
- (BKYField * _Nonnull)copyField;
- (BOOL)setValueFromSerializedText:(NSString * _Nonnull)text error:(NSError * _Nullable * _Nullable)error;
@end


/**
  Class for a \code
  FieldLabel
  \endcode-based \code
  Layout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldLabelLayout")
@interface BKYFieldLabelLayout : BKYFieldLayout
/**
  The \code
  FieldLabel
  \endcode that backs this layout
*/
@property (nonatomic, readonly, strong) BKYFieldLabel * _Nonnull fieldLabel;
/**
  The value that should be used when rendering this layout
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
/**
  Initializes the label field layout.
  \param fieldLabel The \code
  FieldLabel
  \endcode model for this layout.

  \param engine The \code
  LayoutEngine
  \endcode to associate with the new layout.

  \param measurer The \code
  FieldLayoutMeasurer.Type
  \endcode to measure this layout.

*/
- (nonnull instancetype)initWithFieldLabel:(BKYFieldLabel * _Nonnull)fieldLabel engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer OBJC_DESIGNATED_INITIALIZER;
- (void)didUpdateField:(BKYField * _Nonnull)field;
- (nonnull instancetype)initWithField:(BKYField * _Nonnull)field engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer SWIFT_UNAVAILABLE;
@end


/**
  View for rendering a \code
  FieldLabelLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldLabelView")
@interface BKYFieldLabelView : BKYFieldView
/**
  Convenience property for accessing \code
  self.layout
  \endcode as a \code
  FieldLabelLayout
  \endcode
*/
@property (nonatomic, readonly, strong) BKYFieldLabelLayout * _Nullable fieldLabelLayout;
/**
  Initializes the label field view.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface BKYFieldLabelView (SWIFT_EXTENSION(Blockly)) <BKYFieldLayoutMeasurer>
+ (CGSize)measureLayout:(BKYFieldLayout * _Nonnull)layout scale:(CGFloat)scale;
@end



/**
  Protocol for events that occur on a \code
  Field
  \endcode instance.
*/
SWIFT_PROTOCOL_NAMED("FieldListener")
@protocol BKYFieldListener
/**
  Event that is fired when one of a field’s properties has changed.
  \param field The field that changed.

*/
- (void)didUpdateField:(BKYField * _Nonnull)field;
@end


@interface BKYFieldLayout (SWIFT_EXTENSION(Blockly)) <BKYFieldListener>
- (void)didUpdateField:(BKYField * _Nonnull)field;
@end




/**
  Text field for inputting a number value.
*/
SWIFT_CLASS_NAMED("FieldNumber")
@interface BKYFieldNumber : BKYField
/**
  The number value of the field.
  When setting this field, the resulting value may differ from the original value, in order to
  adapt to the \code
  self.minimumValue
  \endcode, \code
  self.maximumValue
  \endcode, and \code
  self.precision
  \endcode constraints.
*/
@property (nonatomic) double value;
/**
  The localized text representation of \code
  self.value
  \endcode
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull textValue;
/**
  Flag indicating if \code
  self.value
  \endcode is constrained to being an integer value.
*/
@property (nonatomic, readonly) BOOL isInteger;
/**
  Initializes the number field.
  \param name The name of this field.

  \param value The initial value of this field.

*/
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name value:(double)value OBJC_DESIGNATED_INITIALIZER;
- (BKYField * _Nonnull)copyField;
- (BOOL)setValueFromSerializedText:(NSString * _Nonnull)text error:(NSError * _Nullable * _Nullable)error;
/**
  Sets \code
  self.value
  \endcode from the given text, using the current default locale.
  \param text The localized text value.


  returns:
  \code
  true
  \endcode if the value was set successfully using the localized text, or \code
  false
  \endcode
  otherwise.
*/
- (BOOL)setValueFromLocalizedText:(NSString * _Nonnull)text;
@end


/**
  Class for a \code
  FieldNumber
  \endcode-based \code
  Layout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldNumberLayout")
@interface BKYFieldNumberLayout : BKYFieldLayout
/**
  The target \code
  FieldNumber
  \endcode to lay out
*/
@property (nonatomic, readonly, strong) BKYFieldNumber * _Nonnull fieldNumber;
/**
  The current text value that should be used to render the \code
  FieldNumber
  \endcode.
  This value is automatically set to \code
  self.fieldNumber.textValue
  \endcode on initialization and
  whenever \code
  setValueFromLocalizedText(:)
  \endcode is called.
  However, it can be set to any value outside of these calls (e.g. for temporary input
  purposes).
*/
@property (nonatomic, copy) NSString * _Nonnull currentTextValue;
/**
  Initializes the label number layout.
  \param fieldNumber The \code
  FieldNumber
  \endcode model for this layout.

  \param engine The \code
  LayoutEngine
  \endcode to associate with the new layout.

  \param measurer The \code
  FieldLayoutMeasurer.Type
  \endcode to measure this layout.

*/
- (nonnull instancetype)initWithFieldNumber:(BKYFieldNumber * _Nonnull)fieldNumber engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer OBJC_DESIGNATED_INITIALIZER;
- (void)didUpdateField:(BKYField * _Nonnull)field;
/**
  Convenience method that calls \code
  self.fieldNumber.setValueFromLocalizedText(text)
  \endcode and
  automatically sets \code
  self.currentTextValue
  \endcode to \code
  self.fieldNumber.textValue
  \endcode.
*/
- (void)setValueFromLocalizedText:(NSString * _Nonnull)text;
- (nonnull instancetype)initWithField:(BKYField * _Nonnull)field engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer SWIFT_UNAVAILABLE;
@end


/**
  View for rendering a \code
  FieldNumber
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldNumberView")
@interface BKYFieldNumberView : BKYFieldView
/**
  Convenience property accessing \code
  self.layout
  \endcode as \code
  FieldNumberLayout
  \endcode
*/
@property (nonatomic, readonly, strong) BKYFieldNumberLayout * _Nullable fieldNumberLayout;
/**
  The text field to render
*/
@property (nonatomic, readonly, strong) BKYInsetTextField * _Nonnull textField;
/**
  A toolbar that appears above the input keyboard
*/
@property (nonatomic, readonly, strong) UIToolbar * _Nonnull toolbar;
/**
  Initializes the number field view.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface BKYFieldNumberView (SWIFT_EXTENSION(Blockly)) <BKYFieldLayoutMeasurer>
+ (CGSize)measureLayout:(BKYFieldLayout * _Nonnull)layout scale:(CGFloat)scale;
@end


@interface BKYFieldNumberView (SWIFT_EXTENSION(Blockly)) <UITextFieldDelegate>
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField;
@end


/**
  An input for specifying a variable.
*/
SWIFT_CLASS_NAMED("FieldVariable")
@interface BKYFieldVariable : BKYField
/**
  The variable in this field
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull variable;
/**
  Initializes the variable field.
  \param name The name of this field.

  \param variable The initial variable name to set for this field.

*/
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name variable:(NSString * _Nonnull)variable OBJC_DESIGNATED_INITIALIZER;
- (BKYField * _Nonnull)copyField;
- (BOOL)setValueFromSerializedText:(NSString * _Nonnull)text error:(NSError * _Nullable * _Nullable)error;
/**
  Checks whether a string is a valid name.
  \param name The \code
  String
  \endcode to check.

*/
+ (BOOL)isValidName:(NSString * _Nonnull)name;
/**
  Sets the variable to a name.
  \param name The name to set.


  throws:

  \code
  BlocklyError
  \endcode: Occurs if the name is invalid. Currently, the only invalid name is an empty
  string.
*/
- (BOOL)setVariable:(NSString * _Nonnull)name error:(NSError * _Nullable * _Nullable)error;
@end

@class BKYNameManager;

/**
  Class for a \code
  FieldVariable
  \endcode-based \code
  Layout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldVariableLayout")
@interface BKYFieldVariableLayout : BKYFieldLayout
/**
  The \code
  FieldVariable
  \endcode that backs this layout
*/
@property (nonatomic, readonly, strong) BKYFieldVariable * _Nonnull fieldVariable;
/**
  The currently selected variable
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull variable;
/**
  Optional name manager that this field is scoped to.
*/
@property (nonatomic, weak) BKYNameManager * _Nullable nameManager;
/**
  Initializes the label field layout.
  \param fieldVariable The \code
  FieldVariable
  \endcode model for this layout.

  \param engine The \code
  LayoutEngine
  \endcode to associate with the new layout.

  \param measurer The \code
  FieldLayoutMeasurer.Type
  \endcode to measure this layout.

*/
- (nonnull instancetype)initWithFieldVariable:(BKYFieldVariable * _Nonnull)fieldVariable engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer OBJC_DESIGNATED_INITIALIZER;
- (void)didUpdateField:(BKYField * _Nonnull)field;
/**
  Changes \code
  self.fieldVariable.variable
  \endcode to use the given value. If the value was changed, the
  layout tree is updated to reflect the change.
  \param variable The value used to update \code
  self.fieldVariable.variable
  \endcode.

*/
- (void)changeToExistingVariable:(NSString * _Nonnull)variable;
/**
  Renames the variable on this layout to a new value, and tells the \code
  NameManager
  \endcode of the change.
  \param newName The new value for the variable on this layout.

*/
- (void)renameVariableTo:(NSString * _Nonnull)newName;
/**
  Removes the variable that’s currently stored on this layout.
*/
- (void)removeVariable;
/**
  Checks whether a string is a valid name.
  \param name The \code
  String
  \endcode to check.

*/
- (BOOL)isValidName:(NSString * _Nonnull)name;
/**
  Returns the total number of variables matching the variable set on this layout.

  returns:
  The count of variable fields.
*/
- (NSInteger)numberOfVariableReferences;
- (nonnull instancetype)initWithField:(BKYField * _Nonnull)field engine:(BKYLayoutEngine * _Nonnull)engine measurer:(Class <BKYFieldLayoutMeasurer> _Nonnull)measurer SWIFT_UNAVAILABLE;
@end


/**
  Listener for events that occur on \code
  NameManager
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("NameManagerListener")
@protocol BKYNameManagerListener
@optional
/**
  Event that is fired when a \code
  NameManager
  \endcode instance has added a new name to its list.
  \param nameManager The \code
  NameManager
  \endcode

  \param name The name that was added

*/
- (void)nameManager:(BKYNameManager * _Nonnull)nameManager didAddName:(NSString * _Nonnull)name;
/**
  Event that is fired when a \code
  NameManager
  \endcode instance has renamed a name to a different name.
  \param nameManager The \code
  NameManager
  \endcode

  \param oldName The old name

  \param newName The new name

*/
- (void)nameManager:(BKYNameManager * _Nonnull)nameManager didRenameName:(NSString * _Nonnull)oldName toName:(NSString * _Nonnull)newName;
/**
  Event that is fired during a request to remove a name from a \code
  NameManager
  \endcode instance. If any
  listener returns \code
  false
  \endcode from this event, the request to remove the name is ignored.
  \param nameManager The \code
  NameManager
  \endcode

  \param name The name to potentially remove


  returns:
  \code
  true
  \endcode if the name should be removed, \code
  false
  \endcode otherwise.
*/
- (BOOL)nameManager:(BKYNameManager * _Nonnull)nameManager shouldRemoveName:(NSString * _Nonnull)name;
/**
  Event that is fired when a \code
  NameManager
  \endcode instance has removed a name from its list.
  \param nameManager The \code
  NameManager
  \endcode

  \param name The name that was removed

*/
- (void)nameManager:(BKYNameManager * _Nonnull)nameManager didRemoveName:(NSString * _Nonnull)name;
@end


@interface BKYFieldVariableLayout (SWIFT_EXTENSION(Blockly)) <BKYNameManagerListener>
- (BOOL)nameManager:(BKYNameManager * _Nonnull)nameManager shouldRemoveName:(NSString * _Nonnull)name;
- (void)nameManager:(BKYNameManager * _Nonnull)nameManager didRenameName:(NSString * _Nonnull)oldName toName:(NSString * _Nonnull)newName;
@end


/**
  View for rendering a \code
  FieldVariableLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("FieldVariableView")
@interface BKYFieldVariableView : BKYFieldView
/**
  Convenience property for accessing \code
  self.layout
  \endcode as a \code
  FieldVariableLayout
  \endcode
*/
@property (nonatomic, readonly, strong) BKYFieldVariableLayout * _Nullable fieldVariableLayout;
/**
  Initializes the variable field view.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface BKYFieldVariableView (SWIFT_EXTENSION(Blockly)) <BKYFieldLayoutMeasurer>
+ (CGSize)measureLayout:(BKYFieldLayout * _Nonnull)layout scale:(CGFloat)scale;
@end


@interface BKYFieldVariableView (SWIFT_EXTENSION(Blockly)) <BKYDropdownViewDelegate>
- (void)dropDownDidReceiveTap;
@end


@interface BKYFieldVariableView (SWIFT_EXTENSION(Blockly)) <BKYDropdownOptionsViewControllerDelegate>
- (void)dropdownOptionsViewController:(BKYDropdownOptionsViewController * _Nonnull)viewController didSelectOptionIndex:(NSInteger)optionIndex;
@end



/**
  Helper class for loading images.
*/
SWIFT_CLASS_NAMED("ImageLoader")
@interface BKYImageLoader : NSObject
/**
  Returns an image with a given name in the main application bundle. As a fallback, it returns
  the image inside the associated bundle for the given class (typically, this will be the
  framework’s default bundle).
  note:
  Images are loaded via UIImage(imageNamed:), which means they are cached in the system
  by default after they are loaded.
  \param imageName The name of the image in a bundle’s asset catalog.

  \param anyClass The class that is requesting the image.


  returns:
  The image, either from the main application bundle or the default bundle for the
  given class.
*/
+ (UIImage * _Nullable)loadImageWithNamed:(NSString * _Nonnull)imageName forClass:(Class _Nonnull)anyClass;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum BKYInputType : NSInteger;
enum BKYInputAlignment : NSInteger;

/**
  Class representing an input (value, statement, or dummy). To create an \code
  Input
  \endcode object, use
  \code
  InputBuilder
  \endcode
*/
SWIFT_CLASS_NAMED("Input")
@interface BKYInput : NSObject
/**
  The type (value, statement, dummy) of the input.
*/
@property (nonatomic, readonly) enum BKYInputType type;
/**
  The name of the input.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/**
  A list of \code
  Field
  \endcode objects for the input.
*/
@property (nonatomic, readonly, copy) NSArray<BKYField *> * _Nonnull fields;
/**
  The \code
  Block
  \endcode that owns this input.
*/
@property (nonatomic, readonly, weak) BKYBlock * _Nullable sourceBlock;
/**
  The connection for this input, if required.
*/
@property (nonatomic, readonly, strong) BKYConnection * _Nullable connection;
/**
  The block that is connected to this input, if it exists.
*/
@property (nonatomic, readonly, strong) BKYBlock * _Nullable connectedBlock;
/**
  The shadow block that is connected to this input, if it exists
*/
@property (nonatomic, readonly, strong) BKYBlock * _Nullable connectedShadowBlock;
/**
  \code
  true
  \endcode if the input is visible, \code
  false
  \endcode otherwise. Defaults to \code
  true
  \endcode.
*/
@property (nonatomic) BOOL visible;
/**
  The alignment of the input
*/
@property (nonatomic) enum BKYInputAlignment alignment;
/**
  The layout associated with this input.
*/
@property (nonatomic, weak) BKYInputLayout * _Nullable layout;
/**
  Append a field to the end of \code
  self.fields
  \endcode.
  \param field The \code
  Field
  \endcode to append.

*/
- (void)appendField:(BKYField * _Nonnull)field;
/**
  Insert a field at the specified position.
  \param field The \code
  Field
  \endcode to insert.

  \param index The position to insert the field into \code
  self.fields
  \endcode.

*/
- (void)insertField:(BKYField * _Nonnull)field at:(NSInteger)index;
/**
  Remove a field from the input. If the field doesn’t exist, nothing happens.
  \param field The \code
  Field
  \endcode to remove.

*/
- (void)removeField:(BKYField * _Nonnull)field;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/**
  Represents types of inputs.
*/
typedef SWIFT_ENUM_NAMED(NSInteger, BKYInputType, "InputType") {
  BKYInputTypeValue = 0,
  BKYInputTypeStatement = 1,
  BKYInputTypeDummy = 2,
};

/**
  Represents valid alignments of a connection’s fields.
*/
typedef SWIFT_ENUM_NAMED(NSInteger, BKYInputAlignment, "Alignment") {
  BKYInputAlignmentLeft = -1,
  BKYInputAlignmentCenter = 0,
  BKYInputAlignmentRight = 1,
};


@interface BKYInput (SWIFT_EXTENSION(Blockly))
@end


@interface BKYInput (SWIFT_EXTENSION(Blockly))
@end


/**
  Builder for creating \code
  Input
  \endcode instances.
*/
SWIFT_CLASS_NAMED("InputBuilder")
@interface BKYInputBuilder : NSObject
/**
  The type (value, statement, dummy) of the \code
  Input
  \endcode.
*/
@property (nonatomic) enum BKYInputType type;
/**
  The type checks for the connection of this \code
  Input
  \endcode. Defaults to \code
  [String]?
  \endcode.
*/
@property (nonatomic, copy) NSArray<NSString *> * _Nullable connectionTypeChecks;
/**
  The name of the \code
  Input
  \endcode.
*/
@property (nonatomic, copy) NSString * _Nonnull name;
/**
  Specifies whether this \code
  Input
  \endcode is visible. Defaults to \code
  true
  \endcode.
*/
@property (nonatomic) BOOL visible;
/**
  Specifies the alignment for the \code
  Input
  \endcode. Defaults to \code
  Input.Alignment.Left
  \endcode.
*/
@property (nonatomic) enum BKYInputAlignment alignment;
/**
  A list of \code
  Field
  \endcode objects for the \code
  Input
  \endcode. Defaults to \code
  []
  \endcode.
*/
@property (nonatomic, readonly, copy) NSArray<BKYField *> * _Nonnull fields;
/**
  Initializes an input builder with a type and string.
  \param type The type of the \code
  Input
  \endcode.

  \param name The name of the \code
  Input
  \endcode.

*/
- (nonnull instancetype)initWithType:(enum BKYInputType)type name:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
/**
  Initialize a builder from an existing input. All values that are not specific to
  a single instance of a input will be copied in to the builder. Any associated layouts are not
  copied into the builder.
  \param input The \code
  Input
  \endcode to copy.

*/
- (nonnull instancetype)initWithInput:(BKYInput * _Nonnull)input OBJC_DESIGNATED_INITIALIZER;
/**
  Creates a new \code
  Input
  \endcode given the current state of the builder.

  returns:
  A new input
*/
- (BKYInput * _Nonnull)makeInput;
/**
  Appends a copy of a field to \code
  fields
  \endcode.
  \param field The \code
  Field
  \endcode to copy and append.

*/
- (void)appendField:(BKYField * _Nonnull)field;
/**
  Appends a copies of fields to \code
  fields
  \endcode.
  \param fields The list of \code
  Field
  \endcode’s to copy and append.

*/
- (void)appendFields:(NSArray<BKYField *> * _Nonnull)fields;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/**
  View for rendering a \code
  InputLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("InputView")
@interface BKYInputView : BKYLayoutView
/**
  The layout object to render
*/
@property (nonatomic, readonly, strong) BKYInputLayout * _Nullable inputLayout;
/**
  Returns the furthest descendant of the receiver in the view hierarchy that contains a specified
  point. Unlike the default implementation, block group view will not return itself, since it
  should return the owning block.
  \param point A point specified in the receiver’s local coordinate system (bounds).

  \param event The event that warranted a call to this method. If you are calling this method
  from outside your event-handling code, you may specify nil.


  returns:
  The view object that is the furthest descendent the current view and contains \code
  point
  \endcode.
*/
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
- (void)prepareForReuse;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A subclass of \code
  UITextField
  \endcode that allows for setting the padding around the text.
*/
SWIFT_CLASS_NAMED("InsetTextField")
@interface BKYInsetTextField : UITextField
/**
  The amount of padding that should be added around the text
*/
@property (nonatomic) BKYEdgeInsets insetPadding;
/**
  Returns the \code
  CGRect
  \endcode describing the bounds of the inset text, including padding.
  \param bounds The \code
  CGRect
  \endcode of the inset text only.


  returns:
  The \code
  CGRect
  \endcode including the padding.
*/
- (CGRect)textRectForBounds:(CGRect)bounds;
/**
  Returns the \code
  CGRect
  \endcode describing the bounds of the editing text, including padding.
  \param bounds The \code
  CGRect
  \endcode of the editing text only.


  returns:
  The \code
  CGRect
  \endcode including the padding.
*/
- (CGRect)editingRectForBounds:(CGRect)bounds;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Handles the translation from JSON strings to Swift \code
  Dictionary
  \endcode and \code
  Array
  \endcode.
*/
SWIFT_CLASS_NAMED("JSONHelper")
@interface BKYJSONHelper : NSObject
/**
  Convenience method for retrieving a JSON object from a String.
  \param string The JSON string


  returns:
  Either a Dictionary<String, Any> or Array<Any>
*/
+ (id _Nullable)makeJSONObjectWithString:(NSString * _Nonnull)string error:(NSError * _Nullable * _Nullable)error;
/**
  Convenience method for retrieving a JSON dictionary from a String.
  \param string A valid JSON string dictionary


  returns:
  The JSON dictionary
*/
+ (NSDictionary<NSString *, id> * _Nullable)makeJSONDictionaryWithString:(NSString * _Nonnull)string error:(NSError * _Nullable * _Nullable)error;
/**
  Convenience method for retrieving a JSON array from a String.
  \param string A valid JSON string array


  returns:
  The JSON array
*/
+ (NSArray * _Nullable)makeJSONArrayWithString:(NSString * _Nonnull)string error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface BKYLayout (SWIFT_EXTENSION(Blockly))
/**
  Property indicating whether the next change event that is sent out via \code
  sendChangeEvent(:)
  \endcode
  should be animated or not.
*/
@property (nonatomic, readonly) BOOL animateChangeEvent;
@end

@class BKYWorkspaceLayout;

/**
  Class for building a \code
  Layout
  \endcode hierarchy from a model object.
*/
SWIFT_CLASS_NAMED("LayoutBuilder")
@interface BKYLayoutBuilder : NSObject
/**
  Builds the entire layout tree for \code
  self.workspaceLayout
  \endcode based on the current model
  (ie. \code
  self.workspaceLayout.workspace
  \endcode).
  note:
  To increase performance during initialization, this should only be called after the entire
  workspace model has been constructed.

  throws:

  \code
  BlocklyError
  \endcode: Thrown if the layout tree could not be created for this workspace.
*/
- (BOOL)buildLayoutTreeForWorkspaceLayout:(BKYWorkspaceLayout * _Nonnull)workspaceLayout error:(NSError * _Nullable * _Nullable)error;
/**
  Builds the layout tree for a top-level block.
  \param block The top-level block


  throws:

  \code
  BlocklyError
  \endcode: Thrown if the block is not part of the workspace this builder is associated with,
  if the layout tree could not be created for this block, or if this block is not a top-level block.

  returns:
  A block group layout for the block, or nil if the block was not a top-level block.
*/
- (BKYBlockGroupLayout * _Nullable)buildLayoutTreeForTopLevelBlock:(BKYBlock * _Nonnull)block workspaceLayout:(BKYWorkspaceLayout * _Nonnull)workspaceLayout error:(NSError * _Nullable * _Nullable)error;
/**
  Builds an entire \code
  BlockGroupLayout
  \endcode tree from a given top-level block.
  \param blockGroupLayout The block group layout to build

  \param block The top-level block to use as the first child of \code
  blockGroupLayout
  \endcode.

*/
- (BOOL)buildLayoutTreeForBlockGroupLayout:(BKYBlockGroupLayout * _Nonnull)blockGroupLayout block:(BKYBlock * _Nonnull)block error:(NSError * _Nullable * _Nullable)error;
/**
  Builds a \code
  BlockLayout
  \endcode tree for a given block and assigns it to the block’s \code
  delegate
  \endcode property.
  This includes all connected blocks.
  \param block The block. If no \code
  BlockLayout
  \endcode has been associated with the block yet, a new
  one is created from \code
  self.layoutFactory
  \endcode.

  \param engine The \code
  LayoutEngine
  \endcode to associate with the returned \code
  BlockLayout
  \endcode.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if the layout could not be created for any of the block’s inputs.

  returns:
  The associated layout for the block.
*/
- (BKYBlockLayout * _Nullable)buildLayoutTreeForBlock:(BKYBlock * _Nonnull)block engine:(BKYLayoutEngine * _Nonnull)engine error:(NSError * _Nullable * _Nullable)error;
/**
  Builds an \code
  InputLayout
  \endcode tree for a given input and assigns it to the input’s \code
  delegate
  \endcode property.
  \param input The input. If no \code
  InputLayout
  \endcode has been associated with the input yet, a new
  one is created from \code
  self.layoutFactory
  \endcode.

  \param engine The \code
  LayoutEngine
  \endcode to associate with the returned \code
  InputLayout
  \endcode.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if the layout could not be created for any of the input’s fields.

  returns:
  The associated layout for the input.
*/
- (BKYInputLayout * _Nullable)buildLayoutTreeForInput:(BKYInput * _Nonnull)input engine:(BKYLayoutEngine * _Nonnull)engine error:(NSError * _Nullable * _Nullable)error;
/**
  Builds the layout for a given field and assigns it to the field’s \code
  delegate
  \endcode property.
  \param field The field. If no \code
  FieldLayout
  \endcode has been associated with the field yet, a new
  one is created from \code
  self.layoutFactory
  \endcode.

  \param engine The \code
  LayoutEngine
  \endcode to associate with the returned \code
  FieldLayout
  \endcode.


  throws:

  \code
  BlocklyError
  \endcode: Thrown by \code
  layoutFactory
  \endcode if the layout could not be created for the field.

  returns:
  The associated layout for the field.
*/
- (BKYFieldLayout * _Nullable)buildLayoutForField:(BKYField * _Nonnull)field engine:(BKYLayoutEngine * _Nonnull)engine error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



@interface BKYLayoutConfig (SWIFT_EXTENSION(Blockly))
@end



/**
  Listener for events that modify the parent/child relationships for this \code
  Layout
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("LayoutHierarchyListener")
@protocol BKYLayoutHierarchyListener
/**
  Event that is called when a layout has adopted a child layout.
  \param layout The parent \code
  Layout
  \endcode.

  \param childLayout The child \code
  Layout
  \endcode.

  \param oldParentLayout The previous value of \code
  childLayout.parentLayout
  \endcode prior to being
  adopted by \code
  layout
  \endcode

*/
- (void)layout:(BKYLayout * _Nonnull)layout didAdoptChildLayout:(BKYLayout * _Nonnull)childLayout fromOldParentLayout:(BKYLayout * _Nullable)oldParentLayout;
/**
  Event that is called when a layout has removed a child layout.
  \param layout The parent \code
  Layout
  \endcode.

  \param childLayout The child \code
  Layout
  \endcode.

*/
- (void)layout:(BKYLayout * _Nonnull)layout didRemoveChildLayout:(BKYLayout * _Nonnull)childLayout;
@end

@class UIViewController;

/**
  Protocol for handling popover requests that occur from a \code
  LayoutView
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("LayoutPopoverDelegate")
@protocol BKYLayoutPopoverDelegate
/**
  Event is called when a layout view requests to present a view controller.
  \param layoutView The \code
  LayoutView
  \endcode that made the request

  \param viewController The \code
  UIViewController
  \endcode to present

*/
- (void)layoutView:(BKYLayoutView * _Nonnull)layoutView requestedToPresentViewController:(UIViewController * _Nonnull)viewController;
/**
  Event that is called when a layout view requests to present a view controller as a popover.
  \param layoutView The \code
  LayoutView
  \endcode that made the request

  \param viewController The \code
  UIViewController
  \endcode to present

  \param fromView The \code
  UIView
  \endcode where the popover should pop up from


  returns:
  \code
  true
  \endcode if the \code
  viewController
  \endcode was presented. \code
  false
  \endcode otherwise.
*/
- (BOOL)layoutView:(BKYLayoutView * _Nonnull)layoutView requestedToPresentPopoverViewController:(UIViewController * _Nonnull)viewController fromView:(UIView * _Nonnull)fromView;
/**
  Event is called when a layout view requests to dismiss a view controller.
  \param layoutView The \code
  LayoutView
  \endcode that made the request.

  \param viewController The \code
  UIViewController
  \endcode to dismiss.

  \param animated Pass \code
  true
  \endcode to animate the transition.

*/
- (void)layoutView:(BKYLayoutView * _Nonnull)layoutView requestedToDismissPopoverViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
@end



@interface BKYLayoutView (SWIFT_EXTENSION(Blockly))
@end


/**
  Defines a protocol for objects that can be recycled for re-use.
*/
SWIFT_PROTOCOL_NAMED("Recyclable")
@protocol BKYRecyclable
/**
  Reset the object to a fresh state, releasing and recycling any resources associated with this
  object.
  note:
  This should not be called directly by clients. To recycle the object, it should be done
  via \code
  objectPool.recycleObject(object)
  \endcode.
*/
- (void)prepareForReuse;
@end


@interface BKYLayoutView (SWIFT_EXTENSION(Blockly)) <BKYRecyclable>
- (void)prepareForReuse;
@end


/**
  Object responsible for managing message strings within Blockly.
  \code
  MessageManager
  \endcode stores messages that are accessible by a unique key.
  It also allows the ability to store “synonym” keys, that map back to an existing message key,
  as another way to access an existing message.
  Here is an example of \code
  MessageManager
  \endcode in use:
  \code
  let manager = MessageManager.shared

  // Add a message for "LISTS_INLIST"
  manager.loadMessages(["LISTS_INLIST": "in list"])

  // Set synonyms of "LISTS_INLIST"
  manager.loadSynonyms(["LISTS_GET_INDEX_INPUT_IN_LIST": "LISTS_INLIST"])
  manager.loadSynonyms(["LISTS_SET_INDEX_INPUT_IN_LIST": "LISTS_INLIST"])

  manager.message(forKey: "LISTS_INLIST")                    // Returns "in list"
  manager.message(forKey: "LISTS_GET_INDEX_INPUT_IN_LIST")   // Returns "in list"
  manager.message(forKey: "LISTS_SET_INDEX_INPUT_IN_LIST")   // Returns "in list"

  \endcodeThis class is designed as a singleton instance, accessible via \code
  MessageManager.shared
  \endcode.
*/
SWIFT_CLASS_NAMED("MessageManager")
@interface BKYMessageManager : NSObject
/**
  Shared instance.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) BKYMessageManager * _Nonnull shared;)
+ (BKYMessageManager * _Nonnull)shared;
+ (void)setShared:(BKYMessageManager * _Nonnull)value;
/**
  A singleton instance for this class is accessible via \code
  MessageManager.shared.
  \endcode
*/
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Loads messages from a file containing a JSON object, where each object value is a
  message key mapped to a message value. When a message is stored, each key is
  automatically prefixed with the \code
  prefix
  \endcode parameter passed into the method.
  For example, assume a \code
  messages.json
  \endcode file that contains the following data:
  \code
  {
    "GREETING": "Welcome",
    "TODAY": "Today"
  }

  \endcodeHere’s how this file would be loaded and accessed in the manager:
  \code
  let manager = MessageManager.shared
  try manager.loadMessages(withPrefix: "PREFIX_", jsonPath: "messages.json")

  manager.message(forKey: "PREFIX_GREETING")  // Returns "Welcome"
  manager.message(forKey: "GREETING")         // Returns `nil` since there is no prefix

  \endcodenote:
  Message keys are case-insensitive. Any existing message is overwritten by
  any message in the given file with a duplicate key.
  \param prefix The prefix to automatically add to every message key.

  \param jsonPath Path to file containing a JSON object of message keys mapped to message
  values.

  \param bundle [Optional] If specified, the bundle to use when locating \code
  jsonPath
  \endcode.
  If \code
  nil
  \endcode is specified (the default value), \code
  Bundle.main
  \endcode is used.

*/
- (BOOL)loadMessagesWithPrefix:(NSString * _Nonnull)prefix jsonPath:(NSString * _Nonnull)jsonPath bundle:(NSBundle * _Nullable)bundle error:(NSError * _Nullable * _Nullable)error;
/**
  Loads messages from a given dictionary, where each pair is a message key mapped
  to a message value.
  note:
  Message keys are case-insensitive. Any existing message is overwritten by
  any message in the given dictionary with a duplicate key.
  \param messages Dictionary of message keys mapped to message values.

*/
- (void)loadMessages:(NSDictionary<NSString *, NSString *> * _Nonnull)messages;
/**
  Loads synonyms from a file containing a JSON object, where each object value is a synonym key
  mapped to a message key. When a synonym is stored, both the synonym key and message
  key are automatically prefixed with the \code
  prefix
  \endcode parameter passed into the method.
  For example, assume a \code
  synonyms.json
  \endcode file that contains the following data:
  \code
  {
    "MAIN_SCREEN_TITLE": "MAIN_TITLE",
    "ALTERNATE_SCREEN_TITLE": "MAIN_TITLE"
  }

  \endcodeAnd also a \code
  messages.json
  \endcode file that contains the following data:
  \code
  {
    "MAIN_TITLE": "Welcome",
  }

  \endcodeHere’s how these files would be loaded and accessed in the manager:
  \code
  let manager = MessageManager.shared
  try manager.loadMessages(withPrefix: "PREFIX_", jsonPath: "messages.json")
  try manager.loadSynonyms(withPrefix: "PREFIX_", jsonPath: "synonyms.json")

  // All of these calls return "Welcome"
  manager.message(forKey: "PREFIX_MAIN_SCREEN_TITLE")
  manager.message(forKey: "PREFIX_ALTERNATE_SCREEN_TITLE")
  manager.message(forKey: "PREFIX_TITLE")

  // All of these calls return `nil`
  manager.message(forKey: "MAIN_SCREEN_TITLE")
  manager.message(forKey: "ALTERNATE_SCREEN_TITLE")
  manager.message(forKey: "TITLE")

  \endcodenote:
  Synonym keys are case-insensitive. Any existing synonym is overwritten by
  any synonym in the given file with a duplicate key.
  \param prefix The prefix to automatically add to every synonym key and message key.

  \param jsonPath Path to file containing a JSON object of synonym keys mapped to
  message keys.

  \param bundle [Optional] If specified, the bundle to use when locating \code
  jsonPath
  \endcode.
  If \code
  nil
  \endcode is specified (the default value), \code
  Bundle.main
  \endcode is used.

*/
- (BOOL)loadSynonymsWithPrefix:(NSString * _Nonnull)prefix jsonPath:(NSString * _Nonnull)jsonPath bundle:(NSBundle * _Nullable)bundle error:(NSError * _Nullable * _Nullable)error;
/**
  Loads synonyms from a given dictionary, where each pair is a synonym key mapped to a message
  key.
  note:
  Synonym keys are case-insensitive. Any existing synonym is overwritten by
  any synonym in the given file with a duplicate key.
  \param synonyms Dictionary of synonym keys mapped to message keys.

*/
- (void)loadSynonyms:(NSDictionary<NSString *, NSString *> * _Nonnull)synonyms;
/**
  Returns a message value for a given message key or synonym key. Lookup prioritizes
  finding the key in the message table first, before looking in the synonym table.
  If no value could be found for the key from either the message table or synonym table,
  then \code
  nil
  \endcode is returned.
  note:
  Key lookups are case-insensitive.
  \param key A message key or synonym key.


  returns:
  The message for the given \code
  key
  \endcode, if it exists in the message table or synonym table.
  If the \code
  key
  \endcode could not be found, then \code
  nil
  \endcode is returned.
*/
- (NSString * _Nullable)messageForKey:(NSString * _Nonnull)key;
/**
  Decodes a given string by replacing any keys of the form “%{<key>}” found within the string with
  corresponding messages found inside this instance that use that key.
  Additionally, for any keys that are successfully replaced, this method recursively decodes
  those values, if those values contain references to more keys of the form “%{<key>}”.
  For example:
  \code
  let messageManager = MessageManager.shared
  messageManager.loadMessages([
    "bky_name": "Blockly",
    "bky_description": "This is the %{bky_name} library."
  ])
  messageManager.decodedString("%{bky_name}")                     // "Blockly"
  messageManager.decodedString("%{bky_description}")              // "This is the Blockly library."
  messageManager.decodedString("%{non_existent_message}")         // "%{non_existent_message}"
  messageManager.decodedString("Learn to code with #%{bky_name}") // "Learn to code with #Blockly"

  \endcodenote:
  Decoding a string with a key inside another key is not supported by this method
  (eg. \code
  "%{bky_{%bky_key2}key1}"
  \endcode). It’s recommended that this situation is avoided as the outcome
  of this cannot be guaranteed.
  \param string The string to decode.


  returns:
  The decoded version of \code
  string
  \endcode.
*/
- (NSString * _Nonnull)decodedString:(NSString * _Nonnull)string;
@end

@class NSString;

/**
  Helper class for transitioning between block mutation changes.
*/
SWIFT_CLASS_NAMED("MutatorHelper")
@interface BKYMutatorHelper : NSObject
/**
  Table that maps input names to a target connection. This is used for reconnecting inputs
  to previously connected connections.
*/
@property (nonatomic, readonly, strong) NSMapTable<NSString *, BKYConnection *> * _Nonnull savedTargetConnections;
/**
  Clears the mapping of inputs and target connections.
  note:
  This method is typically called once prior to beginning mutator changes inside a
  modal popover.
*/
- (void)clearSavedTargetConnections;
/**
  For each specified input, saves the mapping of the input’s name and its current target
  connection. This is to be used in conjunction with
  \code
  reconnectSavedTargetConnections(toInputs:layoutCoordinator:)
  \endcode.
  note:
  This method is typically called once prior to beginning mutator changes inside a
  modal popover.
  \param inputs The list of inputs whose target connections should be saved.

*/
- (void)saveTargetConnectionsFromInputs:(NSArray<BKYInput *> * _Nonnull)inputs;
/**
  Disconnects any target blocks connected to a specified list of inputs, iterating through the
  list in reverse order.
  note:
  This method is typically called every time before applying a mutation.
  \param inputs The inputs whose target connection should be disconnected.

  \param layoutCoordinator The \code
  WorkspaceLayoutCoordinator
  \endcode used for disconnecting those
  inputs.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if one of the inputs could not be disconnected.
*/
- (BOOL)disconnectConnectionsInReverseOrderFromInputs:(NSArray<BKYInput *> * _Nonnull)inputs layoutCoordinator:(BKYWorkspaceLayoutCoordinator * _Nonnull)layoutCoordinator error:(NSError * _Nullable * _Nullable)error;
/**
  Removes from the workspace any shadow blocks connected to a specified list of inputs,
  iterating through the list in reverse order.
  note:
  This method is typically called every time before applying a mutation.
  \param inputs The inputs whose shadow blocks should be removed from the workspace.

  \param layoutCoordinator The \code
  WorkspaceLayoutCoordinator
  \endcode used for removing those
  shadow blocks.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if one of the shadow blocks could not be disconnected.
*/
- (BOOL)removeShadowBlocksInReverseOrderFromInputs:(NSArray<BKYInput *> * _Nonnull)inputs layoutCoordinator:(BKYWorkspaceLayoutCoordinator * _Nonnull)layoutCoordinator error:(NSError * _Nullable * _Nullable)error;
/**
  For each specified input, reconnects the input to any target connection that was previously saved
  via \code
  saveTargetConnections(fromInputs:)
  \endcode.
  note:
  This method is typically called every time after a mutation has been applied.
  \param inputs The list of inputs that should be reconnected to the saved target connection.

  \param layoutCoordinator The \code
  WorkspaceLayoutCoordinator
  \endcode used for connecting the inputs
  with the saved target connections.

*/
- (BOOL)reconnectSavedTargetConnectionsToInputs:(NSArray<BKYInput *> * _Nonnull)inputs layoutCoordinator:(BKYWorkspaceLayoutCoordinator * _Nonnull)layoutCoordinator error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  A mutator for dynamically adding “else-if” and “else” statements to an “if” block.
*/
SWIFT_CLASS_NAMED("MutatorIfElse")
@interface BKYMutatorIfElse : NSObject
/**
  The target block that will be mutated
*/
@property (nonatomic, weak) BKYBlock * _Nullable block;
/**
  The associated layout of the mutator
*/
@property (nonatomic, weak) BKYMutatorLayout * _Nullable layout;
/**
  The number of else-if statements that should be added to the block
*/
@property (nonatomic) NSInteger elseIfCount;
/**
  Flag determining if an else statement should be added to the block
*/
@property (nonatomic) BOOL elseStatement;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface BKYMutatorIfElse (SWIFT_EXTENSION(Blockly))
- (BOOL)mutateBlockAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  Returns a list of inputs that have been created by this mutator on \code
  self.block
  \endcode, sorted in
  ascending order of their index within \code
  self.block.inputs
  \endcode.

  returns:
  A sorted list of inputs created by this mutator on \code
  self.block
  \endcode.
*/
- (NSArray<BKYInput *> * _Nonnull)sortedMutatorInputs;
@end


/**
  Abstract class for storing information on how to perform mutations for a \code
  Mutator
  \endcode, while still
  maintaining the block layout hierarchy.
*/
SWIFT_CLASS_NAMED("MutatorLayout")
@interface BKYMutatorLayout : BKYLayout
/**
  A workspace layout coordinator used for executing workspace-level operations related
  to this mutator.
*/
@property (nonatomic, weak) BKYWorkspaceLayoutCoordinator * _Nullable layoutCoordinator;
/**
  Performs any work required to maintain the integrity of the layout hierarchy, in addition to
  calling \code
  mutator.mutateBlock()
  \endcode.
  This is where pre-/post- mutation work should be handled.
  note:
  This method needs to be implemented by a subclass of \code
  MutatorLayout
  \endcode.
*/
- (BOOL)performMutationAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithEngine:(BKYLayoutEngine * _Nonnull)engine SWIFT_UNAVAILABLE;
@end


/**
  Associated layout class for \code
  MutatorIfElse
  \endcode.
*/
SWIFT_CLASS("_TtC7Blockly19MutatorIfElseLayout")
@interface MutatorIfElseLayout : BKYMutatorLayout
/**
  The number of else-if statements
*/
@property (nonatomic) NSInteger elseIfCount;
/**
  Flag determining if there is an else statement
*/
@property (nonatomic) BOOL elseStatement;
- (nonnull instancetype)initWithMutator:(BKYMutatorIfElse * _Nonnull)mutator engine:(BKYLayoutEngine * _Nonnull)engine OBJC_DESIGNATED_INITIALIZER;
- (void)performLayoutWithIncludeChildren:(BOOL)includeChildren;
- (BOOL)performMutationAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  For all inputs created by this mutator, save the currently connected target connection for
  each of them. Any subsequent call to \code
  performMutation()
  \endcode will ensure that these saved target
  connections remain connected to that original input, as long as the input still exists
  post-mutation.
*/
- (void)preserveCurrentInputConnections;
@end

@class UIButton;

/**
  View for rendering a \code
  MutatorIfElse
  \endcode.
*/
SWIFT_CLASS_NAMED("MutatorIfElseView")
@interface BKYMutatorIfElseView : BKYLayoutView
/**
  Convenience property accessing \code
  self.layout
  \endcode as \code
  MutatorIfElseLayout
  \endcode
*/
@property (nonatomic, readonly, strong) MutatorIfElseLayout * _Nullable mutatorIfElseLayout;
/**
  A button for opening the popover settings
*/
@property (nonatomic, readonly, strong) UIButton * _Nonnull popoverButton;
/**
  Initializes the number field view.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



/**
  A mutator for dynamically modifying the properties of a “procedure” caller block.
*/
SWIFT_CLASS_NAMED("MutatorProcedureCaller")
@interface BKYMutatorProcedureCaller : NSObject
/**
  The target block that will be mutated
*/
@property (nonatomic, weak) BKYBlock * _Nullable block;
/**
  The associated layout of the mutator
*/
@property (nonatomic, weak) BKYMutatorLayout * _Nullable layout;
/**
  The name of the procedure
*/
@property (nonatomic, copy) NSString * _Nonnull procedureName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface BKYMutatorProcedureCaller (SWIFT_EXTENSION(Blockly))
- (BOOL)mutateBlockAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  Returns a list of inputs that have been created by this mutator on \code
  self.block
  \endcode, sorted in
  ascending order of their index within \code
  self.block.inputs
  \endcode.

  returns:
  A sorted list of inputs created by this mutator on \code
  self.block
  \endcode.
*/
- (NSArray<BKYInput *> * _Nonnull)sortedMutatorInputs;
@end


/**
  Associated layout class for \code
  MutatorProcedureCaller
  \endcode.
*/
SWIFT_CLASS("_TtC7Blockly28MutatorProcedureCallerLayout")
@interface MutatorProcedureCallerLayout : BKYMutatorLayout
/**
  The name of the procedure
*/
@property (nonatomic, copy) NSString * _Nonnull procedureName;
- (nonnull instancetype)initWithMutator:(BKYMutatorProcedureCaller * _Nonnull)mutator engine:(BKYLayoutEngine * _Nonnull)engine OBJC_DESIGNATED_INITIALIZER;
- (void)performLayoutWithIncludeChildren:(BOOL)includeChildren;
- (BOOL)performMutationAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  For all inputs created by this mutator, save the currently connected target connection
  for each of them. Any subsequent call to \code
  performMutation()
  \endcode will ensure that these saved target
  connections remain connected to that original input, as long as the input still exists
  post-mutation.
*/
- (void)preserveCurrentInputConnections;
@end


/**
  A mutator for dynamically modifying the properties of a “procedure” definition block.
*/
SWIFT_CLASS_NAMED("MutatorProcedureDefinition")
@interface BKYMutatorProcedureDefinition : NSObject
/**
  The target block that will be mutated
*/
@property (nonatomic, weak) BKYBlock * _Nullable block;
/**
  The associated layout of the mutator
*/
@property (nonatomic, weak) BKYMutatorLayout * _Nullable layout;
/**
  Flag determining if this procedure returns a value
*/
@property (nonatomic, readonly) BOOL returnsValue;
/**
  Flag determining if statements can be attached to this procedure.
  NOTE: This value is always \code
  true
  \endcode if \code
  returnsValue
  \endcode is \code
  false
  \endcode.
*/
@property (nonatomic) BOOL allowStatements;
- (nonnull instancetype)initWithReturnsValue:(BOOL)returnsValue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface BKYMutatorProcedureDefinition (SWIFT_EXTENSION(Blockly))
- (BOOL)mutateBlockAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  Returns a list of inputs that have been created by this mutator on \code
  self.block
  \endcode, sorted in
  ascending order of their index within \code
  self.block.inputs
  \endcode.

  returns:
  A sorted list of inputs created by this mutator on \code
  self.block
  \endcode.
*/
- (NSArray<BKYInput *> * _Nonnull)sortedMutatorInputs;
@end


/**
  Associated layout class for \code
  MutatorProcedureDefinition
  \endcode.
*/
SWIFT_CLASS("_TtC7Blockly32MutatorProcedureDefinitionLayout")
@interface MutatorProcedureDefinitionLayout : BKYMutatorLayout
/**
  Notification that is fired after this layout has performed a mutation
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull NotificationDidPerformMutation;)
+ (NSNotificationName _Nonnull)NotificationDidPerformMutation;
/**
  Flag determining if this procedure returns a value
*/
@property (nonatomic, readonly) BOOL returnsValue;
/**
  Flag determining if statements can be attached to this procedure.
  NOTE: This value is always \code
  true
  \endcode if \code
  returnsValue
  \endcode is \code
  false
  \endcode.
*/
@property (nonatomic) BOOL allowStatements;
- (nonnull instancetype)initWithMutator:(BKYMutatorProcedureDefinition * _Nonnull)mutator engine:(BKYLayoutEngine * _Nonnull)engine OBJC_DESIGNATED_INITIALIZER;
- (void)performLayoutWithIncludeChildren:(BOOL)includeChildren;
- (BOOL)performMutationAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  For all inputs created by this mutator, save the currently connected target connection for
  each of them. Any subsequent call to \code
  performMutation()
  \endcode will ensure that these saved target
  connections remain connected to that original input, as long as the input still exists
  post-mutation.
*/
- (void)preserveCurrentInputConnections;
/**
  Returns whether or not the mutator contains duplicate parameters.

  returns:
  \code
  true
  \endcode if the mutator contains duplicate parameters. \code
  false
  \endcode otherwise.
*/
- (BOOL)containsDuplicateParameters;
@end


/**
  View for rendering a \code
  MutatorProcedureDefinition
  \endcode.
*/
SWIFT_CLASS_NAMED("MutatorProcedureDefinitionView")
@interface MutatorProcedureDefinitionView : BKYLayoutView
/**
  Convenience property accessing \code
  self.layout
  \endcode as \code
  MutatorProcedureDefinitionLayout
  \endcode
*/
@property (nonatomic, readonly, strong) MutatorProcedureDefinitionLayout * _Nullable mutatorProcedureDefinitionLayout;
/**
  A button for opening the popover settings
*/
@property (nonatomic, readonly, strong) UIButton * _Nonnull popoverButton;
/**
  Initializes the number field view.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/**
  A mutator for dynamically modifying an “if/return” block (which is to be used exclusively inside
  of a procedure definition block).
*/
SWIFT_CLASS_NAMED("MutatorProcedureIfReturn")
@interface BKYMutatorProcedureIfReturn : NSObject
/**
  The target block that will be mutated
*/
@property (nonatomic, weak) BKYBlock * _Nullable block;
/**
  The associated layout of the mutator
*/
@property (nonatomic, weak) BKYMutatorLayout * _Nullable layout;
/**
  Flag determining if this block should accept a return input value.
*/
@property (nonatomic) BOOL hasReturnValue;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface BKYMutatorProcedureIfReturn (SWIFT_EXTENSION(Blockly))
- (BOOL)mutateBlockAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  Returns a list of inputs that have been created by this mutator on \code
  self.block
  \endcode, sorted in
  ascending order of their index within \code
  self.block.inputs
  \endcode.

  returns:
  A sorted list of inputs created by this mutator on \code
  self.block
  \endcode.
*/
- (NSArray<BKYInput *> * _Nonnull)sortedMutatorInputs;
@end


/**
  Associated layout class for \code
  MutatorProcedureIfReturn
  \endcode.
*/
SWIFT_CLASS_NAMED("MutatorProcedureIfReturnLayout")
@interface BKYMutatorProcedureIfReturnLayout : BKYMutatorLayout
/**
  Flag determining if this procedure returns a value
*/
@property (nonatomic) BOOL hasReturnValue;
- (nonnull instancetype)initWithMutator:(BKYMutatorProcedureIfReturn * _Nonnull)mutator engine:(BKYLayoutEngine * _Nonnull)engine OBJC_DESIGNATED_INITIALIZER;
- (void)performLayoutWithIncludeChildren:(BOOL)includeChildren;
- (BOOL)performMutationAndReturnError:(NSError * _Nullable * _Nullable)error;
/**
  For all inputs created by this mutator, save the currently connected target connection for
  each of them. Any subsequent call to \code
  performMutation()
  \endcode will ensure that these saved target
  connections remain connected to that original input, as long as the input still exists
  post-mutation.
*/
- (void)preserveCurrentInputConnections;
@end


@interface BKYMutatorProcedureIfReturnLayout (SWIFT_EXTENSION(Blockly)) <BKYEventManagerListener>
- (void)eventManager:(BKYEventManager * _Nonnull)eventManager didFireEvent:(BKYEvent * _Nonnull)event;
@end


/**
  Manager for handling variable and procedure names.
  Any names added to this manager are done so without case sensitivity.
*/
SWIFT_CLASS_NAMED("NameManager")
@interface BKYNameManager : NSObject
/**
  A list of all names that have been added to the manager
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull names;
/**
  The number of names that have been used
*/
@property (nonatomic, readonly) NSInteger count;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Adds a given name to the list of names. If the same lowercase version of the name already exists
  in the list, an error is thrown.
  \param name The name to add.


  throws:

  \code
  BlocklyError
  \endcode: Thrown when trying to add a name that already exists.
*/
- (BOOL)addName:(NSString * _Nonnull)name error:(NSError * _Nullable * _Nullable)error;
/**
  Renames a name within the list.
  If \code
  oldName
  \endcode does not exist, nothing happens and \code
  false
  \endcode is returned.
  If \code
  oldName
  \endcode exists, but \code
  newName
  \endcode is already in the list, the \code
  newName
  \endcode is applied to all
  members with \code
  oldName
  \endcode.
  \param oldName The old name

  \param newName The new name


  returns:
  \code
  true
  \endcode if \code
  oldName
  \endcode existed in the list and was renamed to \code
  newName
  \endcode. \code
  false
  \endcode
  otherwise.
*/
- (BOOL)renameName:(NSString * _Nonnull)oldName to:(NSString * _Nonnull)newName;
/**
  Rename the display name of an existing name.
  If the display name does not exist in the list, nothing happens and \code
  false
  \endcode is returned.
  Here is an example of this behavior:
  \code
  nameManager.addName("Foo") // Adds "Foo" to the list with the key name
  nameManager.renameDisplayName("FOO") // Renames "Foo" to "FOO"
  nameManager.renameDisplayName("bar") // This does nothing since "bar" does not exist in the list

  \endcode\param displayName The new display name


  returns:
  \code
  true
  \endcode if the \code
  displayName
  \endcode existed in the list with different case sensitivity and
  was renamed to \code
  displayName
  \endcode. \code
  false
  \endcode otherwise.
*/
- (BOOL)renameDisplayName:(NSString * _Nonnull)displayName;
/**
  Attempts to remove a name from the list.
  NOTE: Any instance within \code
  self.listeners
  \endcode may cancel this request by implementing
  \code
  nameManager(:, shouldRemoveName:)
  \endcode and returning \code
  false
  \endcode.
  \param name The name to remove.


  returns:
  \code
  true
  \endcode if the name was found and removed. \code
  false
  \endcode otherwise.
*/
- (BOOL)removeName:(NSString * _Nonnull)name;
/**
  Clears the list of names.
*/
- (void)clearNames;
/**
  Returns if a given name has already been added.
  \param name The \code
  String
  \endcode to look up.


  returns:
  \code
  true
  \endcode if a \code
  name
  \endcode’s has been added. \code
  false
  \endcode otherwise.
*/
- (BOOL)containsName:(NSString * _Nonnull)name;
/**
  Returns whether two names are considered equal, according to the \code
  NameManager
  \endcode.
  \param name1 The first name to compare

  \param name2 The second name to compare


  returns:
  \code
  true
  \endcode if they are equal, \code
  false
  \endcode otherwise.
*/
- (BOOL)namesAreEqual:(NSString * _Nonnull)name1 :(NSString * _Nonnull)name2;
/**
  Generates a unique name within the scope of \code
  NameManager
  \endcode, based on a given name.
  If the base name is already unique, its name is returned directly.
  If the base name is not already unique, this method will add a unique number to the end of the
  name or automatically increment the name’s number if its suffix is already a number.
  e.g.
  \code
  let manager = NameManager()
  manager.generateUniqueName("foo", addToList: true) // Returns "foo"
  manager.generateUniqueName("foo", addToList: true) // Returns "foo2"
  manager.generateUniqueName("foo", addToList: true) // Returns "foo3"
  manager.generateUniqueName("Bar10", addToList: true) // Returns "Bar10"
  manager.generateUniqueName("Bar10", addToList: true) // Returns "Bar11"
  manager.generateUniqueName("Bar10", addToList: true) // Returns "Bar12"

  \endcode\param name The name upon which to base the unique name.

  \param addToList Whether to add the generated name to the used names list.


  returns:
  A unique name.
*/
- (NSString * _Nonnull)generateUniqueName:(NSString * _Nonnull)name addToList:(BOOL)addToList;
@end



/**
  Handles the management of recyclable objects.
*/
SWIFT_CLASS_NAMED("ObjectPool")
@interface BKYObjectPool : NSObject
/**
  Calls \code
  prepareForReuse()
  \endcode on the object and stores it for re-use later.
  note:
  Objects recycled through this method should be obtained through \code
  objectForType(:)
  \endcode or
  \code
  recyclableObjectForType(:)
  \endcode.
  \param object The object to recycle.

*/
- (void)recycleObject:(id <BKYRecyclable> _Nonnull)object;
/**
  Removes all recycled objects from memory.
*/
- (void)removeAllRecycledObjects;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BKYWorkspaceBezierPath;

/**
  Helper for drawing different shapes inside a \code
  WorkspaceBezierPath
  \endcode.
*/
SWIFT_CLASS_NAMED("PathHelper")
@interface BKYPathHelper : NSObject
/**
  Adds the path for drawing a next/previous notch.
  Draws:
  \code
  --
  \_/

  \endcode\param path The Bezier path to add to.

  \param drawLeftToRight True if the path should be drawn from left-to-right. False if it
  should be drawn right-to-left.

  \param notchWidth The width of the notch, specified as a Workspace coordinate system unit.

  \param notchHeight The height of the notch, specified as a Workspace coordinate system
  unit.

*/
+ (void)addNotchToPath:(BKYWorkspaceBezierPath * _Nonnull)path drawLeftToRight:(BOOL)drawLeftToRight notchWidth:(CGFloat)notchWidth notchHeight:(CGFloat)notchHeight;
/**
  Adds the path for drawing jagged teeth at the end of collapsed blocks.
  Draws:
  \code
  --
  |
  \
  /
  /
  \

  \endcode\param path The Bezier path to add to.

*/
+ (void)addJaggedTeethToPath:(BKYWorkspaceBezierPath * _Nonnull)path;
/**
  Adds the path for drawing a horizontal puzzle tab.
  Draws:
  \code
  |
  /\|
  |
  \/|
  |

  \endcode\param path The Bezier path to add to.

  \param drawTopToBottom True if the path should be drawn from top-to-bottom. False if it
  should be drawn bottom-to-top.

  \param puzzleTabWidth The width of the puzzle tab, specified as a Workspace coordinate
  system unit.

  \param puzzleTabHeight The height of the puzzle tab, specified as a Workspace coordinate
  system unit.

*/
+ (void)addPuzzleTabToPath:(BKYWorkspaceBezierPath * _Nonnull)path drawTopToBottom:(BOOL)drawTopToBottom puzzleTabWidth:(CGFloat)puzzleTabWidth puzzleTabHeight:(CGFloat)puzzleTabHeight;
/**
  Moves the path to start drawing the top-left corner.
  \param path The Bezier path.

  \param blockCornerRadius The block’s corner radius, specified as a Workspace coordinate
  system unit.

*/
+ (void)movePathToTopLeftCornerStart:(BKYWorkspaceBezierPath * _Nonnull)path blockCornerRadius:(CGFloat)blockCornerRadius;
/**
  Adds the path for drawing the rounded top-left corner.
  Draws:
  \code
  --
  /
  |

  \endcode\param path The Bezier path.

  \param blockCornerRadius The block’s corner radius, specified as a Workspace coordinate
  system unit.

*/
+ (void)addTopLeftCornerToPath:(BKYWorkspaceBezierPath * _Nonnull)path blockCornerRadius:(CGFloat)blockCornerRadius;
/**
  Adds the path for drawing a hat.
  Draws:
  \code
  ---
  /   \

  \endcode\param path The Bezier path.

  \param hatSize The size of the hat, specified as a Workspace coordinate system size.

*/
+ (void)addHatToPath:(BKYWorkspaceBezierPath * _Nonnull)path hatSize:(BKYWorkspaceSize)hatSize;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BKYWorkbenchViewController;

/**
  Coordinates the logic of all procedure blocks inside a \code
  WorkbenchViewController
  \endcode.
*/
SWIFT_CLASS_NAMED("ProcedureCoordinator")
@interface BKYProcedureCoordinator : NSObject
/**
  Block name for the procedure definition with no return value
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BLOCK_DEFINITION_NO_RETURN;)
+ (NSString * _Nonnull)BLOCK_DEFINITION_NO_RETURN;
/**
  Block name for the procedure definition with a return value
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BLOCK_DEFINITION_RETURN;)
+ (NSString * _Nonnull)BLOCK_DEFINITION_RETURN;
/**
  Block name for the procedure caller with no return value
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BLOCK_CALLER_NO_RETURN;)
+ (NSString * _Nonnull)BLOCK_CALLER_NO_RETURN;
/**
  Block name for the procedure caller with a return value
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BLOCK_CALLER_RETURN;)
+ (NSString * _Nonnull)BLOCK_CALLER_RETURN;
/**
  The workbench that this coordinator is synchronized with
*/
@property (nonatomic, readonly, weak) BKYWorkbenchViewController * _Nullable workbench;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Synchronizes this coordinator with a workbench so that all procedure definition/caller blocks
  in the main workspace are in a proper state.
  Here are some examples of what can be defined as a “proper” state:
  note:
  \code
  workbench
  \endcode must have its toolbox and workspace loaded, or else this method does nothing
  but assign \code
  workbench
  \endcode to \code
  self.workbench
  \endcode.
  <ul>
    <li>
      Each procedure definition block in the workspace is unique.
    </li>
    <li>
      All procedure definition blocks defined in the workspace must have an associated caller block
      in the toolbox.
    </li>
    <li>
      No procedure caller block exists in the workspace without an associated definition block.
    </li>
    <li>
      All parameters used in procedure definition blocks are created as variables inside
      \code
      workbench.variableNameManager
      \endcode.
    </li>
  </ul>
  \param workbench The \code
  WorkbenchViewController
  \endcode to synchronize with. This value is then
  set to \code
  self.workbench
  \endcode after this method is called.

*/
- (void)syncWithWorkbench:(BKYWorkbenchViewController * _Nullable)workbench;
@end


@interface BKYProcedureCoordinator (SWIFT_EXTENSION(Blockly)) <BKYNameManagerListener>
- (BOOL)nameManager:(BKYNameManager * _Nonnull)nameManager shouldRemoveName:(NSString * _Nonnull)name;
- (void)nameManager:(BKYNameManager * _Nonnull)nameManager didRenameName:(NSString * _Nonnull)oldName toName:(NSString * _Nonnull)newName;
@end


@interface BKYProcedureCoordinator (SWIFT_EXTENSION(Blockly)) <BKYEventManagerListener>
- (void)eventManager:(BKYEventManager * _Nonnull)eventManager didFireEvent:(BKYEvent * _Nonnull)event;
@end


/**
  Listener protocol for events that occur on a \code
  Workspace
  \endcode instance.
*/
SWIFT_PROTOCOL_NAMED("WorkspaceListener")
@protocol BKYWorkspaceListener
@optional
/**
  Event that is called when a block will be added to a workspace.
  \param workspace The workspace that will add a block.

  \param block The block that will be added.

*/
- (void)workspace:(BKYWorkspace * _Nonnull)workspace willAddBlock:(BKYBlock * _Nonnull)block;
/**
  Event that is called when a block has been added to a workspace.
  \param workspace The workspace that added a block.

  \param block The block that was added.

*/
- (void)workspace:(BKYWorkspace * _Nonnull)workspace didAddBlock:(BKYBlock * _Nonnull)block;
/**
  Event that is called when a block will be removed from a workspace.
  \param workspace The workspace that will remove a block.

  \param block The block that will be removed.

*/
- (void)workspace:(BKYWorkspace * _Nonnull)workspace willRemoveBlock:(BKYBlock * _Nonnull)block;
/**
  Event that is called when a block has been removed from a workspace.
  \param workspace The workspace that removed a block.

  \param block The block that was removed.

*/
- (void)workspace:(BKYWorkspace * _Nonnull)workspace didRemoveBlock:(BKYBlock * _Nonnull)block;
@end


@interface BKYProcedureCoordinator (SWIFT_EXTENSION(Blockly)) <BKYWorkspaceListener>
- (void)workspace:(BKYWorkspace * _Nonnull)workspace willAddBlock:(BKYBlock * _Nonnull)block;
- (void)workspace:(BKYWorkspace * _Nonnull)workspace didAddBlock:(BKYBlock * _Nonnull)block;
- (void)workspace:(BKYWorkspace * _Nonnull)workspace willRemoveBlock:(BKYBlock * _Nonnull)block;
- (void)workspace:(BKYWorkspace * _Nonnull)workspace didRemoveBlock:(BKYBlock * _Nonnull)block;
@end


@class BKYToolboxCategory;

/**
  An object for grouping categories of template blocks together, so users can add them to a
  workspace.
*/
SWIFT_CLASS_NAMED("Toolbox")
@interface BKYToolbox : NSObject
/**
  A list of all categories in the toolbox
*/
@property (nonatomic, readonly, copy) NSArray<BKYToolboxCategory *> * _Nonnull categories;
/**
  Flag to set all categories in the toolbox to readOnly
*/
@property (nonatomic) BOOL readOnly;
/**
  Adds a category to the toolbox.
  \param name The name of the new category.

  \param color The color of the new category.


  returns:
  The new category.
*/
- (BKYToolboxCategory * _Nonnull)addCategoryWithName:(NSString * _Nonnull)name color:(UIColor * _Nonnull)color;
/**
  Adds a category to the toolbox.
  \param name The name of the new category.

  \param color The color of the new category.

  \param icon The \code
  UIImage
  \endcode icon for the new category.


  returns:
  The new category.
*/
- (BKYToolboxCategory * _Nonnull)addCategoryWithName:(NSString * _Nonnull)name color:(UIColor * _Nonnull)color icon:(UIImage * _Nullable)icon;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface BKYToolbox (SWIFT_EXTENSION(Blockly))
@end


/**
  Data structure that contains \code
  Block
  \endcode instances.
*/
SWIFT_CLASS_NAMED("Workspace")
@interface BKYWorkspace : NSObject
/**
  A unique identifier used to identify this workspace for its lifetime
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull uuid;
/**
  Dictionary mapping all \code
  Block
  \endcode instances in this workspace to their \code
  uuid
  \endcode value
*/
@property (nonatomic, readonly, copy) NSDictionary<NSString *, BKYBlock *> * _Nonnull allBlocks;
/**
  Flag indicating if this workspace is set to read-only
*/
@property (nonatomic) BOOL readOnly;
/**
  The layout associated with this workspace
*/
@property (nonatomic, weak) BKYWorkspaceLayout * _Nullable layout;
/**
  Creates a Workspace, with no maximum capacity.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Returns a list of all blocks in the workspace whose \code
  topLevel
  \endcode property is true.

  returns:
  A list of all top-level blocks in the workspace.
*/
- (NSArray<BKYBlock *> * _Nonnull)topLevelBlocks;
/**
  Adds a block and all of its connected blocks to the workspace.
  \param rootBlock The root block to add.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if one of the blocks uses a uuid that is already being used by another
  block in the workspace or if adding the new set of blocks would exceed the maximum amount
  allowed.
*/
- (BOOL)addBlockTree:(BKYBlock * _Nonnull)rootBlock error:(NSError * _Nullable * _Nullable)error;
/**
  Removes a given block and all of its connected child blocks from the workspace.
  \param rootBlock The root block to remove.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if the tree of blocks could not be removed from the workspace.
*/
- (BOOL)removeBlockTree:(BKYBlock * _Nonnull)rootBlock error:(NSError * _Nullable * _Nullable)error;
/**
  Deep copies a block and adds all of the copied blocks into the workspace.
  \param rootBlock The root block to copy

  \param editable Sets whether each block is \code
  editable
  \endcode or not

  \param position The position of where the copied block should be placed in the workspace.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if the block could not be copied

  returns:
  The root block that was copied
*/
- (BKYBlock * _Nullable)copyBlockTree:(BKYBlock * _Nonnull)rootBlock editable:(BOOL)editable position:(BKYWorkspacePoint)position error:(NSError * _Nullable * _Nullable)error;
/**
  Returns if this block has been added to the workspace.
  \param block The \code
  Block
  \endcode to check.


  returns:
  \code
  true
  \endcode if this block has been added to the workspace. \code
  false
  \endcode otherwise.
*/
- (BOOL)containsBlock:(BKYBlock * _Nonnull)block;
/**
  For each top-level block tree in the workspace, deactivates those that contain blocks exceeding
  a given threshold and activates those that don’t exceed the given threshold.
  note:
  This method should only be called for toolbox categories or trash cans. It is not
  intended to be used for the main editing workspace.
  \param threshold The maximum number of blocks that a block tree may contain before it is
  disabled.

*/
- (void)deactivateBlockTreesForGroupsGreaterThan:(NSInteger)threshold;
/**
  Finds all blocks that have a field using a specific variable name.
  <ul>
    <li>
      param name: The name to search
    </li>
  </ul>
*/
- (NSArray<BKYBlock *> * _Nonnull)allVariableBlocksForName:(NSString * _Nonnull)name;
@end

@class BKYWorkspaceFlowItem;

/**
  Subclass of Workspace that should be used to populate a \code
  WorkspaceFlowLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("WorkspaceFlow")
@interface BKYWorkspaceFlow : BKYWorkspace
/**
  List of all elements that have been added
*/
@property (nonatomic, readonly, copy) NSArray<BKYWorkspaceFlowItem *> * _Nonnull items;
- (BOOL)addBlockTree:(BKYBlock * _Nonnull)rootBlock error:(NSError * _Nullable * _Nullable)error;
- (BOOL)removeBlockTree:(BKYBlock * _Nonnull)rootBlock error:(NSError * _Nullable * _Nullable)error;
/**
  Adds a gap between the last block that was added and the next block that will be added.
  note:
  Trailing gaps are truncated and ignored on layout.
  \param gap The gap space, expressed as a Workspace coordinate system unit

*/
- (void)addGap:(CGFloat)gap;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Defines information on how each item should be laid out in the layout.
*/
SWIFT_CLASS_NAMED("Item")
@interface BKYWorkspaceFlowItem : NSObject
/**
  The root block for this item.
*/
@property (nonatomic, readonly, strong) BKYBlock * _Nullable rootBlock;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Groups a collection of blocks together, for use in a \code
  Toolbox
  \endcode.
*/
SWIFT_CLASS_NAMED("Category")
@interface BKYToolboxCategory : BKYWorkspaceFlow
/**
  The name of the category
*/
@property (nonatomic, copy) NSString * _Nonnull name;
/**
  The color of the category
*/
@property (nonatomic, strong) UIColor * _Nonnull color;
/**
  An icon used to represent the category
*/
@property (nonatomic, strong) UIImage * _Nullable icon;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface BKYToolbox (SWIFT_EXTENSION(Blockly))
/**
  Creates a new \code
  Toolbox
  \endcode from an XML string.
  \param xmlString The string that contains this toolbox’s data.

  \param factory The \code
  BlockFactory
  \endcode to use to build blocks.


  throws:

  \code
  BlocklyError
  \endcode: Occurs if there is a problem parsing the xml (eg. insufficient data,
  malformed data, or contradictory data).

  returns:
  A \code
  Toolbox
  \endcode
*/
+ (BKYToolbox * _Nullable)makeToolboxWithXmlString:(NSString * _Nonnull)xmlString factory:(BKYBlockFactory * _Nonnull)factory error:(NSError * _Nullable * _Nullable)error;
@end

enum BKYToolboxCategoryListViewControllerOrientation : NSInteger;
@class BKYToolboxLayout;
@protocol BKYToolboxCategoryListViewControllerDelegate;

/**
  A view for displaying a vertical list of categories from a \code
  Toolbox
  \endcode.
*/
SWIFT_CLASS_NAMED("ToolboxCategoryListViewController")
@interface BKYToolboxCategoryListViewController : UICollectionViewController
/**
  The orientation of how the categories should be laid out
*/
@property (nonatomic, readonly) enum BKYToolboxCategoryListViewControllerOrientation orientation;
/**
  The toolbox layout to display
*/
@property (nonatomic, strong) BKYToolboxLayout * _Nullable toolboxLayout;
/**
  The category that the user has currently selected
*/
@property (nonatomic, strong) BKYToolboxCategory * _Nullable selectedCategory;
/**
  Delegate for handling category selection events
*/
@property (nonatomic, weak) id <BKYToolboxCategoryListViewControllerDelegate> _Nullable delegate;
/**
  Initializes the toolbox category list view controller.
  \param orientation The \code
  Orientation
  \endcode for the view.

*/
- (nonnull instancetype)initWithOrientation:(enum BKYToolboxCategoryListViewControllerOrientation)orientation OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
/**
  Refreshes the UI based on the current version of \code
  self.toolbox
  \endcode.
*/
- (void)refreshView;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

/**
  Possible view orientations for the toolbox category list
*/
typedef SWIFT_ENUM_NAMED(NSInteger, BKYToolboxCategoryListViewControllerOrientation, "Orientation") {
  BKYToolboxCategoryListViewControllerOrientationHorizontal = 0,
  BKYToolboxCategoryListViewControllerOrientationVertical = 1,
};


@interface BKYToolboxCategoryListViewController (SWIFT_EXTENSION(Blockly)) <UICollectionViewDelegateFlowLayout>
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/**
  Handler for events that occur on \code
  ToolboxCategoryListViewController
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("ToolboxCategoryListViewControllerDelegate")
@protocol BKYToolboxCategoryListViewControllerDelegate
/**
  Event that occurs when a category has been selected.
*/
- (void)toolboxCategoryListViewController:(BKYToolboxCategoryListViewController * _Nonnull)controller didSelectCategory:(BKYToolboxCategory * _Nonnull)category;
/**
  Event that occurs when the category selection has been deselected.
*/
- (void)toolboxCategoryListViewControllerDidDeselectCategory:(BKYToolboxCategoryListViewController * _Nonnull)controller;
@end

@protocol BKYWorkspaceViewControllerDelegate;
@class UIScrollView;
@class BKYViewFactory;

/**
  A view for displaying the blocks inside of a \code
  Toolbox.Category
  \endcode.
*/
SWIFT_CLASS_NAMED("ToolboxCategoryViewController")
@interface BKYToolboxCategoryViewController : UIViewController
/**
  The toolbox layout to display
*/
@property (nonatomic, strong) BKYToolboxLayout * _Nullable toolboxLayout;
/**
  The current category being displayed
*/
@property (nonatomic, readonly, strong) BKYToolboxCategory * _Nullable category;
/**
  The view containing any UI elements for the header - currently, the “Add variable” button.
*/
@property (nonatomic, strong) UIView * _Nonnull headerView;
/**
  Currently unused - any buttons that go in the footer
*/
@property (nonatomic, strong) UIView * _Nonnull footerView;
/**
  Accessor for the workspace view controller delegate, so touch functionality can be set easily
*/
@property (nonatomic, strong) id <BKYWorkspaceViewControllerDelegate> _Nullable delegate;
/**
  The scroll view from the toolbox workspace’s view controller.
*/
@property (nonatomic, readonly, strong) UIScrollView * _Nonnull workspaceScrollView;
- (nonnull instancetype)initWithViewFactory:(BKYViewFactory * _Nonnull)viewFactory orientation:(enum BKYToolboxCategoryListViewControllerOrientation)orientation variableNameManager:(BKYNameManager * _Nullable)variableNameManager OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
/**
  Shows the contents of a given category and automatically resizes view’s size to
  completely fit the size of the contents.
  \param category The \code
  Category
  \endcode to show.

  \param animated Flag indicating if resizing the view’s size should be animated.

*/
- (void)showCategory:(BKYToolboxCategory * _Nonnull)category animated:(BOOL)animated;
/**
  Hides any open category and automatically resizes the view’s size to \code
  (0, 0)
  \endcode.
  \param animated Flag indicating if resizing the view’s size should be animated.

*/
- (void)hideCategoryWithAnimated:(BOOL)animated;
/**
  Called when the “Add variable” button is tapped. Shows the add variable alert.
*/
- (void)didTapAddButton:(UIButton * _Nonnull)_;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface BKYToolboxCategoryViewController (SWIFT_EXTENSION(Blockly)) <BKYNameManagerListener>
- (void)nameManager:(BKYNameManager * _Nonnull)nameManager didAddName:(NSString * _Nonnull)name;
- (void)nameManager:(BKYNameManager * _Nonnull)nameManager didRenameName:(NSString * _Nonnull)oldName toName:(NSString * _Nonnull)newName;
- (void)nameManager:(BKYNameManager * _Nonnull)nameManager didRemoveName:(NSString * _Nonnull)name;
@end

enum BKYWorkspaceFlowLayoutDirection : NSInteger;

/**
  Class responsible for maintaining associated \code
  WorkspaceFlowLayout
  \endcode instances for each
  \code
  Toolbox.Category
  \endcode inside of a \code
  Toolbox
  \endcode.
  note:
  The \code
  Toolbox
  \endcode itself does not have an associated \code
  Layout
  \endcode instance.
*/
SWIFT_CLASS_NAMED("ToolboxLayout")
@interface BKYToolboxLayout : NSObject
/**
  The associated toolbox
*/
@property (nonatomic, readonly, strong) BKYToolbox * _Nonnull toolbox;
/**
  The layout direction to use when creating new \code
  WorkspaceFlowLayout
  \endcode instances for each
  category in \code
  toolbox
  \endcode
*/
@property (nonatomic, readonly) enum BKYWorkspaceFlowLayoutDirection layoutDirection;
/**
  The layout engine to use when creating new \code
  WorkspaceFlowLayout
  \endcode instances for each
  category in \code
  toolbox
  \endcode
*/
@property (nonatomic, readonly, strong) BKYLayoutEngine * _Nonnull engine;
/**
  The layout builder to use when creating new \code
  WorkspaceFlowLayout
  \endcode instances for each
  category in \code
  toolbox
  \endcode
*/
@property (nonatomic, readonly, strong) BKYLayoutBuilder * _Nonnull layoutBuilder;
/**
  The associated list of \code
  WorkspaceLayoutCoordinator
  \endcode instances for \code
  toolbox.categories
  \endcode
*/
@property (nonatomic, copy) NSArray<BKYWorkspaceLayoutCoordinator *> * _Nonnull categoryLayoutCoordinators;
/**
  Creates a new \code
  ToolboxLayout
  \endcode.
  \param toolbox The \code
  Toolbox
  \endcode to associate with this object.

  \param engine The layout engine to use when creating new \code
  WorkspaceFlowLayout
  \endcode instances
  for each category in \code
  toolbox
  \endcode

  \param layoutDirection The layout direction to use when creating new
  \code
  WorkspaceFlowLayout
  \endcode instances for each category in \code
  toolbox
  \endcode

  \param layoutBuilder The layout builder to use when creating new \code
  WorkspaceFlowLayout
  \endcode
  instances for each category in \code
  toolbox
  \endcode

*/
- (nonnull instancetype)initWithToolbox:(BKYToolbox * _Nonnull)toolbox engine:(BKYLayoutEngine * _Nonnull)engine layoutDirection:(enum BKYWorkspaceFlowLayoutDirection)layoutDirection layoutBuilder:(BKYLayoutBuilder * _Nonnull)layoutBuilder OBJC_DESIGNATED_INITIALIZER;
/**
  Sets the block factory on the WorkbenchLayoutCoordinators owned by ToolboxLayout, so variable
  blocks can be added dynamically to the toolbox.
  \param blockFactory The \code
  BlockFactory
  \endcode to add to the coordinators.

*/
- (void)setBlockFactory:(BKYBlockFactory * _Nullable)blockFactory;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  An area containing a button for an animatable trash can.
*/
SWIFT_CLASS_NAMED("TrashCanView")
@interface BKYTrashCanView : UIView
/**
  The trash can button
*/
@property (nonatomic, readonly, strong) UIButton * _Nonnull button;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Sets the amount of padding that should be added around the trash can button.
  \param top The padding to add to the top edge of the button

  \param leading The padding to add to the leading edge of the button

  \param bottom The padding to add to the bottom edge of the button

  \param trailing The padding to add to the trailing edge of the button

*/
- (void)setButtonPaddingWithTop:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing;
/**
  Sets the highlighted state for the trash can view.
  \param highlighted Specifies whether the trash can should be highlighted. \code
  true
  \endcode if it
  should, \code
  false
  \endcode if not.

  \param animated Specifies whether the change should be animated (\code
  true
  \endcode) or
  if it should be performed immediately (\code
  false
  \endcode).

*/
- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class BKYWorkspaceView;

/**
  View controller for managing a workspace.
*/
SWIFT_CLASS_NAMED("WorkspaceViewController")
@interface BKYWorkspaceViewController : UIViewController
/**
  The workspace layout coordinator this view controller operates on
*/
@property (nonatomic, readonly, strong) BKYWorkspaceLayoutCoordinator * _Nullable workspaceLayoutCoordinator;
/**
  A convenience property for accessing \code
  self.workspaceLayoutCoordinator?.workspaceLayout
  \endcode
*/
@property (nonatomic, readonly, strong) BKYWorkspaceLayout * _Nullable workspaceLayout;
/**
  A convenience property for \code
  self.workspaceLayout.workspace
  \endcode
*/
@property (nonatomic, readonly, strong) BKYWorkspace * _Nullable workspace;
/**
  The target workspace view
*/
@property (nonatomic, strong) BKYWorkspaceView * _Nonnull workspaceView;
/**
  Delegate for events that occur on this view controller
*/
@property (nonatomic, weak) id <BKYWorkspaceViewControllerDelegate> _Nullable delegate;
/**
  Initializer.
  \param viewFactory The \code
  ViewFactory
  \endcode that should be used when creating the
  view hierarchy for a workspace.

*/
- (nonnull instancetype)initWithViewFactory:(BKYViewFactory * _Nonnull)viewFactory OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
/**
  Loads the workspace associated with a workspace layout coordinator, automatically creating all
  views required to render the workspace.
  \param workspaceLayoutCoordinator A \code
  WorkspaceLayoutCoordinator
  \endcode.

*/
- (BOOL)loadWorkspaceLayoutCoordinator:(BKYWorkspaceLayoutCoordinator * _Nullable)workspaceLayoutCoordinator error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/**
  A view controller for displaying blocks in a trash can.
*/
SWIFT_CLASS_NAMED("TrashCanViewController")
@interface BKYTrashCanViewController : BKYWorkspaceViewController
/**
  The layout engine to use for displaying the trash can
*/
@property (nonatomic, readonly, strong) BKYLayoutEngine * _Nonnull engine;
/**
  The layout direction to use for \code
  self.workspaceLayout
  \endcode
*/
@property (nonatomic, readonly) enum BKYWorkspaceFlowLayoutDirection layoutDirection;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
/**
  Sets the height of the workspace view.
  \param height The new height

  \param animated Flag determining if the new height should be animated.

*/
- (void)setWorkspaceViewHeight:(CGFloat)height animated:(BOOL)animated;
/**
  Sets the width of the workspace view.
  \param width The new width

  \param animated Flag determining if the new width should be animated.

*/
- (void)setWorkspaceViewWidth:(CGFloat)width animated:(BOOL)animated;
- (nonnull instancetype)initWithViewFactory:(BKYViewFactory * _Nonnull)viewFactory SWIFT_UNAVAILABLE;
@end


@interface UIColor (SWIFT_EXTENSION(Blockly))
@end


@interface UIView (SWIFT_EXTENSION(Blockly))
/**
  Removes all gesture recognizers from the view.
*/
- (void)bky_removeAllGestureRecognizers;
@end


@interface UIView (SWIFT_EXTENSION(Blockly))
@end

@protocol BKYViewBuilderDelegate;

/**
  Class for maintaining the \code
  View
  \endcode hierarchy from a \code
  Layout
  \endcode hierarchy.
*/
SWIFT_CLASS_NAMED("ViewBuilder")
@interface BKYViewBuilder : NSObject
/**
  Factory responsible for creating new \code
  View
  \endcode instances
*/
@property (nonatomic, readonly, strong) BKYViewFactory * _Nonnull viewFactory;
/**
  Delegate for events that occur on this \code
  ViewBuilder
  \endcode
*/
@property (nonatomic, weak) id <BKYViewBuilderDelegate> _Nullable delegate;
/**
  Initializer for the view builder.
  \param viewFactory The \code
  ViewFactory
  \endcode to construct views built by the builder.

*/
- (nonnull instancetype)initWithViewFactory:(BKYViewFactory * _Nonnull)viewFactory OBJC_DESIGNATED_INITIALIZER;
/**
  Builds the entire view tree for \code
  workspaceView
  \endcode based on its current layout
  (ie. \code
  workspaceView.workspaceLayout
  \endcode).

  throws:

  \code
  BlocklyError
  \endcode: Thrown if the view tree could not be created for this workspace.
*/
- (BOOL)buildViewTreeForWorkspaceView:(BKYWorkspaceView * _Nonnull)workspaceView error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface BKYViewBuilder (SWIFT_EXTENSION(Blockly)) <BKYLayoutHierarchyListener>
- (void)layout:(BKYLayout * _Nonnull)layout didAdoptChildLayout:(BKYLayout * _Nonnull)childLayout fromOldParentLayout:(BKYLayout * _Nullable)oldParentLayout;
- (void)layout:(BKYLayout * _Nonnull)layout didRemoveChildLayout:(BKYLayout * _Nonnull)childLayout;
@end


/**
  Delegate for events that occur inside a \code
  ViewBuilder
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("ViewBuilderDelegate")
@protocol BKYViewBuilderDelegate
/**
  Event that is called when the \code
  ViewBuilder
  \endcode has added child view to a parent view.
  \param viewBuilder The \code
  ViewBuilder
  \endcode

  \param childView The child \code
  UIView
  \endcode

  \param parentView The parent \code
  UIView
  \endcode

*/
- (void)viewBuilder:(BKYViewBuilder * _Nonnull)viewBuilder didAddChild:(UIView * _Nonnull)childView toParent:(UIView * _Nonnull)parentView;
/**
  Event that is called when the \code
  ViewBuilder
  \endcode has removed a child view from a parent view.
  \param viewBuilder The \code
  ViewBuilder
  \endcode

  \param childView The child \code
  UIView
  \endcode

  \param parentView The parent \code
  UIView
  \endcode

*/
- (void)viewBuilder:(BKYViewBuilder * _Nonnull)viewBuilder didRemoveChild:(UIView * _Nonnull)childView fromParent:(UIView * _Nonnull)parentView;
@end


/**
  Handles the creation of recyclable views.
*/
SWIFT_CLASS_NAMED("ViewFactory")
@interface BKYViewFactory : NSObject
/**
  Initializes the view factory, and registers the default \code
  Layout
  \endcode/\code
  View
  \endcode relationships
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Returns a recycled or new \code
  LayoutView
  \endcode instance assigned to the given layout.
  \param layout The given \code
  Layout
  \endcode


  throws:

  \code
  BlocklyError
  \endcode: Thrown if no \code
  LayoutView
  \endcode could be retrieved for the given layout.

  returns:
  A \code
  LayoutView
  \endcode with the given layout assigned to it
*/
- (BKYLayoutView * _Nullable)makeViewWithLayout:(BKYLayout * _Nonnull)layout error:(NSError * _Nullable * _Nullable)error;
/**
  Registers the type of \code
  LayoutView
  \endcode instances that should be created when requesting a specific
  \code
  Layout
  \endcode type.
  \param layoutType The \code
  Layout.Type
  \endcode key

  \param viewType A view type that is a subclass of \code
  LayoutView
  \endcode that conforms to
  \code
  Recyclable
  \endcode

*/
- (void)registerLayoutType:(SWIFT_METATYPE(BKYLayout) _Nonnull)layoutType withViewType:(SWIFT_METATYPE(BKYLayoutView) _Nonnull)viewType;
/**
  If the view conforms to the protocol \code
  Recyclable
  \endcode, calls \code
  recycle()
  \endcode on the view and stores it
  for re-use later. Otherwise, nothing happens.
  \param view The view to recycle.

*/
- (void)recycleView:(UIView * _Nonnull)view;
/**
  For every \code
  UIView
  \endcode in a view hierarchy rooted by a given \code
  UIView
  \endcode, recycles those that conform
  to the protocol \code
  Recyclable
  \endcode and stores them for re-use later.
  \param rootView The root view to begin the recycling process.

*/
- (void)recycleViewTree:(UIView * _Nonnull)rootView;
@end


/**
  Manages the set \code
  LayoutView
  \endcode instances that have been created.
  This class is designed as a singleton instance, accessible via \code
  ViewManager.sharedInstance
  \endcode.
*/
SWIFT_CLASS_NAMED("ViewManager")
@interface BKYViewManager : NSObject
/**
  Shared instance.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BKYViewManager * _Nonnull sharedInstance;)
+ (BKYViewManager * _Nonnull)sharedInstance;
/**
  A singleton instance for this class is accessible via \code
  ViewManager.sharedInstance.
  \endcode
*/
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Dictionary that indexes weak \code
  LayoutView
  \endcode references based on their \code
  layout.uuid
  \endcode
*/
@property (nonatomic, readonly, strong) NSMapTable<NSString *, BKYLayoutView *> * _Nonnull views;
/**
  Caches a \code
  LayoutView
  \endcode instance to a specific \code
  Layout
  \endcode.
  \param layoutView The \code
  LayoutView
  \endcode to cache

  \param layout The \code
  Layout
  \endcode associated with the view

*/
- (void)cacheView:(BKYLayoutView * _Nonnull)layoutView forLayout:(BKYLayout * _Nonnull)layout;
/**
  Uncaches the \code
  LayoutView
  \endcode associated with a given block layout.
  \param layout The given layout

*/
- (void)uncacheViewForLayout:(BKYLayout * _Nonnull)layout;
/**
  Returns the \code
  BlockView
  \endcode that has been cached for a given \code
  BlockLayout
  \endcode. If the view could not
  be found in the cache, \code
  nil
  \endcode is returned.
  \param layout The \code
  BlockLayout
  \endcode to look for


  returns:
  A \code
  BlockView
  \endcode with the given layout assigned to it, or \code
  nil
  \endcode if no view could be
  found.
*/
- (BKYBlockView * _Nullable)findBlockViewForLayout:(BKYBlockLayout * _Nonnull)layout;
/**
  Returns the \code
  FieldView
  \endcode that has been cached for a given \code
  FieldLayout
  \endcode. If the view could not
  be found in the cache, \code
  nil
  \endcode is returned.
  \param layout The \code
  FieldLayout
  \endcode to look for


  returns:
  A \code
  FieldView
  \endcode with the given layout assigned to it, or \code
  nil
  \endcode if no view could be
  found.
*/
- (BKYFieldView * _Nullable)findFieldViewForLayout:(BKYFieldLayout * _Nonnull)layout;
/**
  Returns the \code
  LayoutView
  \endcode that has been cached for a given \code
  Layout
  \endcode. If the view could not
  be found in the cache, \code
  nil
  \endcode is returned.
  \param layout The \code
  Layout
  \endcode to look for


  returns:
  A \code
  LayoutView
  \endcode with the given layout assigned to it, or \code
  nil
  \endcode if no view could be
  found.
*/
- (BKYLayoutView * _Nullable)findViewForLayout:(BKYLayout * _Nonnull)layout;
@end

enum BKYWorkbenchViewControllerStyle : NSInteger;
@protocol BKYWorkbenchViewControllerDelegate;

/**
  View controller for editing a workspace.
*/
SWIFT_CLASS_NAMED("WorkbenchViewController")
@interface BKYWorkbenchViewController : UIViewController
/**
  The main workspace view controller
*/
@property (nonatomic, readonly, strong) BKYWorkspaceViewController * _Null_unspecified workspaceViewController;
/**
  The trash can view.
*/
@property (nonatomic, readonly, strong) BKYTrashCanView * _Null_unspecified trashCanView;
/**
  The undo button
*/
@property (nonatomic, readonly, strong) UIButton * _Nonnull undoButton;
/**
  The redo button
*/
@property (nonatomic, readonly, strong) UIButton * _Nonnull redoButton;
/**
  The toolbox category view controller.
*/
@property (nonatomic, readonly, strong) BKYToolboxCategoryViewController * _Null_unspecified toolboxCategoryViewController;
/**
  The layout engine to use for all views
*/
@property (nonatomic, readonly, strong) BKYLayoutEngine * _Nonnull engine;
/**
  The layout builder to create layout hierarchies
*/
@property (nonatomic, readonly, strong) BKYLayoutBuilder * _Nonnull layoutBuilder;
/**
  The factory for creating blocks under this workbench. Any block added to the workbench
  should be able to be re-created using this factory.
*/
@property (nonatomic, readonly, strong) BKYBlockFactory * _Nonnull blockFactory;
/**
  The factory for creating views
*/
@property (nonatomic, readonly, strong) BKYViewFactory * _Nonnull viewFactory;
/**
  The style of workbench
*/
@property (nonatomic, readonly) enum BKYWorkbenchViewControllerStyle style;
/**
  The current state of the main workspace
*/
@property (nonatomic, readonly, strong) BKYWorkspace * _Nullable workspace;
/**
  The toolbox that has been loaded via \code
  loadToolbox(:)
  \endcode
*/
@property (nonatomic, readonly, strong) BKYToolbox * _Nullable toolbox;
/**
  The \code
  NameManager
  \endcode that controls the variables in this workbench’s scope.
*/
@property (nonatomic, readonly, strong) BKYNameManager * _Nonnull variableNameManager;
/**
  Coordinator that handles logic for managing procedure functionality
*/
@property (nonatomic, strong) BKYProcedureCoordinator * _Nullable procedureCoordinator;
/**
  Displays (\code
  true
  \endcode) or hides (\code
  false
  \endcode) a trash can. By default, this value is set to \code
  true
  \endcode.
*/
@property (nonatomic) BOOL enableTrashCan;
/**
  Enables or disables pinch zooming of the workspace. Defaults to \code
  true
  \endcode.
*/
@property (nonatomic) BOOL allowZoom;
/**
  Enables or disables the ability to undo/redo actions in the workspace. Defaults to \code
  true
  \endcode.
*/
@property (nonatomic) BOOL allowUndoRedo;
/**
  Flag for whether the toolbox drawer should stay visible once it has been opened (\code
  true
  \endcode)
  or if it should automatically close itself when the user does something else (\code
  false
  \endcode).
  By default, this value is set to \code
  false
  \endcode.
*/
@property (nonatomic) BOOL toolboxDrawerStaysOpen;
/**
  The current state of the UI
*/
@property (nonatomic, readonly) BKYWorkbenchViewControllerUIState state;
/**
  The delegate for events that occur in the workbench
*/
@property (nonatomic, weak) id <BKYWorkbenchViewControllerDelegate> _Nullable delegate;
/**
  Creates the workbench with defaults for \code
  self.engine
  \endcode, \code
  self.layoutBuilder
  \endcode,
  \code
  self.viewFactory
  \endcode.
  \param style The \code
  Style
  \endcode to use for this laying out items in this view controller.

*/
- (nonnull instancetype)initWithStyle:(enum BKYWorkbenchViewControllerStyle)style OBJC_DESIGNATED_INITIALIZER;
/**
  Creates the workbench.
  \param style The \code
  Style
  \endcode to use for this laying out items in this view controller.

  \param engine Value used for \code
  self.layoutEngine
  \endcode.

  \param layoutBuilder Value used for \code
  self.layoutBuilder
  \endcode.

  \param blockFactory Value used for \code
  self.blockFactory
  \endcode.

  \param viewFactory Value used for \code
  self.viewFactory
  \endcode.

  \param variableNameManager Value used for \code
  self.variableNameManager
  \endcode.

  \param procedureCoordinator Value used for \code
  self.procedureCoordinator
  \endcode.

*/
- (nonnull instancetype)initWithStyle:(enum BKYWorkbenchViewControllerStyle)style engine:(BKYLayoutEngine * _Nonnull)engine layoutBuilder:(BKYLayoutBuilder * _Nonnull)layoutBuilder blockFactory:(BKYBlockFactory * _Nonnull)blockFactory viewFactory:(BKYViewFactory * _Nonnull)viewFactory variableNameManager:(BKYNameManager * _Nonnull)variableNameManager procedureCoordinator:(BKYProcedureCoordinator * _Nonnull)procedureCoordinator OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewDidLoad;
/**
  Automatically creates a \code
  WorkspaceLayout
  \endcode and \code
  WorkspaceLayoutCoordinator
  \endcode for a given workspace
  (using both the \code
  self.engine
  \endcode and \code
  self.layoutBuilder
  \endcode instances). The workspace is then
  rendered into the view controller.
  note:
  All blocks in \code
  workspace
  \endcode must have corresponding \code
  BlockBuilder
  \endcode objects in
  \code
  self.blockFactory
  \endcode, based on their associated block name. This is needed for things like
  handling undo/redo and automatic creation of variable blocks.
  note:
  A \code
  ConnectionManager
  \endcode is automatically created for the \code
  WorkspaceLayoutCoordinator
  \endcode.
  \param workspace The \code
  Workspace
  \endcode to load


  throws:

  \code
  BlocklyError
  \endcode: Thrown if an associated \code
  WorkspaceLayout
  \endcode could not be created for the workspace,
  or if no corresponding \code
  BlockBuilder
  \endcode could be found in \code
  self.blockFactory
  \endcode for at least one of
  the blocks in \code
  workspace
  \endcode.
*/
- (BOOL)loadWorkspace:(BKYWorkspace * _Nonnull)workspace error:(NSError * _Nullable * _Nullable)error;
/**
  Automatically creates a \code
  WorkspaceLayout
  \endcode and \code
  WorkspaceLayoutCoordinator
  \endcode for a given workspace
  (using both the \code
  self.engine
  \endcode and \code
  self.layoutBuilder
  \endcode instances). The workspace is then
  rendered into the view controller.
  note:
  All blocks in \code
  workspace
  \endcode must have corresponding \code
  BlockBuilder
  \endcode objects in
  \code
  self.blockFactory
  \endcode, based on their associated block name. This is needed for things like
  handling undo/redo and automatic creation of variable blocks.
  \param workspace The \code
  Workspace
  \endcode to load

  \param connectionManager A \code
  ConnectionManager
  \endcode to track connections in the workspace.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if an associated \code
  WorkspaceLayout
  \endcode could not be created for the workspace,
  or if no corresponding \code
  BlockBuilder
  \endcode could be found in \code
  self.blockFactory
  \endcode for at least one of
  the blocks in \code
  workspace
  \endcode.
*/
- (BOOL)loadWorkspace:(BKYWorkspace * _Nonnull)workspace connectionManager:(BKYConnectionManager * _Nonnull)connectionManager error:(NSError * _Nullable * _Nullable)error;
/**
  Automatically creates a \code
  ToolboxLayout
  \endcode for a given \code
  Toolbox
  \endcode (using both the \code
  self.engine
  \endcode
  and \code
  self.layoutBuilder
  \endcode instances) and loads it into the view controller.
  note:
  All blocks defined by categories in \code
  toolbox
  \endcode must have corresponding
  \code
  BlockBuilder
  \endcode objects in \code
  self.blockFactory
  \endcode, based on their associated block name. This is
  needed for things like handling undo/redo and automatic creation of variable blocks.
  \param toolbox The \code
  Toolbox
  \endcode to load


  throws:

  \code
  BlocklyError
  \endcode: Thrown if an associated \code
  ToolboxLayout
  \endcode could not be created for the toolbox,
  or if no corresponding \code
  BlockBuilder
  \endcode could be found in \code
  self.blockFactory
  \endcode for at least one of
  the blocks specified in\code
  toolbox
  \endcode.
*/
- (BOOL)loadToolbox:(BKYToolbox * _Nonnull)toolbox error:(NSError * _Nullable * _Nullable)error;
/**
  Refreshes the UI based on the current version of \code
  self.workspace
  \endcode and \code
  self.toolbox
  \endcode.
*/
- (void)refreshView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

/**
  The style of the workbench
*/
typedef SWIFT_ENUM_NAMED(NSInteger, BKYWorkbenchViewControllerStyle, "Style") {
  BKYWorkbenchViewControllerStyleDefaultStyle = 0,
  BKYWorkbenchViewControllerStyleAlternate = 1,
};


@interface BKYWorkbenchViewController (SWIFT_EXTENSION(Blockly))
- (void)scrollBlockIntoViewWithBlockUUID:(NSString * _Nonnull)blockUUID animated:(BOOL)animated;
@end


@interface BKYWorkbenchViewController (SWIFT_EXTENSION(Blockly)) <BKYBlocklyPanGestureRecognizerDelegate>
/**
  Pan gesture event handler for a block view inside \code
  self.workspaceView
  \endcode.
*/
- (void)blocklyPanGestureRecognizer:(BKYBlocklyPanGestureRecognizer * _Nonnull)gesture didTouchBlock:(BKYBlockView * _Nonnull)block touch:(UITouch * _Nonnull)touch touchState:(enum BKYBlocklyPanGestureRecognizerTouchState)touchState;
@end


@interface BKYWorkbenchViewController (SWIFT_EXTENSION(Blockly)) <BKYEventManagerListener>
- (void)eventManager:(BKYEventManager * _Nonnull)eventManager didFireEvent:(BKYEvent * _Nonnull)event;
@end


@interface BKYWorkbenchViewController (SWIFT_EXTENSION(Blockly))
@end


@interface BKYWorkbenchViewController (SWIFT_EXTENSION(Blockly)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer;
@end


@interface BKYWorkbenchViewController (SWIFT_EXTENSION(Blockly)) <BKYToolboxCategoryListViewControllerDelegate>
- (void)toolboxCategoryListViewController:(BKYToolboxCategoryListViewController * _Nonnull)controller didSelectCategory:(BKYToolboxCategory * _Nonnull)category;
- (void)toolboxCategoryListViewControllerDidDeselectCategory:(BKYToolboxCategoryListViewController * _Nonnull)controller;
@end


@interface BKYWorkbenchViewController (SWIFT_EXTENSION(Blockly))
/**
  Copies the specified block from a flyout (trash/toolbox) to the workspace.
  \param blockView The \code
  BlockView
  \endcode to copy


  returns:
  The new \code
  BlockView
  \endcode
*/
- (BKYBlockView * _Nullable)copyBlockToWorkspace:(BKYBlockView * _Nonnull)blockView;
/**
  Removes a \code
  BlockView
  \endcode from the trash, when moving it back to the workspace.
  \param blockView The \code
  BlockView
  \endcode to remove.

*/
- (void)removeBlockFromTrash:(BKYBlockView * _Nonnull)blockView;
@end


@interface BKYWorkbenchViewController (SWIFT_EXTENSION(Blockly))
@end


@interface BKYWorkbenchViewController (SWIFT_EXTENSION(Blockly))
@end


@interface BKYWorkbenchViewController (SWIFT_EXTENSION(Blockly))
@end


@interface BKYWorkbenchViewController (SWIFT_EXTENSION(Blockly))
/**
  Highlights a block in the workspace.
  \param blockUUID The UUID of the block to highlight

*/
- (void)highlightBlockWithBlockUUID:(NSString * _Nonnull)blockUUID;
/**
  Unhighlights a block in the workspace.
  <ul>
    <li>
      Paramater blockUUID: The UUID of the block to unhighlight.
    </li>
  </ul>
*/
- (void)unhighlightBlockWithBlockUUID:(NSString * _Nonnull)blockUUID;
/**
  Unhighlights all blocks in the workspace.
*/
- (void)unhighlightAllBlocks;
@end


/**
  Protocol for events that occur on a \code
  WorkspaceViewController
  \endcode instance.
*/
SWIFT_PROTOCOL_NAMED("WorkspaceViewControllerDelegate")
@protocol BKYWorkspaceViewControllerDelegate
/**
  Called when a new \code
  BlockView
  \endcode is added to a \code
  WorkspaceViewController
  \endcode.
  \param workspaceViewController The \code
  WorkspaceViewController
  \endcode where the block was added.

  \param blockView The \code
  BlockView
  \endcode that was added to the workspace.

*/
- (void)workspaceViewController:(BKYWorkspaceViewController * _Nonnull)workspaceViewController didAddBlockView:(BKYBlockView * _Nonnull)blockView;
/**
  Called when a new \code
  BlockView
  \endcode is removed from a \code
  WorkspaceViewController
  \endcode.
  \param workspaceViewController The \code
  WorkspaceViewController
  \endcode where the block was removed.

  \param blockView The \code
  BlockView
  \endcode that was removed from the workspace.

*/
- (void)workspaceViewController:(BKYWorkspaceViewController * _Nonnull)workspaceViewController didRemoveBlockView:(BKYBlockView * _Nonnull)blockView;
/**
  Called when the \code
  WorkspaceViewController
  \endcode is about to present a view controller.
  \param workspaceViewController The \code
  WorkspaceViewController
  \endcode presenting a view controller.

  \param willPresentViewController The \code
  UIViewController
  \endcode about to be presented.

*/
- (void)workspaceViewController:(BKYWorkspaceViewController * _Nonnull)workspaceViewController willPresentViewController:(UIViewController * _Nonnull)willPresentViewController;
/**
  Called when the \code
  WorkspaceViewController
  \endcode was dismissed.
  \param workspaceViewController The \code
  WorkspaceViewController
  \endcode that dismissed a view
  controller.

*/
- (void)workspaceViewControllerDismissedViewController:(BKYWorkspaceViewController * _Nonnull)workspaceViewController;
@end


@interface BKYWorkbenchViewController (SWIFT_EXTENSION(Blockly)) <BKYWorkspaceViewControllerDelegate>
- (void)workspaceViewController:(BKYWorkspaceViewController * _Nonnull)workspaceViewController didAddBlockView:(BKYBlockView * _Nonnull)blockView;
- (void)workspaceViewController:(BKYWorkspaceViewController * _Nonnull)workspaceViewController didRemoveBlockView:(BKYBlockView * _Nonnull)blockView;
- (void)workspaceViewController:(BKYWorkspaceViewController * _Nonnull)workspaceViewController willPresentViewController:(UIViewController * _Nonnull)willPresentViewController;
- (void)workspaceViewControllerDismissedViewController:(BKYWorkspaceViewController * _Nonnull)workspaceViewController;
@end


@interface BKYWorkbenchViewController (SWIFT_EXTENSION(Blockly))
@end


@interface BKYWorkbenchViewController (SWIFT_EXTENSION(Blockly))
/**
  Updates the workbench based on a \code
  BlocklyEvent
  \endcode.
  \param event The \code
  BlocklyEvent
  \endcode.

  \param runForward Flag determining if the event should be run forward (\code
  true
  \endcode for redo
  operations) or run backward (\code
  false
  \endcode for undo operations).

*/
- (void)updateFromEvent:(BKYEvent * _Nonnull)event runForward:(BOOL)runForward;
/**
  Updates the workbench based on a \code
  BlocklyEvent.Create
  \endcode.
  \param event The \code
  BlocklyEvent.Create
  \endcode.

  \param runForward Flag determining if the event should be run forward (\code
  true
  \endcode for redo
  operations) or run backward (\code
  false
  \endcode for undo operations).

*/
- (void)updateFromCreateEvent:(BKYEventCreate * _Nonnull)event runForward:(BOOL)runForward;
/**
  Updates the workbench based on a \code
  BlocklyEvent.Delete
  \endcode.
  \param event The \code
  BlocklyEvent.Delete
  \endcode.

  \param runForward Flag determining if the event should be run forward (\code
  true
  \endcode for redo
  operations) or run backward (\code
  false
  \endcode for undo operations).

*/
- (void)updateFromDeleteEvent:(BKYEventDelete * _Nonnull)event runForward:(BOOL)runForward;
/**
  Updates the workbench based on a \code
  BlocklyEvent.Move
  \endcode.
  \param event The \code
  BlocklyEvent.Move
  \endcode.

  \param runForward Flag determining if the event should be run forward (\code
  true
  \endcode for redo
  operations) or run backward (\code
  false
  \endcode for undo operations).

*/
- (void)updateFromMoveEvent:(BKYEventMove * _Nonnull)event runForward:(BOOL)runForward;
/**
  Updates the workbench based on a \code
  BlocklyEvent.Change
  \endcode.
  \param event The \code
  BlocklyEvent.Change
  \endcode.

  \param runForward Flag determining if the event should be run forward (\code
  true
  \endcode for redo
  operations) or run backward (\code
  false
  \endcode for undo operations).

*/
- (void)updateFromChangeEvent:(BKYEventChange * _Nonnull)event runForward:(BOOL)runForward;
@end


/**
  Delegate for events that occur on \code
  WorkbenchViewController
  \endcode.
*/
SWIFT_PROTOCOL_NAMED("WorkbenchViewControllerDelegate")
@protocol BKYWorkbenchViewControllerDelegate
/**
  Event that is called when a \code
  WorkbenchViewController
  \endcode updates its \code
  state
  \endcode.
*/
- (void)workbenchViewController:(BKYWorkbenchViewController * _Nonnull)workbenchViewController didUpdateState:(BKYWorkbenchViewControllerUIState)state;
@end



@interface BKYWorkspace (SWIFT_EXTENSION(Blockly))
/**
  Returns an XML string representing the current state of this workspace.

  throws:

  \code
  BlocklyError
  \endcode: Thrown if there was an error serializing any of the blocks in the workspace.

  returns:
  The XML string.
*/
- (NSString * _Nullable)toXMLWithError:(NSError * _Nullable * _Nullable)error;
@end


@interface BKYWorkspace (SWIFT_EXTENSION(Blockly))
/**
  Loads blocks from an XML string into the workspace.
  \param xmlString The string that contains all the block data.

  \param factory The \code
  BlockFactory
  \endcode to use to build blocks.


  throws:

  \code
  BlocklyError
  \endcode: Occurs if there is a problem parsing the xml (eg. insufficient data,
  malformed data, or contradictory data).
*/
- (BOOL)loadBlocksFromXMLString:(NSString * _Nonnull)xmlString factory:(BKYBlockFactory * _Nonnull)factory error:(NSError * _Nullable * _Nullable)error;
@end


/**
  Object for constructing a bezier path from a Workspace coordinate system and translating that path
  into the UIView coordinate system.
  Under the hood, this class uses a \code
  UIBezierPath
  \endcode object, but it has added the following:
  <ul>
    <li>
      enables the ability to add segments by relative location, based on the current point
    </li>
    <li>
      adds SVG-equivalent methods for “smooth curveto” and “smooth quadratic curveto”
    </li>
  </ul>
*/
SWIFT_CLASS_NAMED("WorkspaceBezierPath")
@interface BKYWorkspaceBezierPath : NSObject
/**
  The translated bezier path in the UIView coordinate system.
*/
@property (nonatomic, readonly, strong) UIBezierPath * _Nonnull viewBezierPath;
/**
  The current point of the bezier path, specified in the Workspace coordinate system.
*/
@property (nonatomic, readonly) BKYWorkspacePoint currentWorkspacePoint;
/**
  Designated initializer.
  \param engine The \code
  LayoutEngine
  \endcode used to calculate scaling between a Workspace and the
  UIView

*/
- (nonnull instancetype)initWithEngine:(BKYLayoutEngine * _Nonnull)engine OBJC_DESIGNATED_INITIALIZER;
/**
  Appends a straight line to the receiver’s path.
  \param point The destination point of the line segment, specified in the Workspace
  coordinate system.

  \param relative True if the specified point should be relative to the \code
  currentPoint
  \endcode. False
  if it should be an absolute point.

*/
- (void)addLineTo:(BKYWorkspacePoint)point relative:(BOOL)relative;
/**
  Appends a straight line to the receiver’s path.
  \param x The destination x-point of the line segment, specified in the Workspace
  coordinate system.

  \param y The destination y-point of the line segment, specified in the Workspace
  coordinate system.

  \param relative True if the specified point should be relative to the \code
  currentPoint
  \endcode. False
  if it should be an absolute point.

*/
- (void)addLineToX:(CGFloat)x y:(CGFloat)y relative:(BOOL)relative;
/**
  Appends an arc to the receiver’s path.
  \param center Specifies the center point of the circle (in the Workspace coordinate system)
  used to define the arc.

  \param radius Specifies the radius of the circle used to define the arc.

  \param startAngle Specifies the starting angle of the arc (measured in radians).

  \param endAngle Specifies the end angle of the arc (measured in radians).

  \param clockwise The direction in which to draw the arc.

  \param relative True if the specified center point should be relative to the \code
  currentPoint
  \endcode.
  False if it should be an absolute point.

*/
- (void)addArcWithCenter:(BKYWorkspacePoint)center radius:(CGFloat)radius startAngle:(CGFloat)startAngle endAngle:(CGFloat)endAngle clockwise:(BOOL)clockwise relative:(BOOL)relative;
/**
  Appends a cubic Bézier curve to the receiver’s path.
  \param endPoint The end point of the curve, specified in the Workspace coordinate system.

  \param controlPoint1 The first control point to use when computing the curve, specified in
  the Workspace coordinate system.

  \param controlPoint2 The second control point to use when computing the curve, specified in
  the Workspace coordinate system.

  \param relative True if all specified points should be relative to the \code
  currentPoint
  \endcode. False
  if they should be are absolute points.

*/
- (void)addCurveTo:(BKYWorkspacePoint)endPoint controlPoint1:(BKYWorkspacePoint)controlPoint1 controlPoint2:(BKYWorkspacePoint)controlPoint2 relative:(BOOL)relative;
/**
  Appends a quadratic Bézier curve to the receiver’s path.
  \param endPoint The end point of the curve, specified in the Workspace coordinate system.

  \param controlPoint The control point of the curve, specified in the Workspace coordinate
  system.

  \param relative True if the specified points should be relative to the \code
  currentPoint
  \endcode.
  False if they should be absolute points.

*/
- (void)addQuadCurveTo:(BKYWorkspacePoint)endPoint controlPoint:(BKYWorkspacePoint)controlPoint relative:(BOOL)relative;
/**
  Appends a cubic Bézier curve to the receiver’s path. Similar to SVG’s “smooth curveto” method, if
  the previous method call appended a cubic or quadratic Bézier curve, this method will create a
  smooth transition between both curves.
  Note: This method should only be called directly after appending a cubic or quadratic Bézier
  curve. Otherwise, \code
  addCurveToPoint(...)
  \endcode is a more suitable method to use.
  \param endPoint The end point of the curve, specified in the Workspace coordinate system.

  \param controlPoint2 The second control point to use when computing the curve, specified in
  the Workspace coordinate system (the first control point is determined automatically).

  \param relative True if all specified points should be relative to the \code
  currentPoint
  \endcode. False
  if they should be absolute points.

*/
- (void)addSmoothCurveTo:(BKYWorkspacePoint)endPoint controlPoint2:(BKYWorkspacePoint)controlPoint2 relative:(BOOL)relative;
/**
  Appends a quadratic Bézier curve to the receiver’s path. Similar to SVG’s “smooth quadratic
  curveto” method, if the previous method call appended a cubic or quadratic Bézier curve, this
  method will create a smooth transition between both curves.
  Note: This method should only be called directly after appending a cubic or quadratic Bézier
  curve. Otherwise, \code
  addQuadCurveToPoint(...)
  \endcode is a more suitable method to use.
  \param endPoint The end point of the curve, specified in the Workspace coordinate system.

  \param relative True if all specified points should be relative to the \code
  currentPoint
  \endcode. False
  if they should be absolute points.

*/
- (void)addSmoothQuadCurveTo:(BKYWorkspacePoint)endPoint relative:(BOOL)relative;
/**
  Appends the contents of the specified path object to the receiver’s path.
  \param bezierPath The path to add to the receiver.

*/
- (void)append:(BKYWorkspaceBezierPath * _Nonnull)bezierPath;
/**
  Closes the most recently added subpath.
*/
- (void)closePath;
/**
  Moves the receiver’s current point to the specified location.
  \param point A point in the Workspace coordinate system.

  \param relative True if the specified point should be relative to the \code
  currentPoint
  \endcode. False
  if it should be an absolute point.

*/
- (void)moveTo:(BKYWorkspacePoint)point relative:(BOOL)relative;
/**
  Moves the receiver’s current point to the specified location.
  \param x The destination x-point of the line segment, specified in the Workspace
  coordinate system.

  \param y The destination y-point of the line segment, specified in the Workspace
  coordinate system.

  \param relative True if the specified point should be relative to the \code
  currentPoint
  \endcode. False
  if it should be an absolute point.

*/
- (void)moveToX:(CGFloat)x y:(CGFloat)y relative:(BOOL)relative;
/**
  Removes all points from the receiver, effectively deleting all subpaths.
*/
- (void)removeAllPoints;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



/**
  Stores information on how to render and position a \code
  Workspace
  \endcode on-screen.
*/
SWIFT_CLASS_NAMED("WorkspaceLayout")
@interface BKYWorkspaceLayout : BKYLayout
/**
  The \code
  Workspace
  \endcode to layout
*/
@property (nonatomic, readonly, strong) BKYWorkspace * _Nonnull workspace;
/**
  All child \code
  BlockGroupLayout
  \endcode objects that have been appended to this layout
*/
@property (nonatomic, copy) NSArray<BKYBlockGroupLayout *> * _Nonnull blockGroupLayouts;
/**
  Initializer for workspace layout.
  \param workspace The \code
  Workspace
  \endcode model for this layout.

  \param engine The \code
  LayoutEngine
  \endcode to associate with this layout.

*/
- (nonnull instancetype)initWithWorkspace:(BKYWorkspace * _Nonnull)workspace engine:(BKYLayoutEngine * _Nonnull)engine OBJC_DESIGNATED_INITIALIZER;
- (void)performLayoutWithIncludeChildren:(BOOL)includeChildren;
- (void)updateLayoutDownTree;
/**
  Returns all visible layouts associated with every block inside \code
  self.workspace.allBlocks
  \endcode.

  returns:
  A list of all visible \code
  BlockLayout
  \endcode objects associated with every block in this
  workspace.
*/
- (NSArray<BKYBlockLayout *> * _Nonnull)allVisibleBlockLayoutsInWorkspace;
/**
  Appends a blockGroupLayout to \code
  self.blockGroupLayouts
  \endcode and sets its \code
  parentLayout
  \endcode to this
  instance.
  \param blockGroupLayout The \code
  BlockGroupLayout
  \endcode to append.

  \param updateLayout If true, all parent layouts of this layout will be updated.

*/
- (void)appendBlockGroupLayout:(BKYBlockGroupLayout * _Nonnull)blockGroupLayout updateLayout:(BOOL)updateLayout;
/**
  Removes a given block group layout from \code
  self.blockGroupLayouts
  \endcode and sets its \code
  parentLayout
  \endcode to
  nil.
  \param blockGroupLayout The given block group layout.

  \param updateLayout If true, all parent layouts of this layout will be updated.

*/
- (void)removeBlockGroupLayout:(BKYBlockGroupLayout * _Nonnull)blockGroupLayout updateLayout:(BOOL)updateLayout;
/**
  Removes all elements from \code
  self.blockGroupLayouts
  \endcode and sets their \code
  parentLayout
  \endcode to nil.
  \param updateLayout If true, all parent layouts of this layout will be updated.

*/
- (void)resetWithUpdateLayout:(BOOL)updateLayout;
/**
  Brings the given block group layout to the front by setting its \code
  zIndex
  \endcode to the
  highest value in the workspace.
  \param blockGroupLayout The given block group layout

*/
- (void)bringBlockGroupLayoutToFront:(BKYBlockGroupLayout * _Nullable)blockGroupLayout;
/**
  Updates the required size of this layout based on the current positions of all blocks.
*/
- (void)updateCanvasSize;
- (nonnull instancetype)initWithEngine:(BKYLayoutEngine * _Nonnull)engine SWIFT_UNAVAILABLE;
@end


/**
  Layout for displaying a list of blocks in Workspace in a flow layout (in a manner similar to
  UICollectionViewFlowLayout).
*/
SWIFT_CLASS_NAMED("WorkspaceFlowLayout")
@interface BKYWorkspaceFlowLayout : BKYWorkspaceLayout
/**
  The workspace to layout
*/
@property (nonatomic, readonly, strong) BKYWorkspaceFlow * _Nonnull workspaceFlow;
/**
  The maximum amount of space to use per line of blocks before a new line of blocks should be
  created, expressed as a Workspace coordinate unit.
  If \code
  self.layoutDirection == .Vertical
  \endcode, this value is the maximum height for a column
  of consecutive blocks.
  If \code
  self.layoutDirection == .Horizontal
  \endcode, this value is the maximum width for a row
  of consecutive blocks.
  If this value is <= 0, line sizes are not constrained.
*/
@property (nonatomic) CGFloat maximumLineBlockSize;
/**
  The direction in which this layout should place consecutive blocks next to each other
*/
@property (nonatomic) enum BKYWorkspaceFlowLayoutDirection layoutDirection;
/**
  Initializer for workspace flow layout.
  \param workspace The \code
  WorkspaceFlow
  \endcode model for this layout.

  \param engine The \code
  LayoutEngine
  \endcode to associate with this layout.

  \param layoutDirection The direction (horizontal or vertical) for this layout.

*/
- (nonnull instancetype)initWithWorkspace:(BKYWorkspaceFlow * _Nonnull)workspace engine:(BKYLayoutEngine * _Nonnull)engine layoutDirection:(enum BKYWorkspaceFlowLayoutDirection)layoutDirection OBJC_DESIGNATED_INITIALIZER;
- (void)performLayoutWithIncludeChildren:(BOOL)includeChildren;
- (nonnull instancetype)initWithWorkspace:(BKYWorkspace * _Nonnull)workspace engine:(BKYLayoutEngine * _Nonnull)engine SWIFT_UNAVAILABLE;
@end

/**
  Defines how consecutive block trees should be laid out relative to each other
*/
typedef SWIFT_ENUM_NAMED(NSInteger, BKYWorkspaceFlowLayoutDirection, "LayoutDirection") {
  BKYWorkspaceFlowLayoutDirectionHorizontal = 0,
  BKYWorkspaceFlowLayoutDirectionVertical = 1,
};



/**
  Object that is responsible for managing a worksapce layout. This includes maintaining the layout
  hierarchy of the workspace and ensuring that model and layout objects under this workspace layout
  remains in-sync.
*/
SWIFT_CLASS_NAMED("WorkspaceLayoutCoordinator")
@interface BKYWorkspaceLayoutCoordinator : NSObject
/**
  The workspace layout whose layout hierarchy is being managed by this object
*/
@property (nonatomic, readonly, strong) BKYWorkspaceLayout * _Nonnull workspaceLayout;
/**
  Builder for constructing layouts under \code
  self.workspaceLayout
  \endcode
*/
@property (nonatomic, readonly, strong) BKYLayoutBuilder * _Nonnull layoutBuilder;
/**
  Manager for tracking all connection positions under \code
  self.workspaceLayout
  \endcode. If this value
  is \code
  nil
  \endcode, connection positions aren’t being tracked.
*/
@property (nonatomic, readonly, strong) BKYConnectionManager * _Nullable connectionManager;
/**
  Object responsible for bumping blocks away from each other
*/
@property (nonatomic, readonly, strong) BKYBlockBumper * _Nonnull blockBumper;
/**
  Manager responsible for keeping track of all variable names under this workspace
*/
@property (nonatomic, weak) BKYNameManager * _Nullable variableNameManager;
/**
  The factory for building blocks dynamically. Currently only used for building variable blocks
  for the toolbox.
*/
@property (nonatomic, strong) BKYBlockFactory * _Nullable blockFactory;
/**
  Initializes the workspace layout coordinator.
  \param workspaceLayout The \code
  WorkspaceLayout
  \endcode that should be managed by this coordinator

  \param layoutBuilder Builder for constructing layouts under \code
  workspaceLayout
  \endcode

  \param connectionManager Manager for tracking all connection positions under
  \code
  workspaceLayout
  \endcode. If this value is \code
  nil
  \endcode, connection positions will not be tracked.

*/
- (nullable instancetype)initWithWorkspaceLayout:(BKYWorkspaceLayout * _Nonnull)workspaceLayout layoutBuilder:(BKYLayoutBuilder * _Nonnull)layoutBuilder connectionManager:(BKYConnectionManager * _Nullable)connectionManager error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/**
  Adds a block tree (a block and its children) to the workspace handled by the workspace layout
  coordinator. The layout heirarchy is automatically updated to reflect this change.
  \param rootBlock The parent \code
  Block
  \endcode to add.


  throws:

  \code
  BlocklyError
  \endcode: If the block to be added would put the workspace into an illegal state.
*/
- (BOOL)addBlockTree:(BKYBlock * _Nonnull)rootBlock error:(NSError * _Nullable * _Nullable)error;
/**
  Disconnects a given block from its previous/output connections, and removes it and all of its
  connected blocks from the workspace.
  \param rootBlock The root block to remove.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if the tree of blocks could not be removed from the workspace.
*/
- (BOOL)removeBlockTree:(BKYBlock * _Nonnull)rootBlock error:(NSError * _Nullable * _Nullable)error;
/**
  Disconnects a single block from all connections, and removes it. This function will also
  reconnect next blocks to the previous block.
  \param block The block to remove.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if the block could not be removed from the workspace, or if the
  connections can’t be reconnected.
*/
- (BOOL)removeSingleBlock:(BKYBlock * _Nonnull)block error:(NSError * _Nullable * _Nullable)error;
/**
  Deep copies a block and adds all of the copied blocks into the workspace.
  \param rootBlock The root block to copy

  \param editable Sets whether each block is \code
  editable
  \endcode or not

  \param position [Optional] The position of where the copied block should be placed in the
  workspace. Defaults to \code
  WorkspacePoint.zero
  \endcode.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if the block could not be copied

  returns:
  The root block that was copied
*/
- (BKYBlock * _Nullable)copyBlockTree:(BKYBlock * _Nonnull)rootBlock editable:(BOOL)editable position:(BKYWorkspacePoint)position error:(NSError * _Nullable * _Nullable)error;
/**
  Disconnects a specified connection. The layout hierarchy is automatically updated to reflect this
  change.
  \param connection The connection to be disconnected.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if the connection is not attached to a source block.
*/
- (BOOL)disconnect:(BKYConnection * _Nonnull)connection error:(NSError * _Nullable * _Nullable)error;
/**
  Disconnects the shadow connection for a specified connection. The layout hierarchy is
  automatically updated to reflect this change.
  \param connection The connection whose shadow connection should be disconnected.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if the connection is not attached to a source block.
*/
- (BOOL)disconnectShadow:(BKYConnection * _Nonnull)connection error:(NSError * _Nullable * _Nullable)error;
/**
  Connects a pair of connections.  The layout hierarchy is automatically updated to reflect this
  change.
  \param connection1 The first \code
  Connection
  \endcode to be connected.

  \param connection2 The \code
  Connction
  \endcode to connect to.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if either connection is not attached to a source block or if the
  connections were unable to connect.
*/
- (BOOL)connect:(BKYConnection * _Nonnull)connection1 :(BKYConnection * _Nonnull)connection2 error:(NSError * _Nullable * _Nullable)error;
/**
  Re-builds the layout hierarchy for a block that is already associated with a layout.
  \param block The block to rebuild its layout hierarchy.


  throws:

  \code
  BlocklyError
  \endcode: Thrown if the specified block is not associated with a layout yet.
*/
- (BOOL)rebuildLayoutTreeForBlock:(BKYBlock * _Nonnull)block error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface BKYWorkspaceLayoutCoordinator (SWIFT_EXTENSION(Blockly)) <BKYNameManagerListener>
- (void)nameManager:(BKYNameManager * _Nonnull)nameManager didRemoveName:(NSString * _Nonnull)name;
@end


@interface BKYWorkspaceLayoutCoordinator (SWIFT_EXTENSION(Blockly)) <BKYWorkspaceListener>
- (void)workspace:(BKYWorkspace * _Nonnull)workspace didAddBlock:(BKYBlock * _Nonnull)block;
- (void)workspace:(BKYWorkspace * _Nonnull)workspace didRemoveBlock:(BKYBlock * _Nonnull)block;
@end


@class BKYWorkspaceScrollView;

/**
  View for rendering a \code
  WorkspaceLayout
  \endcode.
*/
SWIFT_CLASS_NAMED("WorkspaceView")
@interface BKYWorkspaceView : BKYLayoutView
/**
  Convenience property for accessing \code
  self.layout
  \endcode as a \code
  WorkspaceLayout
  \endcode
*/
@property (nonatomic, readonly, strong) BKYWorkspaceLayout * _Nullable workspaceLayout;
/**
  All top-level \code
  BlockGroupView
  \endcode instances underneath the workspace
*/
@property (nonatomic, readonly, copy) NSSet<BKYBlockGroupView *> * _Nonnull blockGroupViews;
/**
  Scroll view used to render the workspace
*/
@property (nonatomic, strong) BKYWorkspaceScrollView * _Nonnull scrollView;
/**
  Flag if the canvas should be padded with extra spaces around its edges via
  \code
  self.canvasPadding
  \endcode. If set to false, the user will only be allowed to scroll the exact
  amount needed to view all blocks.
*/
@property (nonatomic) BOOL allowCanvasPadding;
/**
  The amount of padding to apply to the edges of the workspace canvas, by percentage of view
  frame size
*/
@property (nonatomic) BKYEdgeInsets canvasPaddingScale;
/**
  The amount of padding that should be added to the edges when automatically scrolling a
  \code
  Block
  \endcode into view.
*/
@property (nonatomic) BKYEdgeInsets scrollIntoViewEdgeInsets;
/**
  Enables/disables the zooming of a workspace. Defaults to false.
*/
@property (nonatomic) BOOL allowZoom;
/**
  Default initializer for workspace view.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (void)layoutSubviews;
/**
  Adds a \code
  BlockGroupView
  \endcode to the workspace’s scrollview.
  \param blockGroupView The given \code
  BlockGroupView
  \endcode

*/
- (void)addBlockGroupView:(BKYBlockGroupView * _Nonnull)blockGroupView;
/**
  Removes a given \code
  BlockGroupView
  \endcode from the workspace’s scrollview and recycles it.
  \param blockGroupView The given \code
  BlockGroupView
  \endcode

*/
- (void)removeBlockGroupView:(BKYBlockGroupView * _Nonnull)blockGroupView;
/**
  Returns the logical Workspace position of a given \code
  BlockView
  \endcode based on its position relative
  to this \code
  WorkspaceView
  \endcode.
  \param blockView The \code
  BlockView
  \endcode


  returns:
  The \code
  blockView
  \endcode’s corresponding workspace position.
*/
- (BKYWorkspacePoint)workspacePositionFromBlockView:(UIView * _Nonnull)blockView;
/**
  Automatically adjusts the workspace’s scroll view to bring a given \code
  Block
  \endcode into view.
  note:
  See \code
  scrollIntoViewEdgeInsets
  \endcode.
  \param block The \code
  Block
  \endcode to bring into view

  \param animated Flag determining if this scroll view adjustment should be animated.

*/
- (void)scrollBlockIntoView:(BKYBlock * _Nonnull)block animated:(BOOL)animated;
/**
  Maps a \code
  UIView
  \endcode point relative to \code
  self.scrollView.containerView
  \endcode to a logical Workspace
  position.
  \param point The \code
  UIView
  \endcode point


  returns:
  The corresponding \code
  WorkspacePoint
  \endcode
*/
- (BKYWorkspacePoint)workspacePositionFromViewPoint:(CGPoint)point;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface BKYWorkspaceView (SWIFT_EXTENSION(Blockly))
@end

@class BKYZIndexedGroupView;

/**
  The scroll view used by \code
  WorkspaceView
  \endcode.
*/
SWIFT_CLASS_NAMED("ScrollView")
@interface BKYWorkspaceScrollView : UIScrollView <UIGestureRecognizerDelegate>
/**
  View which holds all content in the Workspace
*/
@property (nonatomic, strong) BKYZIndexedGroupView * _Nonnull containerView;
/**
  Initializer for the scroll view inside the workspace view.
  \param frame The frame for the workspace view.

*/
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/**
  :nodoc:
  warning:
  This is currently unsupported.
*/
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface BKYWorkspaceView (SWIFT_EXTENSION(Blockly)) <UIScrollViewDelegate>
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)zoomScrollView withView:(UIView * _Nullable)view;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)zoomScrollView;
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
@end



@interface BKYWorkspaceViewController (SWIFT_EXTENSION(Blockly)) <BKYViewBuilderDelegate>
- (void)viewBuilder:(BKYViewBuilder * _Nonnull)viewBuilder didAddChild:(UIView * _Nonnull)childView toParent:(UIView * _Nonnull)parentView;
- (void)viewBuilder:(BKYViewBuilder * _Nonnull)viewBuilder didRemoveChild:(UIView * _Nonnull)childView fromParent:(UIView * _Nonnull)parentView;
@end


@interface BKYWorkspaceViewController (SWIFT_EXTENSION(Blockly)) <BKYLayoutPopoverDelegate>
- (BOOL)layoutView:(BKYLayoutView * _Nonnull)layoutView requestedToPresentPopoverViewController:(UIViewController * _Nonnull)viewController fromView:(UIView * _Nonnull)fromView;
- (void)layoutView:(BKYLayoutView * _Nonnull)layoutView requestedToPresentViewController:(UIViewController * _Nonnull)viewController;
- (void)layoutView:(BKYLayoutView * _Nonnull)layoutView requestedToDismissPopoverViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
@end

@class UIPresentationController;
@class UIPopoverPresentationController;

@interface BKYWorkspaceViewController (SWIFT_EXTENSION(Blockly)) <UIPopoverPresentationControllerDelegate>
- (UIModalPresentationStyle)adaptivePresentationStyleForPresentationController:(UIPresentationController * _Nonnull)controller;
- (void)popoverPresentationControllerDidDismissPopover:(UIPopoverPresentationController * _Nonnull)popoverPresentationController;
- (void)dismissViewControllerAnimated:(BOOL)flag completion:(void (^ _Nullable)(void))completion;
@end



/**
  UIView which <em>only</em> holds views that conform to \code
  ZIndexedView
  \endcode, where views are ordered in the
  subview list by their \code
  zIndex
  \endcode property. This causes each view to be rendered and hit-tested inside
  \code
  ZIndexedGroupView
  \endcode based on their \code
  zIndex
  \endcode.
  note:
  All views should be added via \code
  upsertView(:)
  \endcode. Using any other insertion method
  on this class may have adverse effects. Adding any view other than one that conforms to
  \code
  ZIndexedView
  \endcode will result in an app crash.
*/
SWIFT_CLASS_NAMED("ZIndexedGroupView")
@interface BKYZIndexedGroupView : UIView
/**
  Allows for hit testing while sub views are outside the bounds of a groupView.
  \param point The location to be tested, in local space.

  \param event The event requesting the hit test.

*/
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


#pragma clang diagnostic pop
